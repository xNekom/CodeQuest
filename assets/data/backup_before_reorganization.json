{
  "missions": [
    {
      "id": "mision_1_1",
      "title": "El Despertar del Guardián",
      "description": "Descubre tu destino como Guardián del Código en el reino de Algorithmia y aprende los fundamentos de la programación.",
      "zone": "Bosque de los Algoritmos",
      "levelRequired": 1,
      "status": "disponible",
      "isRepeatable": false,
      "rewards": {
        "experience": 30,
        "coins": 20,
        "items": [],
        "unlocks": [
          "mision_1_2"
        ]
      },
      "storyPages": [
        {
          "pageNumber": 1,
          "title": "El Despertar del Guardián",
          "text": "En las brumas del amanecer, te despiertas en el corazón de Algorithmia. El aire vibra con energía digital, y puedes sentir que algo terrible ha perturbado el equilibrio del reino. Los Errores Sintácticos han comenzado a corromper el Código Fuente, amenazando con sumir el mundo en el caos.\n\nComo nuevo Guardián del Código, tu misión es clara: debes aprender las artes ancestrales de la programación para restaurar el orden. Tu primer desafío te espera en el Bosque de los Algoritmos, donde los conceptos fundamentales de la programación cobran vida.",
          "imageUrl": ""
        },
        {
          "pageNumber": 2,
          "title": "El Oráculo de Java",
          "text": "Mientras caminas por el sendero de cristal que atraviesa el bosque, encuentras una antigua estructura: el Oráculo de Java. Sus paredes están cubiertas de runas que brillan con un suave resplandor azul. Una voz sabia resuena en tu mente:\n\n'Joven Guardián, para dominar el arte de la programación, primero debes comprender que un programa es como un conjuro: una serie de instrucciones precisas que le dicen a la máquina qué hacer. Java, el lenguaje que aprenderás, es especial porque puede ejecutarse en cualquier reino digital.'",
          "imageUrl": ""
        }
      ],
      "order": 1,
      "examples": [
        "// Mi primer mensaje en Java\nSystem.out.println(\"¡Hola, mundo de la programación!\");",
        "// Mostrando diferentes mensajes\nSystem.out.println(\"Bienvenido a Java\");\nSystem.out.println(\"La programación es divertida\");\nSystem.out.println(\"¡Vamos a aprender juntos!\");"
      ],
      "objectives": [
        {
          "type": "theory",
          "description": "Completa la lección teórica sobre programación básica.",
          "target": 1
        },
        {
          "type": "questions",
          "description": "Responde correctamente 3 preguntas sobre programación.",
          "target": 3,
          "questionIds": [
            "pregunta_que_es_programar",
            "pregunta_por_que_java",
            "pregunta_que_hace_programa"
          ]
        }
      ],
      "technicalExplanation": "La programación es el proceso de crear instrucciones que un ordenador puede seguir para resolver problemas o realizar tareas.\n\nConceptos fundamentales:\n• Programa: Conjunto de instrucciones escritas en un lenguaje que el ordenador entiende\n• Lenguaje de programación: Sistema de comunicación entre humanos y máquinas\n• Java: Lenguaje popular, fácil de aprender y multiplataforma\n• Multiplataforma: Capacidad de ejecutarse en diferentes sistemas operativos\n\nJava es ideal para principiantes porque:\n• Sintaxis clara y legible\n• Amplia comunidad y recursos de aprendizaje\n• Usado en aplicaciones web, móviles y empresariales",
      "theory": "En el reino mágico de Algorithmia, donde la tecnología y la magia se entrelazan, existe un arte ancestral llamado 'Programación'. Imagina que eres un mago que puede hablar con los ordenadores y darles órdenes para que hagan cosas increíbles.\n\nUn programa es como una receta de cocina muy detallada: una lista de pasos que le decimos al ordenador para que realice una tarea. Por ejemplo, podríamos crear un programa que calcule cuánto dinero necesitas ahorrar cada mes para comprar algo especial.\n\nJava es uno de los lenguajes de programación más populares del mundo. Lo especial de Java es que es como un idioma universal: un programa escrito en Java puede funcionar en casi cualquier ordenador, ya sea Windows, Mac o Linux. ¡Es como tener un hechizo que funciona en cualquier reino!"
    },
    {
      "id": "mision_1_2",
      "title": "Los Secretos de las Variables",
      "description": "Aprende a manejar las variables, los contenedores mágicos que guardan información en Algorithmia.",
      "zone": "Bosque de los Algoritmos",
      "levelRequired": 1,
      "status": "bloqueada",
      "isRepeatable": false,
      "requirements": {
        "completedMissionId": "mision_1_1"
      },
      "rewards": {
        "experience": 35,
        "coins": 25,
        "items": [],
        "unlocks": [
          "mision_1_3"
        ]
      },
      "storyPages": [
        {
          "pageNumber": 1,
          "title": "La Biblioteca de los Contenedores",
          "text": "Siguiendo las indicaciones del Oráculo, llegas a una majestuosa biblioteca construida en el corazón de un árbol milenario. Sus estantes están llenos de contenedores cristalinos de diferentes formas y colores, cada uno etiquetado con runas misteriosas.\n\nUn anciano bibliotecario, con barba que brilla como código binario, se acerca a ti: 'Bienvenido, joven Guardián. Estos son los Contenedores de Información, conocidos en el mundo mortal como variables. Cada uno puede guardar un tipo específico de dato, y son esenciales para cualquier hechizo de programación.'",
          "imageUrl": ""
        }
      ],
      "order": 2,
      "examples": [
        "// Creando variables básicas\nint miEdad = 18;\nString miNombre = \"Ana\";\nSystem.out.println(\"Hola, soy \" + miNombre);\nSystem.out.println(\"Tengo \" + miEdad + \" años\");",
        "// Diferentes tipos de variables\nint puntaje = 100;\nString juego = \"CodeQuest\";\ndouble tiempo = 45.5;\nboolean completado = true;\n\nSystem.out.println(\"Juego: \" + juego);\nSystem.out.println(\"Puntaje: \" + puntaje);"
      ],
      "theory": "En Algorithmia, los magos programadores descubrieron que necesitaban cajas especiales para guardar información. Estas cajas mágicas se llaman 'variables' y pueden contener diferentes tipos de tesoros.\n\nImagina que tienes diferentes tipos de cajas:\n• Una caja para números enteros (como tu edad: 15, 20, 100)\n• Una caja para palabras y frases (como tu nombre: \"María\", \"Hola mundo\")\n• Una caja para números con decimales (como tu altura: 1.65, 3.14)\n• Una caja para respuestas de sí o no (como: verdadero, falso)\n\nEn Java, antes de usar una caja (variable), debemos decirle qué tipo de tesoro va a guardar. Es como poner una etiqueta en la caja que dice \"Solo números\" o \"Solo palabras\".",
      "objectives": [
        {
          "type": "theory",
          "description": "Completa la lección teórica sobre programación básica.",
          "target": 1
        },
        {
          "type": "questions",
          "description": "Responde correctamente 3 preguntas sobre programación.",
          "target": 3,
          "questionIds": [
            "pregunta_que_es_una_variable",
            "pregunta_tipo_dato_edad_java",
            "pregunta_instruccion_hola_mundo_java"
          ]
        }
      ],
      "technicalExplanation": "Una variable es un contenedor que almacena datos en la memoria del ordenador. Cada variable tiene un nombre único y un tipo de dato específico.\n\nTipos de datos básicos en Java:\n• int: números enteros (ej: 42, -10, 0)\n• String: texto entre comillas (ej: \"Hola\", \"Java\")\n• double: números decimales (ej: 3.14, -2.5)\n• boolean: verdadero o falso (true/false)\n\nSintaxis básica:\ntipo nombreVariable = valor;\n\nEjemplo: int edad = 20;"
    },
    {
      "id": "mision_1_3",
      "title": "El Arte de las Instrucciones",
      "description": "Domina las instrucciones básicas y aprende a crear tu primer programa completo en Java.",
      "zone": "Bosque de los Algoritmos",
      "levelRequired": 1,
      "status": "bloqueada",
      "isRepeatable": false,
      "requirements": {
        "completedMissionId": "mision_1_2"
      },
      "objectives": [
        {
          "type": "theory",
          "description": "Aprende sobre instrucciones y estructura de programas.",
          "target": 1
        },
        {
          "type": "questions",
          "description": "Responde correctamente 3 preguntas sobre instrucciones.",
          "target": 3,
          "questionIds": [
            "pregunta_estructura_principal_java_clase_main",
            "pregunta_instruccion_hola_mundo_java",
            "pregunta_que_es_un_programa"
          ]
        }
      ],
      "rewards": {
        "experience": 40,
        "coins": 30,
        "items": [],
        "unlocks": [
          "mision_batalla_1_1"
        ]
      },
      "theory": "En el corazón de todo programa Java reside el método main, el punto de entrada donde comienza la ejecución del hechizo. Como un portal mágico, este método especial es donde el sistema invoca tu programa y donde todas las aventuras de código comienzan.\n\nLas instrucciones en Java son como conjuros individuales que se ejecutan uno tras otro. System.out.println() es uno de los hechizos más fundamentales, permitiendo que tu programa se comunique con el mundo exterior mostrando mensajes en la consola. Cada instrucción debe terminar con un punto y coma, como el sello final de un conjuro.",
      "technicalExplanation": "El método main es el punto de entrada de cualquier aplicación Java. Su firma debe ser exactamente: public static void main(String[] args)\n\nComponentes del método main:\n• public: modificador de acceso que permite acceso desde cualquier lugar\n• static: permite llamar al método sin crear una instancia de la clase\n• void: indica que el método no retorna ningún valor\n• String[] args: parámetro que recibe argumentos de línea de comandos\n\nSystem.out.println() es un método para imprimir texto en la consola estándar, agregando un salto de línea al final.",
      "examples": [
        "// Programa básico con método main\npublic class MiPrograma {\n    public static void main(String[] args) {\n        System.out.println(\"¡Mi primer programa!\");\n        System.out.println(\"Java es genial\");\n    }\n}",
        "// Programa con variables y salida\npublic class Calculadora {\n    public static void main(String[] args) {\n        int numero1 = 15;\n        int numero2 = 25;\n        int resultado = numero1 + numero2;\n        System.out.println(\"El resultado es: \" + resultado);\n    }\n}"
      ],
      "storyPages": [
        {
          "pageNumber": 1,
          "title": "El Altar de Ejecución",
          "text": "En el centro del bosque, descubres un altar circular rodeado de pilares de código luminoso. Este es el Altar de Ejecución, donde todos los programas Java cobran vida. El bibliotecario te explica: 'Aquí es donde reside el método main, el corazón palpitante de todo programa Java. Sin él, ningún hechizo puede ejecutarse.'\n\nObservas cómo las runas se organizan en patrones específicos, cada una representando una instrucción que será ejecutada en orden. Es hora de crear tu primer programa completo.",
          "imageUrl": ""
        }
      ],
      "order": 3
    },
    {
      "id": "mision_2_1",
      "title": "El Laberinto de las Condiciones",
      "description": "Aprende a tomar decisiones en tus programas usando estructuras condicionales.",
      "zone": "Valle de las Decisiones",
      "levelRequired": 2,
      "status": "bloqueada",
      "isRepeatable": false,
      "requirements": {
        "completedMissionId": "mision_batalla_1_1"
      },
      "objectives": [
        {
          "type": "theory",
          "description": "Aprende sobre estructuras condicionales.",
          "target": 1
        },
        {
          "type": "questions",
          "description": "Responde correctamente 3 preguntas sobre condicionales.",
          "target": 3,
          "questionIds": [
            "pregunta_que_es_una_variable",
            "pregunta_tipo_dato_edad_java",
            "pregunta_instruccion_hola_mundo_java"
          ]
        }
      ],
      "rewards": {
        "experience": 45,
        "coins": 35,
        "items": [],
        "unlocks": [
          "mision_2_2"
        ]
      },
      "theory": "En el Valle de las Decisiones de Algorithmia, los caminos se bifurcan constantemente, y solo los Guardianes que dominan el arte de las decisiones pueden navegar exitosamente. Las estructuras condicionales son como encrucijadas mágicas que permiten a tu programa elegir diferentes caminos basándose en condiciones específicas.\n\nLa estructura if es la más fundamental: evalúa una condición y ejecuta un bloque de código solo si esa condición es verdadera. Es como un guardián que solo permite el paso si se cumple cierta regla. Puedes expandir esto con else para manejar el caso contrario, y else if para múltiples condiciones.",
      "technicalExplanation": "Las estructuras condicionales permiten que un programa tome decisiones basadas en condiciones lógicas. En Java, las principales estructuras son:\n\n• if: ejecuta código si la condición es true\n• if-else: ejecuta un bloque si es true, otro si es false\n• if-else if-else: evalúa múltiples condiciones en secuencia\n• switch: compara una variable con múltiples valores\n\nLas condiciones se evalúan como expresiones boolean y pueden usar operadores de comparación (==, !=, <, >, <=, >=) y lógicos (&&, ||, !).",
      "examples": [
        "// Estructura if básica\nint edad = 18;\nif (edad >= 18) {\n    System.out.println(\"Eres mayor de edad\");\n}",
        "// Estructura if-else-if\nint puntuacion = 85;\nif (puntuacion >= 90) {\n    System.out.println(\"Excelente\");\n} else if (puntuacion >= 70) {\n    System.out.println(\"Bueno\");\n} else {\n    System.out.println(\"Necesitas mejorar\");\n}"
      ],
      "storyPages": [
        {
          "pageNumber": 1,
          "title": "El Valle de las Decisiones",
          "text": "Tras tu victoria contra el Bug del Punto y Coma, el camino te lleva hacia un valle misterioso donde los senderos se multiplican infinitamente. Cada bifurcación está marcada con cristales que brillan según diferentes condiciones. Un sabio centinela te explica: 'Este es el Valle de las Decisiones, donde aprenderás a guiar a tus programas por el camino correcto usando el poder de las condiciones.'",
          "imageUrl": ""
        }
      ],
      "order": 5
    },
    {
      "id": "mision_2_2",
      "title": "Los Ciclos del Tiempo",
      "description": "Domina los bucles y aprende a repetir acciones de manera eficiente en tus programas.",
      "zone": "Valle de las Decisiones",
      "levelRequired": 2,
      "status": "bloqueada",
      "isRepeatable": false,
      "requirements": {
        "completedMissionId": "mision_2_1"
      },
      "objectives": [
        {
          "type": "theory",
          "description": "Aprende sobre bucles y repetición.",
          "target": 1
        },
        {
          "type": "questions",
          "description": "Responde correctamente 3 preguntas sobre bucles.",
          "target": 3,
          "questionIds": [
            "pregunta_que_es_un_programa",
            "pregunta_que_es_una_variable",
            "pregunta_estructura_principal_java_clase_main"
          ]
        }
      ],
      "rewards": {
        "experience": 50,
        "coins": 40,
        "items": [],
        "unlocks": [
          "mision_2_3"
        ]
      },
      "theory": "En las profundidades del Valle de las Decisiones, descubres los Círculos del Tiempo, donde las acciones pueden repetirse una y otra vez hasta que se cumpla una condición específica. Los bucles son como rituales mágicos que permiten ejecutar el mismo conjunto de instrucciones múltiples veces sin tener que escribirlas repetidamente.\n\nExisten tres tipos principales de bucles en Java: for (cuando sabes exactamente cuántas veces repetir), while (cuando repites mientras una condición sea verdadera), y do-while (similar a while, pero garantiza al menos una ejecución). Cada uno tiene su propósito específico en la magia de la programación.",
      "technicalExplanation": "Los bucles permiten ejecutar repetidamente un bloque de código. Java ofrece tres tipos principales:\n\n• for: ideal cuando conoces el número de iteraciones\n  Sintaxis: for(inicialización; condición; incremento)\n• while: repite mientras la condición sea true\n  Sintaxis: while(condición)\n• do-while: ejecuta al menos una vez, luego verifica la condición\n  Sintaxis: do { } while(condición)\n\nEs importante evitar bucles infinitos asegurándose de que la condición eventualmente se vuelva false.",
      "examples": [
        "// Bucle for\nfor (int i = 1; i <= 5; i++) {\n    System.out.println(\"Iteración: \" + i);\n}",
        "// Bucle while\nint contador = 0;\nwhile (contador < 3) {\n    System.out.println(\"Contador: \" + contador);\n    contador++;\n}"
      ],
      "storyPages": [
        {
          "pageNumber": 1,
          "title": "Los Círculos del Tiempo",
          "text": "Siguiendo el sendero de cristales luminosos, llegas a una zona donde el tiempo parece moverse en círculos. Aquí, las mismas acciones se repiten una y otra vez, creando patrones hipnóticos en el aire. Un mago temporal te recibe: 'Bienvenido a los Círculos del Tiempo, donde aprenderás el poder de la repetición controlada. Los bucles son la clave para realizar tareas complejas con elegancia y eficiencia.'",
          "imageUrl": ""
        }
      ],
      "order": 6
    },
    {
      "id": "mision_2_3",
      "title": "El Santuario de los Métodos",
      "description": "Aprende a organizar tu código creando métodos reutilizables y modulares.",
      "zone": "Valle de las Decisiones",
      "levelRequired": 2,
      "status": "bloqueada",
      "isRepeatable": false,
      "requirements": {
        "completedMissionId": "mision_2_2"
      },
      "objectives": [
        {
          "type": "theory",
          "description": "Aprende sobre métodos y modularización.",
          "target": 1
        },
        {
          "type": "questions",
          "description": "Responde correctamente 3 preguntas sobre métodos.",
          "target": 3,
          "questionIds": [
            "pregunta_multiplataforma_java",
            "pregunta_tipo_dato_edad_java",
            "pregunta_instruccion_hola_mundo_java"
          ]
        }
      ],
      "rewards": {
        "experience": 55,
        "coins": 45,
        "items": [],
        "unlocks": [
          "mision_batalla_2_1"
        ]
      },
      "theory": "En lo alto del Valle de las Decisiones se alza el Santuario de los Métodos, un templo donde los Guardianes aprenden a dividir sus hechizos en componentes más pequeños y manejables. Los métodos son como conjuros especializados que pueden ser invocados cuando se necesiten, permitiendo organizar el código de manera clara y reutilizable.\n\nUn método en Java es un bloque de código que realiza una tarea específica y puede ser llamado desde otras partes del programa. Puede recibir parámetros (información de entrada) y puede devolver un valor (información de salida). Esto permite crear código más limpio, fácil de mantener y libre de repetición.",
      "technicalExplanation": "Los métodos son bloques de código reutilizables que realizan tareas específicas. Su sintaxis en Java es:\n\n[modificadores] tipoRetorno nombreMétodo(parámetros) {\n    // código del método\n    return valor; // si no es void\n}\n\nComponentes:\n• Modificadores: public, private, static, etc.\n• Tipo de retorno: tipo de dato que devuelve (void si no devuelve nada)\n• Nombre: identificador del método\n• Parámetros: valores de entrada (opcionales)\n\nLos métodos promueven la reutilización de código y la modularización.",
      "examples": [
        "// Método simple sin parámetros\npublic static void saludar() {\n    System.out.println(\"¡Hola desde el método!\");\n}\n\n// Llamada al método\nsaludar();",
        "// Método con parámetros y valor de retorno\npublic static int sumar(int a, int b) {\n    return a + b;\n}\n\n// Uso del método\nint resultado = sumar(5, 3);\nSystem.out.println(\"Resultado: \" + resultado);"
      ],
      "storyPages": [
        {
          "pageNumber": 1,
          "title": "El Santuario de los Métodos",
          "text": "Al final del valle, una escalinata de mármol te conduce hacia un templo majestuoso donde resuenan ecos de conjuros organizados. El Maestro de Métodos, un sabio de túnica dorada, te recibe: 'Aquí aprenderás a dividir tus hechizos en componentes especializados. Cada método es como un conjuro que puede ser invocado cuando lo necesites, haciendo tu magia más poderosa y organizada.'",
          "imageUrl": ""
        }
      ],
      "order": 7
    },
    {
      "id": "mision_batalla_1_1",
      "title": "Batalla: El Bug del Punto y Coma",
      "description": "Enfrenta tu primera batalla contra las fuerzas corruptoras. Derrota al Bug del Punto y Coma con tus conocimientos.",
      "zone": "Campo de Batalla",
      "levelRequired": 1,
      "status": "bloqueada",
      "isRepeatable": true,
      "requirements": {
        "completedMissionId": "mision_1_3"
      },
      "objectives": [
        {
          "type": "batalla",
          "description": "Derrota al Bug del Punto y Coma respondiendo preguntas.",
          "target": 1,
          "battleConfig": {
            "enemyId": "enemigo_bug_del_punto_y_coma",
            "questionIds": [
              "pregunta_que_es_un_programa",
              "pregunta_multiplataforma_java",
              "pregunta_estructura_principal_java_clase_main"
            ],
            "playerHealthMultiplier": 1,
            "enemyAttackMultiplier": 0.8,
            "environment": "campo_bug"
          }
        }
      ],
      "rewards": {
        "experience": 50,
        "coins": 40,
        "items": [],
        "unlocks": [
          "mision_2_1"
        ]
      },
      "order": 4
    },
    {
      "id": "mision_batalla_2_1",
      "title": "Batalla: El NullPointerException",
      "description": "Enfrenta al temido NullPointerException, una de las criaturas más peligrosas del Valle de las Decisiones.",
      "zone": "Campo de Batalla",
      "levelRequired": 2,
      "status": "bloqueada",
      "isRepeatable": true,
      "requirements": {
        "completedMissionId": "mision_2_3"
      },
      "objectives": [
        {
          "type": "batalla",
          "description": "Derrota al NullPointerException con tus conocimientos avanzados.",
          "target": 1,
          "battleConfig": {
            "enemyId": "enemigo_nullpointerexception",
            "questionIds": [
              "pregunta_que_es_una_variable",
              "pregunta_tipo_dato_edad_java",
              "pregunta_instruccion_hola_mundo_java",
              "pregunta_estructura_principal_java_clase_main"
            ],
            "playerHealthMultiplier": 1,
            "enemyAttackMultiplier": 1,
            "environment": "campo_bug"
          }
        }
      ],
      "rewards": {
        "experience": 60,
        "coins": 50,
        "items": [],
        "unlocks": []
      },
      "order": 8
    }
  ],
  "questions": [
    {
      "id": "q_constructor_4",
      "text": "Observa: `public class Robot { String nombre; public Robot(String n) { nombre = n; } }`. ¿Cómo crearías un objeto Robot llamado 'WallE'?",
      "options": [
        "Robot wallE = Robot(\"WallE\");",
        "Robot wallE = new Robot(\"WallE\");",
        "new Robot wallE = (\"WallE\");",
        "Robot wallE.Robot(\"WallE\");"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Correcto. Se usa `new Robot(\"WallE\")`. `new` crea el objeto, `Robot` es el tipo y `(\"WallE\")` pasa el argumento al constructor.",
      "originalId": "pregunta_que_es_un_programa"
    },
    {
      "id": "pregunta_estructura_if_java",
      "text": "Si quieres que un mensaje '¡Has ganado!' solo se muestre si la puntuacion del jugador es mayor que 100, ¿cuál es la estructura correcta de un if en Java?",
      "options": [
        "if puntuacion > 100 { System.out.println(\"¡Has ganado!\"); }",
        "if (puntuacion > 100) System.out.println(\"¡Has ganado!\");",
        "if (puntuacion > 100) { System.out.println(\"¡Has ganado!\"); }",
        "if (puntuacion es mayor que 100) { System.out.println(\"¡Has ganado!\"); }"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) if (puntuacion > 100) { System.out.println(\"¡Has ganado!\"); }. En Java, la condición de un if siempre debe ir entre paréntesis (), y el bloque de código a ejecutar si la condición es verdadera debe ir entre llaves {}. La opción b) es técnicamente válida para una sola línea, pero la c) es la forma estándar y recomendada para claridad y cuando hay múltiples líneas de código.",
      "originalId": "pregunta_multiplataforma_java"
    },
    {
      "id": "pregunta_bucle_for_java",
      "text": "¿Cuántas veces se ejecutará el mensaje 'Ataque!' el siguiente código Java? for (int i = 0; i < 3; i++) { System.out.println(\"Ataque!\"); }",
      "options": [
        "0 veces",
        "1 vez",
        "3 veces",
        "4 veces"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) 3 veces. Cuando i es 0, 0 < 3 es true, se imprime 'Ataque!'. i se convierte en 1. Cuando i es 1, 1 < 3 es true, se imprime 'Ataque!'. i se convierte en 2. Cuando i es 2, 2 < 3 es true, se imprime 'Ataque!'. i se convierte en 3. Cuando i es 3, 3 < 3 es false, el bucle termina.",
      "originalId": "pregunta_estructura_principal_java_clase_main"
    },
    {
      "id": "pregunta_expresion_calculo_vidas_java",
      "text": "Si tienes dos variables, vidas = 5 y daño = 2, ¿qué expresión Java usarías para calcular cuántas vidas te quedan si te quitan el daño?",
      "options": [
        "vidas + daño",
        "vidas * daño",
        "vidas - daño",
        "vidas / daño"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) vidas - daño. Para saber cuántas vidas te quedan después de recibir daño, debes restar el daño a tus vidas actuales. El operador - realiza la resta.",
      "originalId": "pregunta_instruccion_hola_mundo_java"
    },
    {
      "id": "pregunta_clase_vs_objeto_java",
      "text": "En Java, si una Clase es como un plano o molde (ej: Clase Jugador), ¿qué representa un 'objeto' (ej: jugador1)?",
      "options": [
        "Otra clase diferente.",
        "Un error en el programa.",
        "Una instancia concreta creada a partir de ese plano, con sus propios valores para los atributos.",
        "Un tipo de dato primitivo."
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) Una instancia concreta creada a partir de ese plano, con sus propios valores para los atributos. Un objeto es la materialización de una clase. Si la clase Jugador define que los jugadores tienen un nombre y una vida, jugador1 y jugador2 serían dos objetos diferentes, cada uno con su propio nombre y valor de vida, pero ambos creados siguiendo el molde de la clase Jugador.",
      "originalId": "pregunta_que_es_una_variable"
    },
    {
      "id": "pregunta_instruccion_hola_mundo_java",
      "text": "¿Cuál es la instrucción correcta en Java para mostrar el mensaje 'Hola Mundo' en la consola, y luego saltar a la siguiente línea?",
      "options": [
        "print(\"Hola Mundo\");",
        "System.in.println(\"Hola Mundo\");",
        "System.out.println(\"Hola Mundo\");",
        "console.log(\"Hola Mundo\");"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) System.out.println(\"Hola Mundo\");. Esta es la sintaxis estándar en Java para imprimir texto en la consola de salida y añadir un salto de línea al final, lo que es muy útil para depurar o mostrar información al usuario. Las otras opciones son incorrectas para Java: print no es el comando completo, System.in es para la entrada, y console.log es de otros lenguajes.",
      "originalId": "pregunta_tipo_dato_edad_java"
    },
    {
      "id": "pregunta_bucle_for_java",
      "text": "¿Cuántas veces se ejecutará el mensaje 'Ataque!' el siguiente código Java? for (int i = 0; i < 3; i++) { System.out.println(\"Ataque!\"); }",
      "options": [
        "0 veces",
        "1 vez",
        "3 veces",
        "4 veces"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) 3 veces. Cuando i es 0, 0 < 3 es true, se imprime 'Ataque!'. i se convierte en 1. Cuando i es 1, 1 < 3 es true, se imprime 'Ataque!'. i se convierte en 2. Cuando i es 2, 2 < 3 es true, se imprime 'Ataque!'. i se convierte en 3. Cuando i es 3, 3 < 3 es false, el bucle termina.",
      "originalId": "pregunta_estructura_principal_java_clase_main"
    },
    {
      "id": "pregunta_declaracion_variable_entera_java",
      "text": "¿Cuál de las siguientes líneas de código declara correctamente una variable entera llamada puntuacion y le asigna un valor inicial de 100 en Java?",
      "options": [
        "puntuacion = 100;",
        "int puntuacion;",
        "int puntuacion = 100;",
        "Puntuacion int = 100;"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) int puntuacion = 100;. Esta línea declara una variable de tipo entero (int), la nombra puntuacion, y le asigna el valor 100 en el mismo momento. a) Solo asigna un valor, la variable no está declarada. b) Declara la variable, pero no le asigna un valor inicial. d) La sintaxis es incorrecta; el tipo de dato siempre va antes del nombre de la variable.",
      "originalId": "pregunta_nombre_variable_valido_java"
    },
    {
      "id": "pregunta_evitar_nullpointerexception",
      "text": "Una forma de proteger tu código contra una NullPointerException antes de usar un objeto es:",
      "options": [
        "Ignorar el problema y esperar que no ocurra.",
        "Usar siempre nombres de variables muy cortos.",
        "Verificar si el objeto es 'null' antes de intentar acceder a sus miembros (ej: `if (miObjeto != null)`).",
        "Añadir muchos comentarios al código."
      ],
      "correctAnswerIndex": 2,
      "explanation": "Comprobar explícitamente si una referencia de objeto es `null` antes de usarla (por ejemplo, con una sentencia `if (objeto != null)`) es una práctica defensiva clave para prevenir las NullPointerExceptions y hacer tu código más robusto.",
      "originalId": "pregunta_declaracion_variable_entera_java"
    },
    {
      "id": "q_constructor_4",
      "text": "Observa: `public class Robot { String nombre; public Robot(String n) { nombre = n; } }`. ¿Cómo crearías un objeto Robot llamado 'WallE'?",
      "options": [
        "Robot wallE = Robot(\"WallE\");",
        "Robot wallE = new Robot(\"WallE\");",
        "new Robot wallE = (\"WallE\");",
        "Robot wallE.Robot(\"WallE\");"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Correcto. Se usa `new Robot(\"WallE\")`. `new` crea el objeto, `Robot` es el tipo y `(\"WallE\")` pasa el argumento al constructor.",
      "originalId": "pregunta_que_es_un_programa"
    },
    {
      "id": "pregunta_que_es_un_programa",
      "text": "¿Qué es un 'programa' en el contexto de la programación?",
      "options": [
        "Un dibujo de un ordenador.",
        "Un conjunto de instrucciones para que el ordenador realice una tarea.",
        "Un tipo de música.",
        "Un juego de mesa."
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) Un conjunto de instrucciones para que el ordenador realice una tarea. Un programa es precisamente eso: una serie de pasos detallados que le decimos a una máquina para que la ejecute y logre un objetivo, como mostrar un mensaje en pantalla o procesar información.",
      "originalId": "pregunta_expresion_calculo_vidas_java"
    },
    {
      "id": "pregunta_nombre_variable_valido_java",
      "text": "¿Cuál de los siguientes nombres de variable es válido en Java?",
      "options": [
        "1puntuacion",
        "nombre jugador",
        "mi_nombre",
        "public"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) mi_nombre. a) 1puntuacion es inválido porque un nombre de variable no puede empezar con un número. b) nombre jugador es inválido porque no puede contener espacios. d) public es inválido porque es una palabra reservada del lenguaje Java. mi_nombre sigue las reglas: no empieza con número, no tiene espacios y no es una palabra reservada.",
      "originalId": "pregunta_division_enteros_java"
    },
    {
      "id": "pregunta_evitar_nullpointerexception",
      "text": "Una forma de proteger tu código contra una NullPointerException antes de usar un objeto es:",
      "options": [
        "Ignorar el problema y esperar que no ocurra.",
        "Usar siempre nombres de variables muy cortos.",
        "Verificar si el objeto es 'null' antes de intentar acceder a sus miembros (ej: `if (miObjeto != null)`).",
        "Añadir muchos comentarios al código."
      ],
      "correctAnswerIndex": 2,
      "explanation": "Comprobar explícitamente si una referencia de objeto es `null` antes de usarla (por ejemplo, con una sentencia `if (objeto != null)`) es una práctica defensiva clave para prevenir las NullPointerExceptions y hacer tu código más robusto.",
      "originalId": "pregunta_declaracion_variable_entera_java"
    },
    {
      "id": "pregunta_que_es_bucle_infinito",
      "text": "Un 'Bug de Bucle Infinito' es un problema donde un bucle en tu programa se repite sin fin, usualmente congelando la aplicación. ¿Cuál podría ser una causa común?",
      "options": [
        "Una variable que nunca se declara.",
        "Una condición de terminación del bucle que nunca se cumple.",
        "Usar un tipo de dato incorrecto para un contador.",
        "Escribir un comentario demasiado largo dentro del bucle."
      ],
      "correctAnswerIndex": 1,
      "explanation": "Los bucles (como `for` o `while`) necesitan una condición que eventualmente se vuelva falsa para detenerse. Si esta condición siempre es verdadera (por ejemplo, `while(true)` sin un `break` interno, o un contador que nunca alcanza el límite), el bucle se ejecutará indefinidamente.",
      "originalId": "pregunta_arraylist_vs_array_java"
    },
    {
      "id": "pregunta_declaracion_variable_entera_java",
      "text": "¿Cuál de las siguientes líneas de código declara correctamente una variable entera llamada puntuacion y le asigna un valor inicial de 100 en Java?",
      "options": [
        "puntuacion = 100;",
        "int puntuacion;",
        "int puntuacion = 100;",
        "Puntuacion int = 100;"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) int puntuacion = 100;. Esta línea declara una variable de tipo entero (int), la nombra puntuacion, y le asigna el valor 100 en el mismo momento. a) Solo asigna un valor, la variable no está declarada. b) Declara la variable, pero no le asigna un valor inicial. d) La sintaxis es incorrecta; el tipo de dato siempre va antes del nombre de la variable.",
      "originalId": "pregunta_nombre_variable_valido_java"
    },
    {
      "id": "pregunta_que_es_una_excepcion_java",
      "text": "¿Qué es una 'excepción' en Java?",
      "options": [
        "Un tipo de variable que guarda texto.",
        "Un método especial para imprimir mensajes.",
        "Un evento inesperado o un problema que ocurre durante la ejecución de un programa y que interrumpe su flujo normal.",
        "Una forma de hacer que el programa sea más rápido."
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) Un evento inesperado o un problema que ocurre durante la ejecución de un programa y que interrumpe su flujo normal. Las excepciones son como alarmas que suenan cuando algo va mal. Java nos permite 'capturar' estas alarmas para poder gestionarlas y evitar que el programa se bloquee, mostrando un mensaje de error al usuario o intentando una acción alternativa.",
      "originalId": "pregunta_estructura_if_java"
    },
    {
      "id": "pregunta_por_que_java",
      "text": "¿Por qué Java es un buen lenguaje para aprender programación?",
      "correctAnswerIndex": 2,
      "originalId": "pregunta_por_que_java",
      "options": [
        "Porque es muy difícil",
        "Porque solo funciona en un ordenador",
        "Porque es fácil de leer y funciona en muchos tipos de ordenadores",
        "Porque es muy antiguo"
      ],
      "explanation": "La respuesta correcta es c) Porque es fácil de leer y funciona en muchos tipos de ordenadores. Java fue diseñado para ser claro y comprensible, y tiene la ventaja de que un programa escrito en Java puede ejecutarse en Windows, Mac, Linux y otros sistemas sin cambios."
    },
    {
      "id": "pregunta_razon_usar_metodo_java",
      "text": "¿Cuál de las siguientes es una buena razón para usar un 'método' en programación?",
      "options": [
        "Para hacer el código más difícil de entender.",
        "Para repetir la misma instrucción muchas veces seguidas sin control.",
        "Para organizar el código en tareas específicas y reutilizarlo, evitando la repetición.",
        "Para hacer que el programa se ejecute más lento."
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) Para organizar el código en tareas específicas y reutilizarlo, evitando la repetición. Los métodos son una herramienta fundamental para mantener el código limpio, modular y fácil de mantener. Al encapsular una tarea en un método, puedes llamarlo desde cualquier lugar del programa sin tener que reescribir el mismo conjunto de instrucciones.",
      "originalId": "pregunta_condicion_if_else_java"
    },
    {
      "id": "pregunta_expresion_calculo_vidas_java",
      "text": "Si tienes dos variables, vidas = 5 y daño = 2, ¿qué expresión Java usarías para calcular cuántas vidas te quedan si te quitan el daño?",
      "options": [
        "vidas + daño",
        "vidas * daño",
        "vidas - daño",
        "vidas / daño"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) vidas - daño. Para saber cuántas vidas te quedan después de recibir daño, debes restar el daño a tus vidas actuales. El operador - realiza la resta.",
      "originalId": "pregunta_instruccion_hola_mundo_java"
    },
    {
      "id": "pregunta_llamar_metodo_java",
      "text": "Dado el siguiente método en Java: public void mostrarMensaje() { System.out.println(\"¡Bienvenido a CodeQuest!\"); } ¿Cómo llamarías a este método para que imprima el mensaje?",
      "options": [
        "System.out.println(mostrarMensaje);",
        "mostrarMensaje();",
        "call mostrarMensaje();",
        "run mostrarMensaje;"
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) mostrarMensaje();. Para llamar a un método sin parámetros, simplemente escribes su nombre seguido de paréntesis vacíos y un punto y coma. Las otras opciones usan sintaxis incorrecta o comandos que no existen en Java para llamar a un método.",
      "originalId": "pregunta_bucle_for_java"
    },
    {
      "id": "pregunta_funcion_array_java",
      "text": "¿Cuál es la función principal de un Array en programación Java?",
      "options": [
        "Realizar operaciones matemáticas complejas.",
        "Almacenar un único valor de texto.",
        "Almacenar una colección de elementos del mismo tipo de dato, organizados por un índice.",
        "Dibujar gráficos en la pantalla."
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) Almacenar una colección de elementos del mismo tipo de dato, organizados por un índice. Los arrays son estructuras de datos que nos permiten guardar múltiples valores (como una lista de puntuaciones, nombres de enemigos o habilidades) bajo un solo nombre de variable, facilitando su manejo y acceso mediante posiciones numéricas.",
      "originalId": "pregunta_funcion_array_java"
    },
    {
      "id": "pregunta_que_es_programar",
      "correctAnswerIndex": 1,
      "originalId": "pregunta_que_es_programar",
      "options": [
        "Encender y apagar el ordenador",
        "Darle instrucciones paso a paso para que haga algo específico",
        "Cambiar el color de la pantalla",
        "Conectarlo a internet"
      ],
      "text": "¿Qué significa \"programar\" un ordenador?",
      "explanation": "La respuesta correcta es b) Darle instrucciones paso a paso para que haga algo específico. Programar es como enseñarle al ordenador cómo resolver un problema o realizar una tarea, escribiendo las instrucciones en un lenguaje que él pueda entender."
    },
    {
      "id": "pregunta_estructura_principal_java_clase_main",
      "text": "En Java, ¿dentro de qué estructura principal se organiza casi todo el código y dónde se encuentra el método main (el punto de inicio de un programa)?",
      "options": [
        "Un archivo de texto.",
        "Una carpeta.",
        "Una clase.",
        "Una función."
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) Una clase. En Java, la programación es 'orientada a objetos', y las clases son los bloques de construcción fundamentales. Todo el código que escribimos, incluyendo el método main (que es el primer lugar donde el programa comienza a ejecutarse), debe estar encapsulado dentro de una clase.",
      "originalId": "pregunta_razon_usar_metodo_java"
    },
    {
      "id": "pregunta_estructura_if_java",
      "text": "Si quieres que un mensaje '¡Has ganado!' solo se muestre si la puntuacion del jugador es mayor que 100, ¿cuál es la estructura correcta de un if en Java?",
      "options": [
        "if puntuacion > 100 { System.out.println(\"¡Has ganado!\"); }",
        "if (puntuacion > 100) System.out.println(\"¡Has ganado!\");",
        "if (puntuacion > 100) { System.out.println(\"¡Has ganado!\"); }",
        "if (puntuacion es mayor que 100) { System.out.println(\"¡Has ganado!\"); }"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) if (puntuacion > 100) { System.out.println(\"¡Has ganado!\"); }. En Java, la condición de un if siempre debe ir entre paréntesis (), y el bloque de código a ejecutar si la condición es verdadera debe ir entre llaves {}. La opción b) es técnicamente válida para una sola línea, pero la c) es la forma estándar y recomendada para claridad y cuando hay múltiples líneas de código.",
      "originalId": "pregunta_multiplataforma_java"
    },
    {
      "id": "pregunta_identificar_bucle_infinito",
      "text": "Si sospechas que tienes un bucle infinito, ¿qué síntoma podrías observar en tu programa?",
      "options": [
        "El programa termina inmediatamente sin errores.",
        "El programa se ejecuta más rápido de lo esperado.",
        "El programa no responde, consume muchos recursos del CPU o imprime el mismo resultado repetidamente.",
        "El programa muestra un mensaje de 'error de sintaxis'."
      ],
      "correctAnswerIndex": 2,
      "explanation": "Un bucle infinito a menudo hace que el programa parezca colgado, use mucha CPU porque está constantemente ejecutando el cuerpo del bucle, o si hay una instrucción de impresión dentro, la verás repetirse sin parar en la consola.",
      "originalId": "pregunta_llamar_metodo_java"
    },
    {
      "id": "pregunta_funcion_array_java",
      "text": "¿Cuál es la función principal de un Array en programación Java?",
      "options": [
        "Realizar operaciones matemáticas complejas.",
        "Almacenar un único valor de texto.",
        "Almacenar una colección de elementos del mismo tipo de dato, organizados por un índice.",
        "Dibujar gráficos en la pantalla."
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) Almacenar una colección de elementos del mismo tipo de dato, organizados por un índice. Los arrays son estructuras de datos que nos permiten guardar múltiples valores (como una lista de puntuaciones, nombres de enemigos o habilidades) bajo un solo nombre de variable, facilitando su manejo y acceso mediante posiciones numéricas.",
      "originalId": "pregunta_funcion_array_java"
    },
    {
      "id": "pregunta_identificar_bucle_infinito",
      "text": "Si sospechas que tienes un bucle infinito, ¿qué síntoma podrías observar en tu programa?",
      "options": [
        "El programa termina inmediatamente sin errores.",
        "El programa se ejecuta más rápido de lo esperado.",
        "El programa no responde, consume muchos recursos del CPU o imprime el mismo resultado repetidamente.",
        "El programa muestra un mensaje de 'error de sintaxis'."
      ],
      "correctAnswerIndex": 2,
      "explanation": "Un bucle infinito a menudo hace que el programa parezca colgado, use mucha CPU porque está constantemente ejecutando el cuerpo del bucle, o si hay una instrucción de impresión dentro, la verás repetirse sin parar en la consola.",
      "originalId": "pregunta_llamar_metodo_java"
    },
    {
      "id": "pregunta_clase_vs_objeto_java",
      "text": "En Java, si una Clase es como un plano o molde (ej: Clase Jugador), ¿qué representa un 'objeto' (ej: jugador1)?",
      "options": [
        "Otra clase diferente.",
        "Un error en el programa.",
        "Una instancia concreta creada a partir de ese plano, con sus propios valores para los atributos.",
        "Un tipo de dato primitivo."
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) Una instancia concreta creada a partir de ese plano, con sus propios valores para los atributos. Un objeto es la materialización de una clase. Si la clase Jugador define que los jugadores tienen un nombre y una vida, jugador1 y jugador2 serían dos objetos diferentes, cada uno con su propio nombre y valor de vida, pero ambos creados siguiendo el molde de la clase Jugador.",
      "originalId": "pregunta_que_es_una_variable"
    },
    {
      "id": "pregunta_division_enteros_java",
      "text": "Considerando las variables monedas = 10 y precioObjeto = 3. ¿Qué valor obtendría la variable objetosComprados si ejecutas la siguiente línea de código en Java? int objetosComprados = monedas / precioObjeto;",
      "options": [
        "3.33",
        "3",
        "4",
        "10"
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) 3. Cuando divides dos números enteros (int) en Java usando el operador /, el resultado también es un entero y se trunca la parte decimal (se elimina, no se redondea). Entonces, 10 / 3 da como resultado 3.",
      "originalId": "pregunta_acceder_elemento_array_java"
    },
    {
      "id": "pregunta_que_es_una_excepcion_java",
      "text": "¿Qué es una 'excepción' en Java?",
      "options": [
        "Un tipo de variable que guarda texto.",
        "Un método especial para imprimir mensajes.",
        "Un evento inesperado o un problema que ocurre durante la ejecución de un programa y que interrumpe su flujo normal.",
        "Una forma de hacer que el programa sea más rápido."
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) Un evento inesperado o un problema que ocurre durante la ejecución de un programa y que interrumpe su flujo normal. Las excepciones son como alarmas que suenan cuando algo va mal. Java nos permite 'capturar' estas alarmas para poder gestionarlas y evitar que el programa se bloquee, mostrando un mensaje de error al usuario o intentando una acción alternativa.",
      "originalId": "pregunta_estructura_if_java"
    },
    {
      "id": "pregunta_idea_central_poo_java",
      "text": "¿Cuál es la idea central de la Programación Orientada a Objetos (POO) en Java?",
      "options": [
        "Escribir todo el código en una sola línea.",
        "Organizar el código alrededor de 'objetos' que tienen atributos (características) y métodos (acciones).",
        "Usar solo números en el programa.",
        "Programar solo para computadoras muy antiguas."
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) Organizar el código alrededor de 'objetos' que tienen atributos (características) y métodos (acciones). La POO es un paradigma de programación que nos permite modelar el mundo real en el código, facilitando la creación de programas complejos, modulares y fáciles de mantener.",
      "originalId": "q_constructor_4"
    },
    {
      "id": "q_constructor_1",
      "text": "¿Qué es un constructor en Java?",
      "options": [
        "Un método para destruir objetos",
        "Un método especial para inicializar objetos",
        "Una variable que almacena el nombre de un objeto",
        "Un tipo de bucle para la creación de objetos"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Correcto. Un constructor es un bloque de código similar a un método que se llama cuando se crea una instancia de un objeto (se inicializa).",
      "originalId": "pregunta_evitar_nullpointerexception"
    },
    {
      "id": "pregunta_compilador_ayuda",
      "text": "Cuando tu código tiene un error de sintaxis, como un punto y coma faltante, ¿qué herramienta te avisa de este problema antes de que intentes ejecutar el programa?",
      "options": [
        "El sistema operativo",
        "El editor de texto simple",
        "El compilador",
        "El navegador web"
      ],
      "correctAnswerIndex": 2,
      "explanation": "El compilador es el programa que traduce tu código fuente a un lenguaje que la máquina puede entender. Durante este proceso, revisa la sintaxis y te informa de errores como la falta de un punto y coma, ayudándote a corregirlos.",
      "originalId": "pregunta_error_sintaxis_comun"
    },
    {
      "id": "pregunta_acceder_elemento_array_java",
      "text": "Dado el siguiente array en Java: String[] nombresEnemigos = {\"Goblin\", \"Orco\", \"Esqueleto\"}; ¿Qué código imprimiría 'Orco' en la consola?",
      "options": [
        "System.out.println(nombresEnemigos[1]);",
        "System.out.println(nombresEnemigos[2]);",
        "System.out.println(nombresEnemigos[0]);",
        "System.out.println(nombresEnemigos[\"Orco\"]);"
      ],
      "correctAnswerIndex": 0,
      "explanation": "La respuesta correcta es a) System.out.println(nombresEnemigos[1]);. 'Goblin' está en el índice 0. 'Orco' está en el índice 1. 'Esqueleto' está en el índice 2. Para acceder a 'Orco', necesitamos el índice 1.",
      "originalId": "pregunta_idea_central_poo_java"
    },
    {
      "id": "pregunta_division_enteros_java",
      "text": "Considerando las variables monedas = 10 y precioObjeto = 3. ¿Qué valor obtendría la variable objetosComprados si ejecutas la siguiente línea de código en Java? int objetosComprados = monedas / precioObjeto;",
      "options": [
        "3.33",
        "3",
        "4",
        "10"
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) 3. Cuando divides dos números enteros (int) en Java usando el operador /, el resultado también es un entero y se trunca la parte decimal (se elimina, no se redondea). Entonces, 10 / 3 da como resultado 3.",
      "originalId": "pregunta_acceder_elemento_array_java"
    },
    {
      "id": "q_constructor_3",
      "text": "¿Cuál es la palabra clave utilizada para crear una instancia de un objeto e invocar su constructor?",
      "options": [
        "create",
        "instance",
        "new",
        "build"
      ],
      "correctAnswerIndex": 2,
      "explanation": "Correcto. La palabra clave `new` se usa para crear nuevas instancias de objetos, lo que implica llamar al constructor de la clase.",
      "originalId": "q_constructor_1"
    },
    {
      "id": "q_constructor_2",
      "text": "Si no defines ningún constructor en tu clase Java, ¿qué sucede?",
      "options": [
        "El código no compilará",
        "Java proporciona un constructor por defecto sin argumentos",
        "Se produce un error en tiempo de ejecución al crear un objeto",
        "Debes llamar a un método 'crearObjeto' especial"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Correcto. Si una clase no tiene constructores explícitamente definidos, el compilador de Java añade automáticamente un constructor público por defecto sin argumentos.",
      "originalId": "pregunta_clase_vs_objeto_java"
    },
    {
      "id": "pregunta_arraylist_vs_array_java",
      "text": "Si necesitas una lista en Java que pueda cambiar de tamaño (añadir o eliminar elementos dinámicamente) para, por ejemplo, gestionar el inventario de un jugador, ¿cuál de las siguientes opciones es la más adecuada?",
      "options": [
        "Un array (String[] inventario)",
        "Un int",
        "Un ArrayList<String>",
        "Un boolean"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) Un ArrayList<String>. Mientras que un array (String[]) tiene un tamaño fijo una vez creado, un ArrayList es una colección dinámica que puede crecer y encogerse. Es perfecto para situaciones como un inventario donde el número de objetos cambia constantemente. El <String> entre > indica que es un ArrayList que guarda elementos de tipo String.",
      "originalId": "pregunta_que_es_una_excepcion_java"
    },
    {
      "id": "pregunta_que_es_bucle_infinito",
      "text": "Un 'Bug de Bucle Infinito' es un problema donde un bucle en tu programa se repite sin fin, usualmente congelando la aplicación. ¿Cuál podría ser una causa común?",
      "options": [
        "Una variable que nunca se declara.",
        "Una condición de terminación del bucle que nunca se cumple.",
        "Usar un tipo de dato incorrecto para un contador.",
        "Escribir un comentario demasiado largo dentro del bucle."
      ],
      "correctAnswerIndex": 1,
      "explanation": "Los bucles (como `for` o `while`) necesitan una condición que eventualmente se vuelva falsa para detenerse. Si esta condición siempre es verdadera (por ejemplo, `while(true)` sin un `break` interno, o un contador que nunca alcanza el límite), el bucle se ejecutará indefinidamente.",
      "originalId": "pregunta_arraylist_vs_array_java"
    },
    {
      "id": "q_constructor_5",
      "text": "¿Puede un constructor en Java tener un tipo de retorno (por ejemplo, `void` o `int`)?",
      "options": [
        "Sí, siempre debe devolver un booleano",
        "Sí, puede devolver cualquier tipo de dato",
        "No, los constructores no tienen un tipo de retorno explícito",
        "Solo si es un constructor privado"
      ],
      "correctAnswerIndex": 2,
      "explanation": "Correcto. Los constructores no tienen un tipo de retorno explícito, ni siquiera `void`. Su 'retorno' implícito es la instancia del objeto que crean.",
      "originalId": "q_constructor_3"
    },
    {
      "id": "pregunta_compilador_ayuda",
      "text": "Cuando tu código tiene un error de sintaxis, como un punto y coma faltante, ¿qué herramienta te avisa de este problema antes de que intentes ejecutar el programa?",
      "options": [
        "El sistema operativo",
        "El editor de texto simple",
        "El compilador",
        "El navegador web"
      ],
      "correctAnswerIndex": 2,
      "explanation": "El compilador es el programa que traduce tu código fuente a un lenguaje que la máquina puede entender. Durante este proceso, revisa la sintaxis y te informa de errores como la falta de un punto y coma, ayudándote a corregirlos.",
      "originalId": "pregunta_error_sintaxis_comun"
    },
    {
      "id": "pregunta_que_hace_programa",
      "options": [
        "Solo mostrar texto en la pantalla",
        "Resolver problemas, procesar información y automatizar tareas",
        "Solo reproducir música",
        "Solo navegar por internet"
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) Resolver problemas, procesar información y automatizar tareas. Los programas son increíblemente versátiles: pueden calcular, organizar datos, controlar dispositivos, crear juegos, gestionar redes sociales y mucho más.",
      "originalId": "pregunta_que_hace_programa",
      "text": "¿Qué puede hacer un programa de ordenador?"
    },
    {
      "id": "pregunta_instruccion_hola_mundo_java",
      "text": "¿Cuál es la instrucción correcta en Java para mostrar el mensaje 'Hola Mundo' en la consola, y luego saltar a la siguiente línea?",
      "options": [
        "print(\"Hola Mundo\");",
        "System.in.println(\"Hola Mundo\");",
        "System.out.println(\"Hola Mundo\");",
        "console.log(\"Hola Mundo\");"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) System.out.println(\"Hola Mundo\");. Esta es la sintaxis estándar en Java para imprimir texto en la consola de salida y añadir un salto de línea al final, lo que es muy útil para depurar o mostrar información al usuario. Las otras opciones son incorrectas para Java: print no es el comando completo, System.in es para la entrada, y console.log es de otros lenguajes.",
      "originalId": "pregunta_tipo_dato_edad_java"
    },
    {
      "id": "q_constructor_6",
      "text": "¿Cuál es el propósito principal de un constructor parametrizado?",
      "options": [
        "Crear objetos siempre con los mismos valores iniciales",
        "Inicializar un nuevo objeto con valores específicos pasados como argumentos",
        "Evitar la creación de objetos",
        "Solo se usa para herencia"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Correcto. Un constructor parametrizado permite pasar valores al momento de la creación del objeto para inicializar sus atributos con esos valores específicos, ofreciendo flexibilidad.",
      "originalId": "pregunta_compilador_ayuda"
    },
    {
      "id": "pregunta_acceder_elemento_array_java",
      "text": "Dado el siguiente array en Java: String[] nombresEnemigos = {\"Goblin\", \"Orco\", \"Esqueleto\"}; ¿Qué código imprimiría 'Orco' en la consola?",
      "options": [
        "System.out.println(nombresEnemigos[1]);",
        "System.out.println(nombresEnemigos[2]);",
        "System.out.println(nombresEnemigos[0]);",
        "System.out.println(nombresEnemigos[\"Orco\"]);"
      ],
      "correctAnswerIndex": 0,
      "explanation": "La respuesta correcta es a) System.out.println(nombresEnemigos[1]);. 'Goblin' está en el índice 0. 'Orco' está en el índice 1. 'Esqueleto' está en el índice 2. Para acceder a 'Orco', necesitamos el índice 1.",
      "originalId": "pregunta_idea_central_poo_java"
    },
    {
      "id": "pregunta_condicion_if_else_java",
      "text": "Considera el siguiente código Java: int nivel = 7; if (nivel >= 10) { System.out.println(\"Eres un héroe legendario.\"); } else { System.out.println(\"Sigue entrenando.\"); } ¿Qué mensaje se imprimirá en la consola cuando se ejecute este código?",
      "options": [
        "Eres un héroe legendario.",
        "Sigue entrenando.",
        "Ambos mensajes.",
        "Ningún mensaje."
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) 'Sigue entrenando.'. La variable nivel tiene un valor de 7. La condición nivel >= 10 (7 es mayor o igual que 10) es false (falsa). Por lo tanto, el código dentro del bloque if no se ejecuta, y en su lugar se ejecuta el código dentro del bloque else.",
      "originalId": "pregunta_causa_nullpointerexception"
    },
    {
      "id": "q_constructor_2",
      "text": "Si no defines ningún constructor en tu clase Java, ¿qué sucede?",
      "options": [
        "El código no compilará",
        "Java proporciona un constructor por defecto sin argumentos",
        "Se produce un error en tiempo de ejecución al crear un objeto",
        "Debes llamar a un método 'crearObjeto' especial"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Correcto. Si una clase no tiene constructores explícitamente definidos, el compilador de Java añade automáticamente un constructor público por defecto sin argumentos.",
      "originalId": "pregunta_clase_vs_objeto_java"
    },
    {
      "id": "pregunta_razon_usar_metodo_java",
      "text": "¿Cuál de las siguientes es una buena razón para usar un 'método' en programación?",
      "options": [
        "Para hacer el código más difícil de entender.",
        "Para repetir la misma instrucción muchas veces seguidas sin control.",
        "Para organizar el código en tareas específicas y reutilizarlo, evitando la repetición.",
        "Para hacer que el programa se ejecute más lento."
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) Para organizar el código en tareas específicas y reutilizarlo, evitando la repetición. Los métodos son una herramienta fundamental para mantener el código limpio, modular y fácil de mantener. Al encapsular una tarea en un método, puedes llamarlo desde cualquier lugar del programa sin tener que reescribir el mismo conjunto de instrucciones.",
      "originalId": "pregunta_condicion_if_else_java"
    },
    {
      "id": "q_constructor_1",
      "text": "¿Qué es un constructor en Java?",
      "options": [
        "Un método para destruir objetos",
        "Un método especial para inicializar objetos",
        "Una variable que almacena el nombre de un objeto",
        "Un tipo de bucle para la creación de objetos"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Correcto. Un constructor es un bloque de código similar a un método que se llama cuando se crea una instancia de un objeto (se inicializa).",
      "originalId": "pregunta_evitar_nullpointerexception"
    },
    {
      "id": "pregunta_condicion_if_else_java",
      "text": "Considera el siguiente código Java: int nivel = 7; if (nivel >= 10) { System.out.println(\"Eres un héroe legendario.\"); } else { System.out.println(\"Sigue entrenando.\"); } ¿Qué mensaje se imprimirá en la consola cuando se ejecute este código?",
      "options": [
        "Eres un héroe legendario.",
        "Sigue entrenando.",
        "Ambos mensajes.",
        "Ningún mensaje."
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) 'Sigue entrenando.'. La variable nivel tiene un valor de 7. La condición nivel >= 10 (7 es mayor o igual que 10) es false (falsa). Por lo tanto, el código dentro del bloque if no se ejecuta, y en su lugar se ejecuta el código dentro del bloque else.",
      "originalId": "pregunta_causa_nullpointerexception"
    },
    {
      "id": "pregunta_multiplataforma_java",
      "text": "Una característica clave de Java es que sus programas pueden ejecutarse en diferentes sistemas operativos (como Windows, macOS o Linux) sin cambios importantes. ¿Cómo se describe esta característica?",
      "options": [
        "Monoplataforma",
        "Multiplataforma",
        "Hiperplataforma",
        "Uniplataforma"
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) Multiplataforma. El prefijo 'multi-' significa 'muchos', y 'plataforma' se refiere al sistema donde el programa se ejecuta. Por lo tanto, 'multiplataforma' significa que funciona en muchas plataformas.",
      "originalId": "pregunta_que_es_bucle_infinito"
    },
    {
      "id": "pregunta_estructura_principal_java_clase_main",
      "text": "En Java, ¿dentro de qué estructura principal se organiza casi todo el código y dónde se encuentra el método main (el punto de inicio de un programa)?",
      "options": [
        "Un archivo de texto.",
        "Una carpeta.",
        "Una clase.",
        "Una función."
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) Una clase. En Java, la programación es 'orientada a objetos', y las clases son los bloques de construcción fundamentales. Todo el código que escribimos, incluyendo el método main (que es el primer lugar donde el programa comienza a ejecutarse), debe estar encapsulado dentro de una clase.",
      "originalId": "pregunta_razon_usar_metodo_java"
    },
    {
      "id": "pregunta_multiplataforma_java",
      "text": "Una característica clave de Java es que sus programas pueden ejecutarse en diferentes sistemas operativos (como Windows, macOS o Linux) sin cambios importantes. ¿Cómo se describe esta característica?",
      "options": [
        "Monoplataforma",
        "Multiplataforma",
        "Hiperplataforma",
        "Uniplataforma"
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) Multiplataforma. El prefijo 'multi-' significa 'muchos', y 'plataforma' se refiere al sistema donde el programa se ejecuta. Por lo tanto, 'multiplataforma' significa que funciona en muchas plataformas.",
      "originalId": "pregunta_que_es_bucle_infinito"
    },
    {
      "id": "pregunta_tipo_dato_edad_java",
      "text": "Si necesitas guardar la edad de una persona (por ejemplo, 25) en una variable en Java, ¿cuál es el tipo de dato más adecuado para esa variable?",
      "options": [
        "double",
        "boolean",
        "int",
        "String"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) int. El tipo int (de 'integer') se utiliza para números enteros, y la edad de una persona es típicamente un número entero sin decimales. double sería para números con decimales, boolean para verdadero/falso, y String para texto.",
      "originalId": "q_constructor_6"
    },
    {
      "id": "pregunta_que_es_un_programa",
      "text": "¿Qué es un 'programa' en el contexto de la programación?",
      "options": [
        "Un dibujo de un ordenador.",
        "Un conjunto de instrucciones para que el ordenador realice una tarea.",
        "Un tipo de música.",
        "Un juego de mesa."
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) Un conjunto de instrucciones para que el ordenador realice una tarea. Un programa es precisamente eso: una serie de pasos detallados que le decimos a una máquina para que la ejecute y logre un objetivo, como mostrar un mensaje en pantalla o procesar información.",
      "originalId": "pregunta_expresion_calculo_vidas_java"
    },
    {
      "id": "pregunta_nombre_variable_valido_java",
      "text": "¿Cuál de los siguientes nombres de variable es válido en Java?",
      "options": [
        "1puntuacion",
        "nombre jugador",
        "mi_nombre",
        "public"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) mi_nombre. a) 1puntuacion es inválido porque un nombre de variable no puede empezar con un número. b) nombre jugador es inválido porque no puede contener espacios. d) public es inválido porque es una palabra reservada del lenguaje Java. mi_nombre sigue las reglas: no empieza con número, no tiene espacios y no es una palabra reservada.",
      "originalId": "pregunta_division_enteros_java"
    },
    {
      "id": "pregunta_por_que_java",
      "text": "¿Por qué Java es un buen lenguaje para aprender programación?",
      "correctAnswerIndex": 2,
      "originalId": "pregunta_por_que_java",
      "options": [
        "Porque es muy difícil",
        "Porque solo funciona en un ordenador",
        "Porque es fácil de leer y funciona en muchos tipos de ordenadores",
        "Porque es muy antiguo"
      ],
      "explanation": "La respuesta correcta es c) Porque es fácil de leer y funciona en muchos tipos de ordenadores. Java fue diseñado para ser claro y comprensible, y tiene la ventaja de que un programa escrito en Java puede ejecutarse en Windows, Mac, Linux y otros sistemas sin cambios."
    },
    {
      "id": "pregunta_que_es_programar",
      "correctAnswerIndex": 1,
      "originalId": "pregunta_que_es_programar",
      "options": [
        "Encender y apagar el ordenador",
        "Darle instrucciones paso a paso para que haga algo específico",
        "Cambiar el color de la pantalla",
        "Conectarlo a internet"
      ],
      "text": "¿Qué significa \"programar\" un ordenador?",
      "explanation": "La respuesta correcta es b) Darle instrucciones paso a paso para que haga algo específico. Programar es como enseñarle al ordenador cómo resolver un problema o realizar una tarea, escribiendo las instrucciones en un lenguaje que él pueda entender."
    },
    {
      "id": "pregunta_que_hace_programa",
      "options": [
        "Solo mostrar texto en la pantalla",
        "Resolver problemas, procesar información y automatizar tareas",
        "Solo reproducir música",
        "Solo navegar por internet"
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) Resolver problemas, procesar información y automatizar tareas. Los programas son increíblemente versátiles: pueden calcular, organizar datos, controlar dispositivos, crear juegos, gestionar redes sociales y mucho más.",
      "originalId": "pregunta_que_hace_programa",
      "text": "¿Qué puede hacer un programa de ordenador?"
    },
    {
      "id": "pregunta_causa_nullpointerexception",
      "text": "La temida 'NullPointerException' ocurre en Java cuando intentas usar un objeto que en realidad no apunta a ninguna instancia en memoria (es decir, su valor es 'null'). ¿Cuál de las siguientes acciones podría causar una NullPointerException?",
      "options": [
        "Sumar dos números enteros.",
        "Llamar a un método de un objeto que es 'null'.",
        "Imprimir un mensaje en la consola.",
        "Declarar una variable sin inicializarla (si no se usa después)."
      ],
      "correctAnswerIndex": 1,
      "explanation": "Si tienes una variable de objeto que es 'null' e intentas acceder a uno de sus métodos o atributos (ej: `miObjeto.hacerAlgo()` cuando `miObjeto` es `null`), el programa lanzará una NullPointerException porque no hay ningún objeto real sobre el cual operar.",
      "originalId": "pregunta_identificar_bucle_infinito"
    },
    {
      "id": "pregunta_que_es_una_variable",
      "text": "En programación, ¿qué es una 'variable'?",
      "options": [
        "Un error en el código.",
        "Una caja de almacenamiento en la memoria del ordenador que guarda un valor que puede cambiar.",
        "Un programa completo.",
        "Un tipo de teclado."
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) Una caja de almacenamiento en la memoria del ordenador que guarda un valor que puede cambiar. Las variables son esenciales en programación porque nos permiten almacenar y manipular información mientras el programa se ejecuta, como la puntuación de un juego o el nombre de un usuario.",
      "originalId": "q_constructor_5"
    },
    {
      "id": "q_constructor_3",
      "text": "¿Cuál es la palabra clave utilizada para crear una instancia de un objeto e invocar su constructor?",
      "options": [
        "create",
        "instance",
        "new",
        "build"
      ],
      "correctAnswerIndex": 2,
      "explanation": "Correcto. La palabra clave `new` se usa para crear nuevas instancias de objetos, lo que implica llamar al constructor de la clase.",
      "originalId": "q_constructor_1"
    },
    {
      "id": "pregunta_llamar_metodo_java",
      "text": "Dado el siguiente método en Java: public void mostrarMensaje() { System.out.println(\"¡Bienvenido a CodeQuest!\"); } ¿Cómo llamarías a este método para que imprima el mensaje?",
      "options": [
        "System.out.println(mostrarMensaje);",
        "mostrarMensaje();",
        "call mostrarMensaje();",
        "run mostrarMensaje;"
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) mostrarMensaje();. Para llamar a un método sin parámetros, simplemente escribes su nombre seguido de paréntesis vacíos y un punto y coma. Las otras opciones usan sintaxis incorrecta o comandos que no existen en Java para llamar a un método.",
      "originalId": "pregunta_bucle_for_java"
    },
    {
      "id": "pregunta_error_sintaxis_comun",
      "text": "En muchos lenguajes de programación como Java o C#, ¿cuál es un error de sintaxis muy común que a menudo impide que el código compile, relacionado con la finalización de una instrucción?",
      "options": [
        "Usar demasiados espacios",
        "Olvidar un punto y coma al final de una instrucción",
        "Escribir comentarios muy largos",
        "Nombrar una variable con mayúsculas"
      ],
      "correctAnswerIndex": 1,
      "explanation": "El punto y coma (;) es crucial en lenguajes como Java, C# o JavaScript para indicar el final de una instrucción. Olvidarlo es una de las causas más frecuentes de errores de compilación, ¡un verdadero 'Bug del Punto y Coma'!",
      "originalId": "q_constructor_2"
    },
    {
      "id": "q_constructor_5",
      "text": "¿Puede un constructor en Java tener un tipo de retorno (por ejemplo, `void` o `int`)?",
      "options": [
        "Sí, siempre debe devolver un booleano",
        "Sí, puede devolver cualquier tipo de dato",
        "No, los constructores no tienen un tipo de retorno explícito",
        "Solo si es un constructor privado"
      ],
      "correctAnswerIndex": 2,
      "explanation": "Correcto. Los constructores no tienen un tipo de retorno explícito, ni siquiera `void`. Su 'retorno' implícito es la instancia del objeto que crean.",
      "originalId": "q_constructor_3"
    },
    {
      "id": "pregunta_idea_central_poo_java",
      "text": "¿Cuál es la idea central de la Programación Orientada a Objetos (POO) en Java?",
      "options": [
        "Escribir todo el código en una sola línea.",
        "Organizar el código alrededor de 'objetos' que tienen atributos (características) y métodos (acciones).",
        "Usar solo números en el programa.",
        "Programar solo para computadoras muy antiguas."
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) Organizar el código alrededor de 'objetos' que tienen atributos (características) y métodos (acciones). La POO es un paradigma de programación que nos permite modelar el mundo real en el código, facilitando la creación de programas complejos, modulares y fáciles de mantener.",
      "originalId": "q_constructor_4"
    },
    {
      "id": "q_constructor_6",
      "text": "¿Cuál es el propósito principal de un constructor parametrizado?",
      "options": [
        "Crear objetos siempre con los mismos valores iniciales",
        "Inicializar un nuevo objeto con valores específicos pasados como argumentos",
        "Evitar la creación de objetos",
        "Solo se usa para herencia"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Correcto. Un constructor parametrizado permite pasar valores al momento de la creación del objeto para inicializar sus atributos con esos valores específicos, ofreciendo flexibilidad.",
      "originalId": "pregunta_compilador_ayuda"
    },
    {
      "id": "pregunta_que_es_una_variable",
      "text": "En programación, ¿qué es una 'variable'?",
      "options": [
        "Un error en el código.",
        "Una caja de almacenamiento en la memoria del ordenador que guarda un valor que puede cambiar.",
        "Un programa completo.",
        "Un tipo de teclado."
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) Una caja de almacenamiento en la memoria del ordenador que guarda un valor que puede cambiar. Las variables son esenciales en programación porque nos permiten almacenar y manipular información mientras el programa se ejecuta, como la puntuación de un juego o el nombre de un usuario.",
      "originalId": "q_constructor_5"
    },
    {
      "id": "pregunta_tipo_dato_edad_java",
      "text": "Si necesitas guardar la edad de una persona (por ejemplo, 25) en una variable en Java, ¿cuál es el tipo de dato más adecuado para esa variable?",
      "options": [
        "double",
        "boolean",
        "int",
        "String"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) int. El tipo int (de 'integer') se utiliza para números enteros, y la edad de una persona es típicamente un número entero sin decimales. double sería para números con decimales, boolean para verdadero/falso, y String para texto.",
      "originalId": "q_constructor_6"
    },
    {
      "id": "pregunta_error_sintaxis_comun",
      "text": "En muchos lenguajes de programación como Java o C#, ¿cuál es un error de sintaxis muy común que a menudo impide que el código compile, relacionado con la finalización de una instrucción?",
      "options": [
        "Usar demasiados espacios",
        "Olvidar un punto y coma al final de una instrucción",
        "Escribir comentarios muy largos",
        "Nombrar una variable con mayúsculas"
      ],
      "correctAnswerIndex": 1,
      "explanation": "El punto y coma (;) es crucial en lenguajes como Java, C# o JavaScript para indicar el final de una instrucción. Olvidarlo es una de las causas más frecuentes de errores de compilación, ¡un verdadero 'Bug del Punto y Coma'!",
      "originalId": "q_constructor_2"
    },
    {
      "id": "pregunta_causa_nullpointerexception",
      "text": "La temida 'NullPointerException' ocurre en Java cuando intentas usar un objeto que en realidad no apunta a ninguna instancia en memoria (es decir, su valor es 'null'). ¿Cuál de las siguientes acciones podría causar una NullPointerException?",
      "options": [
        "Sumar dos números enteros.",
        "Llamar a un método de un objeto que es 'null'.",
        "Imprimir un mensaje en la consola.",
        "Declarar una variable sin inicializarla (si no se usa después)."
      ],
      "correctAnswerIndex": 1,
      "explanation": "Si tienes una variable de objeto que es 'null' e intentas acceder a uno de sus métodos o atributos (ej: `miObjeto.hacerAlgo()` cuando `miObjeto` es `null`), el programa lanzará una NullPointerException porque no hay ningún objeto real sobre el cual operar.",
      "originalId": "pregunta_identificar_bucle_infinito"
    },
    {
      "id": "pregunta_arraylist_vs_array_java",
      "text": "Si necesitas una lista en Java que pueda cambiar de tamaño (añadir o eliminar elementos dinámicamente) para, por ejemplo, gestionar el inventario de un jugador, ¿cuál de las siguientes opciones es la más adecuada?",
      "options": [
        "Un array (String[] inventario)",
        "Un int",
        "Un ArrayList<String>",
        "Un boolean"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) Un ArrayList<String>. Mientras que un array (String[]) tiene un tamaño fijo una vez creado, un ArrayList es una colección dinámica que puede crecer y encogerse. Es perfecto para situaciones como un inventario donde el número de objetos cambia constantemente. El <String> entre > indica que es un ArrayList que guarda elementos de tipo String.",
      "originalId": "pregunta_que_es_una_excepcion_java"
    }
  ],
  "timestamp": "2025-06-01T21:25:01.147Z"
}