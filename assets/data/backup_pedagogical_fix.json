{
  "missions": [
    {
      "id": "mision_1_1",
      "title": "Los Primeros Pasos en Algorithmia",
      "description": "Descubre qu√© es la programaci√≥n y da tus primeros pasos en el mundo del c√≥digo.",
      "zone": "Bosque Susurrante",
      "levelRequired": 1,
      "order": 1,
      "theory": "üåü **Bienvenido a Algorithmia, joven Guardi√°n del C√≥digo** üåü\n\nEn el m√≠stico reino de Algorithmia, donde la tecnolog√≠a y la magia se entrelazan, existe un arte ancestral llamado 'Programaci√≥n'. Imagina que eres un mago que puede hablar con los ordenadores y darles √≥rdenes para que hagan cosas incre√≠bles.\n\nUn **programa** es como una receta de cocina muy detallada: una lista de pasos que le decimos al ordenador para que realice una tarea. Por ejemplo, podr√≠amos crear un programa que calcule cu√°nto dinero necesitas ahorrar cada mes para comprar algo especial.\n\n**Java** es uno de los lenguajes de programaci√≥n m√°s populares del mundo. Lo especial de Java es que es como un idioma universal: un programa escrito en Java puede funcionar en casi cualquier ordenador, ya sea Windows, Mac o Linux. ¬°Es como tener un hechizo que funciona en cualquier reino!",
      "objectives": [
        {
          "type": "theory",
          "description": "Aprende qu√© es la programaci√≥n y Java.",
          "target": 1
        },
        {
          "type": "questions",
          "description": "Responde correctamente 3 preguntas b√°sicas.",
          "target": 3,
          "questionIds": [
            "pregunta_que_es_un_programa",
            "pregunta_multiplataforma_java",
            "pregunta_estructura_principal_java_clase_main"
          ]
        }
      ],
      "status": "bloqueada",
      "isRepeatable": false,
      "requirements": {},
      "rewards": {
        "experience": 40,
        "coins": 25,
        "items": [],
        "unlocks": [
          "mision_1_2"
        ]
      },
      "examples": [
        "// Ejemplo b√°sico relacionado con la teor√≠a",
        "System.out.println(\"Practicando: \" + concepto);"
      ],
      "storyPages": [
        {
          "pageNumber": 1,
          "title": "Los Primeros Pasos en Algorithmia",
          "text": "Contin√∫as tu aventura en Bosque Susurrante. Nuevos desaf√≠os te esperan para dominar los primeros pasos en algorithmia.",
          "imageUrl": ""
        }
      ]
    },
    {
      "id": "mision_1_2",
      "title": "Los Secretos de las Variables",
      "description": "Aprende a crear y usar variables para almacenar informaci√≥n en tus programas.",
      "zone": "Bosque Susurrante",
      "levelRequired": 1,
      "order": 2,
      "theory": "üè∫ **Los Recipientes M√°gicos (Variables)** üè∫\n\nEn Algorithmia, los magos programadores descubrieron que necesitaban cajas especiales para guardar informaci√≥n. Estas cajas m√°gicas se llaman 'variables' y pueden contener diferentes tipos de tesoros.\n\nImagina que tienes diferentes tipos de cajas:\n‚Ä¢ Una caja para **n√∫meros enteros** (como tu edad: 15, 20, 100) - se llama `int`\n‚Ä¢ Una caja para **palabras y frases** (como tu nombre: \"Mar√≠a\", \"Hola mundo\") - se llama `String`\n‚Ä¢ Una caja para **n√∫meros con decimales** (como tu altura: 1.65, 3.14) - se llama `double`\n‚Ä¢ Una caja para **respuestas de s√≠ o no** (como: verdadero, falso) - se llama `boolean`\n\nEn Java, antes de usar una caja (variable), debemos decirle qu√© tipo de tesoro va a guardar. Es como poner una etiqueta en la caja que dice \"Solo n√∫meros\" o \"Solo palabras\".\n\n**Ejemplo:**\n```java\nint edad = 16;\nString nombre = \"Ana\";\n```",
      "objectives": [
        {
          "type": "theory",
          "description": "Aprende sobre variables y tipos de datos.",
          "target": 1
        },
        {
          "type": "questions",
          "description": "Responde correctamente 3 preguntas sobre variables.",
          "target": 3,
          "questionIds": [
            "pregunta_que_es_una_variable",
            "pregunta_declaracion_variable_entera_java",
            "pregunta_nombre_variable_valido_java"
          ]
        }
      ],
      "status": "bloqueada",
      "isRepeatable": false,
      "requirements": {
        "completedMissionId": "mision_1_1"
      },
      "rewards": {
        "experience": 50,
        "coins": 30,
        "items": [],
        "unlocks": [
          "mision_1_3"
        ]
      },
      "examples": [
        "// Ejemplo b√°sico relacionado con la teor√≠a",
        "System.out.println(\"Practicando: \" + concepto);"
      ],
      "storyPages": [
        {
          "pageNumber": 1,
          "title": "Los Secretos de las Variables",
          "text": "Contin√∫as tu aventura en Bosque Susurrante. Nuevos desaf√≠os te esperan para dominar los secretos de las variables.",
          "imageUrl": ""
        }
      ]
    },
    {
      "id": "mision_1_3",
      "title": "El Arte de las Instrucciones",
      "description": "Domina las instrucciones b√°sicas para hacer que tu programa se comunique con el mundo.",
      "zone": "Bosque Susurrante",
      "levelRequired": 1,
      "order": 3,
      "theory": "üìú **El Arte de las Instrucciones B√°sicas** üìú\n\nEn el coraz√≥n de todo programa Java reside el m√©todo `main`, el punto de entrada donde comienza la ejecuci√≥n del hechizo. Como un portal m√°gico, este m√©todo especial es donde el sistema invoca tu programa y donde todas las aventuras de c√≥digo comienzan.\n\nLas **instrucciones** en Java son como conjuros individuales que se ejecutan uno tras otro. `System.out.println()` es uno de los hechizos m√°s fundamentales, permitiendo que tu programa se comunique con el mundo exterior mostrando mensajes en la consola.\n\n**Reglas importantes:**\n‚Ä¢ Cada instrucci√≥n debe terminar con un punto y coma `;`\n‚Ä¢ Las palabras van entre comillas dobles `\"Hola\"`\n‚Ä¢ Los n√∫meros van sin comillas: `42`\n\n**Ejemplos:**\n```java\nSystem.out.println(\"¬°Hola Mundo!\");\nSystem.out.println(\"Mi edad es: \" + 16);\n```",
      "objectives": [
        {
          "type": "theory",
          "description": "Aprende sobre instrucciones b√°sicas.",
          "target": 1
        },
        {
          "type": "questions",
          "description": "Responde correctamente 3 preguntas sobre instrucciones.",
          "target": 3,
          "questionIds": [
            "pregunta_instruccion_hola_mundo_java",
            "pregunta_expresion_calculo_vidas_java",
            "pregunta_tipo_dato_edad_java"
          ]
        }
      ],
      "status": "bloqueada",
      "isRepeatable": false,
      "requirements": {
        "completedMissionId": "mision_1_2"
      },
      "rewards": {
        "experience": 60,
        "coins": 35,
        "items": [],
        "unlocks": [
          "mision_batalla_1_1"
        ]
      },
      "examples": [
        "// Ejemplo b√°sico relacionado con la teor√≠a",
        "System.out.println(\"Practicando: \" + concepto);"
      ],
      "storyPages": [
        {
          "pageNumber": 1,
          "title": "El Arte de las Instrucciones",
          "text": "Contin√∫as tu aventura en Bosque Susurrante. Nuevos desaf√≠os te esperan para dominar el arte de las instrucciones.",
          "imageUrl": ""
        }
      ]
    },
    {
      "id": "mision_2_1",
      "title": "El Valle de las Decisiones",
      "description": "Aprende a tomar decisiones en tus programas usando estructuras condicionales.",
      "zone": "Valle de las Decisiones",
      "levelRequired": 2,
      "order": 5,
      "theory": "üö™ **Las Puertas M√°gicas de la Decisi√≥n** üö™\n\nEn el Valle de las Decisiones de Algorithmia, los caminos se bifurcan constantemente, y solo los Guardianes que dominan el arte de las decisiones pueden navegar exitosamente. Las estructuras condicionales son como encrucijadas m√°gicas que permiten a tu programa elegir diferentes caminos bas√°ndose en condiciones espec√≠ficas.\n\nLa estructura `if` es la m√°s fundamental: eval√∫a una condici√≥n y ejecuta un bloque de c√≥digo solo si esa condici√≥n es verdadera. Es como un guardi√°n que solo permite el paso si se cumple cierta regla.\n\n**S√≠mbolos de comparaci√≥n:**\n‚Ä¢ `>` mayor que\n‚Ä¢ `<` menor que\n‚Ä¢ `>=` mayor o igual que\n‚Ä¢ `<=` menor o igual que\n‚Ä¢ `==` igual que\n‚Ä¢ `!=` diferente que\n\n**Ejemplo:**\n```java\nint edad = 16;\nif (edad >= 18) {\n    System.out.println(\"Eres mayor de edad\");\n} else {\n    System.out.println(\"Eres menor de edad\");\n}\n```",
      "objectives": [
        {
          "type": "theory",
          "description": "Aprende sobre estructuras condicionales.",
          "target": 1
        },
        {
          "type": "questions",
          "description": "Responde correctamente 3 preguntas sobre condicionales.",
          "target": 3,
          "questionIds": [
            "pregunta_estructura_if_java",
            "pregunta_condicion_if_else_java",
            "pregunta_division_enteros_java"
          ]
        }
      ],
      "status": "bloqueada",
      "isRepeatable": false,
      "requirements": {
        "completedMissionId": "mision_batalla_1_1"
      },
      "rewards": {
        "experience": 80,
        "coins": 45,
        "items": [],
        "unlocks": [
          "mision_2_2"
        ]
      },
      "examples": [
        "// Ejemplo b√°sico relacionado con la teor√≠a",
        "System.out.println(\"Practicando: \" + concepto);"
      ],
      "storyPages": [
        {
          "pageNumber": 1,
          "title": "El Valle de las Decisiones",
          "text": "Contin√∫as tu aventura en Valle de las Decisiones. Nuevos desaf√≠os te esperan para dominar el valle de las decisiones.",
          "imageUrl": ""
        }
      ]
    },
    {
      "id": "mision_2_2",
      "title": "Los Ciclos del Tiempo",
      "description": "Domina los bucles y aprende a repetir acciones de manera eficiente en tus programas.",
      "zone": "Valle de las Decisiones",
      "levelRequired": 2,
      "order": 6,
      "theory": "üåÄ **Los C√≠rculos M√°gicos de Repetici√≥n** üåÄ\n\nEn las profundidades del Valle de las Decisiones, descubres los C√≠rculos del Tiempo, donde las acciones pueden repetirse una y otra vez hasta que se cumpla una condici√≥n espec√≠fica. Los bucles son como rituales m√°gicos que permiten ejecutar el mismo conjunto de instrucciones m√∫ltiples veces sin tener que escribirlas repetidamente.\n\n**Tipos de bucles:**\n\n**1. Bucle for** (cuando sabes exactamente cu√°ntas veces repetir):\n```java\nfor (int i = 1; i <= 5; i++) {\n    System.out.println(\"N√∫mero: \" + i);\n}\n```\n\n**2. Bucle while** (cuando repites mientras una condici√≥n sea verdadera):\n```java\nint contador = 0;\nwhile (contador < 3) {\n    System.out.println(\"Contador: \" + contador);\n    contador++;\n}\n```\n\n**¬°Cuidado con los bucles infinitos!** Siempre aseg√∫rate de que la condici√≥n eventualmente se vuelva falsa.",
      "objectives": [
        {
          "type": "theory",
          "description": "Aprende sobre bucles y repetici√≥n.",
          "target": 1
        },
        {
          "type": "questions",
          "description": "Responde correctamente 3 preguntas sobre bucles.",
          "target": 3,
          "questionIds": [
            "pregunta_bucle_for_java",
            "pregunta_identificar_bucle_infinito",
            "pregunta_funcion_array_java"
          ]
        }
      ],
      "status": "bloqueada",
      "isRepeatable": false,
      "requirements": {
        "completedMissionId": "mision_2_1"
      },
      "rewards": {
        "experience": 90,
        "coins": 50,
        "items": [],
        "unlocks": [
          "mision_2_3"
        ]
      },
      "examples": [
        "// Ejemplo b√°sico relacionado con la teor√≠a",
        "System.out.println(\"Practicando: \" + concepto);"
      ],
      "storyPages": [
        {
          "pageNumber": 1,
          "title": "Los Ciclos del Tiempo",
          "text": "Contin√∫as tu aventura en Valle de las Decisiones. Nuevos desaf√≠os te esperan para dominar los ciclos del tiempo.",
          "imageUrl": ""
        }
      ]
    },
    {
      "id": "mision_2_3",
      "title": "El Santuario de los M√©todos",
      "description": "Aprende a organizar tu c√≥digo creando m√©todos reutilizables y modulares.",
      "zone": "Valle de las Decisiones",
      "levelRequired": 2,
      "order": 7,
      "theory": "üìö **El Santuario de los M√©todos** üìö\n\nEn lo alto del Valle de las Decisiones se alza el Santuario de los M√©todos, un templo donde los Guardianes aprenden a dividir sus hechizos en componentes m√°s peque√±os y manejables. Los m√©todos son como conjuros especializados que pueden ser invocados cuando se necesiten, permitiendo organizar el c√≥digo de manera clara y reutilizable.\n\nUn **m√©todo** en Java es un bloque de c√≥digo que realiza una tarea espec√≠fica y puede ser llamado desde otras partes del programa.\n\n**Estructura b√°sica:**\n```java\npublic static void nombreMetodo() {\n    // c√≥digo del m√©todo\n}\n```\n\n**M√©todo con par√°metros:**\n```java\npublic static void saludar(String nombre) {\n    System.out.println(\"¬°Hola \" + nombre + \"!\");\n}\n```\n\n**M√©todo que devuelve un valor:**\n```java\npublic static int sumar(int a, int b) {\n    return a + b;\n}\n```\n\n**Llamar a un m√©todo:**\n```java\nsaludar(\"Ana\");\nint resultado = sumar(5, 3);\n```",
      "objectives": [
        {
          "type": "theory",
          "description": "Aprende sobre m√©todos y modularizaci√≥n.",
          "target": 1
        },
        {
          "type": "questions",
          "description": "Responde correctamente 3 preguntas sobre m√©todos.",
          "target": 3,
          "questionIds": [
            "pregunta_razon_usar_metodo_java",
            "pregunta_llamar_metodo_java",
            "pregunta_que_es_una_excepcion_java"
          ]
        }
      ],
      "status": "bloqueada",
      "isRepeatable": false,
      "requirements": {
        "completedMissionId": "mision_2_2"
      },
      "rewards": {
        "experience": 100,
        "coins": 55,
        "items": [],
        "unlocks": [
          "mision_batalla_2_1"
        ]
      },
      "examples": [
        "// Ejemplo b√°sico relacionado con la teor√≠a",
        "System.out.println(\"Practicando: \" + concepto);"
      ],
      "storyPages": [
        {
          "pageNumber": 1,
          "title": "El Santuario de los M√©todos",
          "text": "Contin√∫as tu aventura en Valle de las Decisiones. Nuevos desaf√≠os te esperan para dominar el santuario de los m√©todos.",
          "imageUrl": ""
        }
      ]
    },
    {
      "id": "mision_batalla_1_1",
      "title": "Batalla: El Bug del Punto y Coma",
      "description": "Enfrenta tu primera batalla contra las fuerzas corruptoras. Derrota al Bug del Punto y Coma con tus conocimientos b√°sicos.",
      "zone": "Campo de Batalla",
      "levelRequired": 1,
      "order": 4,
      "objectives": [
        {
          "type": "batalla",
          "description": "Derrota al Bug del Punto y Coma respondiendo preguntas b√°sicas.",
          "target": 1,
          "battleConfig": {
            "enemyId": "enemigo_bug_del_punto_y_coma",
            "questionIds": [
              "pregunta_que_es_un_programa",
              "pregunta_que_es_una_variable",
              "pregunta_instruccion_hola_mundo_java"
            ],
            "playerHealthMultiplier": 1,
            "enemyAttackMultiplier": 0.7,
            "environment": "campo_bug"
          }
        }
      ],
      "status": "bloqueada",
      "isRepeatable": true,
      "requirements": {
        "completedMissionId": "mision_1_3"
      },
      "rewards": {
        "experience": 70,
        "coins": 40,
        "items": [],
        "unlocks": [
          "mision_2_1"
        ]
      },
      "examples": [],
      "storyPages": [
        {
          "pageNumber": 1,
          "title": "Batalla: El Bug del Punto y Coma",
          "text": "Contin√∫as tu aventura en Campo de Batalla. Nuevos desaf√≠os te esperan para dominar batalla: el bug del punto y coma.",
          "imageUrl": ""
        }
      ]
    },
    {
      "id": "mision_batalla_2_1",
      "title": "Batalla: El NullPointerException",
      "description": "Enfrenta al temido NullPointerException con tus conocimientos de programaci√≥n b√°sica.",
      "zone": "Campo de Batalla",
      "levelRequired": 2,
      "order": 8,
      "objectives": [
        {
          "type": "batalla",
          "description": "Derrota al NullPointerException con tus conocimientos.",
          "target": 1,
          "battleConfig": {
            "enemyId": "enemigo_nullpointerexception",
            "questionIds": [
              "pregunta_evitar_nullpointerexception",
              "pregunta_estructura_if_java",
              "pregunta_bucle_for_java",
              "pregunta_razon_usar_metodo_java"
            ],
            "playerHealthMultiplier": 1,
            "enemyAttackMultiplier": 1,
            "environment": "campo_bug"
          }
        }
      ],
      "status": "bloqueada",
      "isRepeatable": true,
      "requirements": {
        "completedMissionId": "mision_2_3"
      },
      "rewards": {
        "experience": 110,
        "coins": 60,
        "items": [],
        "unlocks": []
      },
      "examples": [],
      "storyPages": [
        {
          "pageNumber": 1,
          "title": "Batalla: El NullPointerException",
          "text": "Contin√∫as tu aventura en Campo de Batalla. Nuevos desaf√≠os te esperan para dominar batalla: el nullpointerexception.",
          "imageUrl": ""
        }
      ]
    }
  ],
  "questions": [
    {
      "id": "q_constructor_4",
      "text": "Observa: `public class Robot { String nombre; public Robot(String n) { nombre = n; } }`. ¬øC√≥mo crear√≠as un objeto Robot llamado 'WallE'?",
      "options": [
        "Robot wallE = Robot(\"WallE\");",
        "Robot wallE = new Robot(\"WallE\");",
        "new Robot wallE = (\"WallE\");",
        "Robot wallE.Robot(\"WallE\");"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Correcto. Se usa `new Robot(\"WallE\")`. `new` crea el objeto, `Robot` es el tipo y `(\"WallE\")` pasa el argumento al constructor.",
      "originalId": "pregunta_que_es_un_programa"
    },
    {
      "id": "pregunta_estructura_if_java",
      "text": "Si quieres que un mensaje '¬°Has ganado!' solo se muestre si la puntuacion del jugador es mayor que 100, ¬øcu√°l es la estructura correcta de un if en Java?",
      "options": [
        "if puntuacion > 100 { System.out.println(\"¬°Has ganado!\"); }",
        "if (puntuacion > 100) System.out.println(\"¬°Has ganado!\");",
        "if (puntuacion > 100) { System.out.println(\"¬°Has ganado!\"); }",
        "if (puntuacion es mayor que 100) { System.out.println(\"¬°Has ganado!\"); }"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) if (puntuacion > 100) { System.out.println(\"¬°Has ganado!\"); }. En Java, la condici√≥n de un if siempre debe ir entre par√©ntesis (), y el bloque de c√≥digo a ejecutar si la condici√≥n es verdadera debe ir entre llaves {}. La opci√≥n b) es t√©cnicamente v√°lida para una sola l√≠nea, pero la c) es la forma est√°ndar y recomendada para claridad y cuando hay m√∫ltiples l√≠neas de c√≥digo.",
      "originalId": "pregunta_multiplataforma_java"
    },
    {
      "id": "pregunta_bucle_for_java",
      "text": "¬øCu√°ntas veces se ejecutar√° el mensaje 'Ataque!' el siguiente c√≥digo Java? for (int i = 0; i < 3; i++) { System.out.println(\"Ataque!\"); }",
      "options": [
        "0 veces",
        "1 vez",
        "3 veces",
        "4 veces"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) 3 veces. Cuando i es 0, 0 < 3 es true, se imprime 'Ataque!'. i se convierte en 1. Cuando i es 1, 1 < 3 es true, se imprime 'Ataque!'. i se convierte en 2. Cuando i es 2, 2 < 3 es true, se imprime 'Ataque!'. i se convierte en 3. Cuando i es 3, 3 < 3 es false, el bucle termina.",
      "originalId": "pregunta_estructura_principal_java_clase_main"
    },
    {
      "id": "pregunta_expresion_calculo_vidas_java",
      "text": "Si tienes dos variables, vidas = 5 y da√±o = 2, ¬øqu√© expresi√≥n Java usar√≠as para calcular cu√°ntas vidas te quedan si te quitan el da√±o?",
      "options": [
        "vidas + da√±o",
        "vidas * da√±o",
        "vidas - da√±o",
        "vidas / da√±o"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) vidas - da√±o. Para saber cu√°ntas vidas te quedan despu√©s de recibir da√±o, debes restar el da√±o a tus vidas actuales. El operador - realiza la resta.",
      "originalId": "pregunta_instruccion_hola_mundo_java"
    },
    {
      "id": "pregunta_clase_vs_objeto_java",
      "text": "En Java, si una Clase es como un plano o molde (ej: Clase Jugador), ¬øqu√© representa un 'objeto' (ej: jugador1)?",
      "options": [
        "Otra clase diferente.",
        "Un error en el programa.",
        "Una instancia concreta creada a partir de ese plano, con sus propios valores para los atributos.",
        "Un tipo de dato primitivo."
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) Una instancia concreta creada a partir de ese plano, con sus propios valores para los atributos. Un objeto es la materializaci√≥n de una clase. Si la clase Jugador define que los jugadores tienen un nombre y una vida, jugador1 y jugador2 ser√≠an dos objetos diferentes, cada uno con su propio nombre y valor de vida, pero ambos creados siguiendo el molde de la clase Jugador.",
      "originalId": "pregunta_que_es_una_variable"
    },
    {
      "id": "pregunta_instruccion_hola_mundo_java",
      "text": "¬øCu√°l es la instrucci√≥n correcta en Java para mostrar el mensaje 'Hola Mundo' en la consola, y luego saltar a la siguiente l√≠nea?",
      "options": [
        "print(\"Hola Mundo\");",
        "System.in.println(\"Hola Mundo\");",
        "System.out.println(\"Hola Mundo\");",
        "console.log(\"Hola Mundo\");"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) System.out.println(\"Hola Mundo\");. Esta es la sintaxis est√°ndar en Java para imprimir texto en la consola de salida y a√±adir un salto de l√≠nea al final, lo que es muy √∫til para depurar o mostrar informaci√≥n al usuario. Las otras opciones son incorrectas para Java: print no es el comando completo, System.in es para la entrada, y console.log es de otros lenguajes.",
      "originalId": "pregunta_tipo_dato_edad_java"
    },
    {
      "id": "pregunta_bucle_for_java",
      "text": "¬øCu√°ntas veces se ejecutar√° el mensaje 'Ataque!' el siguiente c√≥digo Java? for (int i = 0; i < 3; i++) { System.out.println(\"Ataque!\"); }",
      "options": [
        "0 veces",
        "1 vez",
        "3 veces",
        "4 veces"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) 3 veces. Cuando i es 0, 0 < 3 es true, se imprime 'Ataque!'. i se convierte en 1. Cuando i es 1, 1 < 3 es true, se imprime 'Ataque!'. i se convierte en 2. Cuando i es 2, 2 < 3 es true, se imprime 'Ataque!'. i se convierte en 3. Cuando i es 3, 3 < 3 es false, el bucle termina.",
      "originalId": "pregunta_estructura_principal_java_clase_main"
    },
    {
      "id": "pregunta_declaracion_variable_entera_java",
      "text": "¬øCu√°l de las siguientes l√≠neas de c√≥digo declara correctamente una variable entera llamada puntuacion y le asigna un valor inicial de 100 en Java?",
      "options": [
        "puntuacion = 100;",
        "int puntuacion;",
        "int puntuacion = 100;",
        "Puntuacion int = 100;"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) int puntuacion = 100;. Esta l√≠nea declara una variable de tipo entero (int), la nombra puntuacion, y le asigna el valor 100 en el mismo momento. a) Solo asigna un valor, la variable no est√° declarada. b) Declara la variable, pero no le asigna un valor inicial. d) La sintaxis es incorrecta; el tipo de dato siempre va antes del nombre de la variable.",
      "originalId": "pregunta_nombre_variable_valido_java"
    },
    {
      "id": "pregunta_evitar_nullpointerexception",
      "text": "Una forma de proteger tu c√≥digo contra una NullPointerException antes de usar un objeto es:",
      "options": [
        "Ignorar el problema y esperar que no ocurra.",
        "Usar siempre nombres de variables muy cortos.",
        "Verificar si el objeto es 'null' antes de intentar acceder a sus miembros (ej: `if (miObjeto != null)`).",
        "A√±adir muchos comentarios al c√≥digo."
      ],
      "correctAnswerIndex": 2,
      "explanation": "Comprobar expl√≠citamente si una referencia de objeto es `null` antes de usarla (por ejemplo, con una sentencia `if (objeto != null)`) es una pr√°ctica defensiva clave para prevenir las NullPointerExceptions y hacer tu c√≥digo m√°s robusto.",
      "originalId": "pregunta_declaracion_variable_entera_java"
    },
    {
      "id": "q_constructor_4",
      "text": "Observa: `public class Robot { String nombre; public Robot(String n) { nombre = n; } }`. ¬øC√≥mo crear√≠as un objeto Robot llamado 'WallE'?",
      "options": [
        "Robot wallE = Robot(\"WallE\");",
        "Robot wallE = new Robot(\"WallE\");",
        "new Robot wallE = (\"WallE\");",
        "Robot wallE.Robot(\"WallE\");"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Correcto. Se usa `new Robot(\"WallE\")`. `new` crea el objeto, `Robot` es el tipo y `(\"WallE\")` pasa el argumento al constructor.",
      "originalId": "pregunta_que_es_un_programa"
    },
    {
      "id": "pregunta_que_es_un_programa",
      "text": "¬øQu√© es un 'programa' en el contexto de la programaci√≥n?",
      "options": [
        "Un dibujo de un ordenador.",
        "Un conjunto de instrucciones para que el ordenador realice una tarea.",
        "Un tipo de m√∫sica.",
        "Un juego de mesa."
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) Un conjunto de instrucciones para que el ordenador realice una tarea. Un programa es precisamente eso: una serie de pasos detallados que le decimos a una m√°quina para que la ejecute y logre un objetivo, como mostrar un mensaje en pantalla o procesar informaci√≥n.",
      "originalId": "pregunta_expresion_calculo_vidas_java"
    },
    {
      "id": "pregunta_nombre_variable_valido_java",
      "text": "¬øCu√°l de los siguientes nombres de variable es v√°lido en Java?",
      "options": [
        "1puntuacion",
        "nombre jugador",
        "mi_nombre",
        "public"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) mi_nombre. a) 1puntuacion es inv√°lido porque un nombre de variable no puede empezar con un n√∫mero. b) nombre jugador es inv√°lido porque no puede contener espacios. d) public es inv√°lido porque es una palabra reservada del lenguaje Java. mi_nombre sigue las reglas: no empieza con n√∫mero, no tiene espacios y no es una palabra reservada.",
      "originalId": "pregunta_division_enteros_java"
    },
    {
      "id": "pregunta_evitar_nullpointerexception",
      "text": "Una forma de proteger tu c√≥digo contra una NullPointerException antes de usar un objeto es:",
      "options": [
        "Ignorar el problema y esperar que no ocurra.",
        "Usar siempre nombres de variables muy cortos.",
        "Verificar si el objeto es 'null' antes de intentar acceder a sus miembros (ej: `if (miObjeto != null)`).",
        "A√±adir muchos comentarios al c√≥digo."
      ],
      "correctAnswerIndex": 2,
      "explanation": "Comprobar expl√≠citamente si una referencia de objeto es `null` antes de usarla (por ejemplo, con una sentencia `if (objeto != null)`) es una pr√°ctica defensiva clave para prevenir las NullPointerExceptions y hacer tu c√≥digo m√°s robusto.",
      "originalId": "pregunta_declaracion_variable_entera_java"
    },
    {
      "id": "pregunta_que_es_bucle_infinito",
      "text": "Un 'Bug de Bucle Infinito' es un problema donde un bucle en tu programa se repite sin fin, usualmente congelando la aplicaci√≥n. ¬øCu√°l podr√≠a ser una causa com√∫n?",
      "options": [
        "Una variable que nunca se declara.",
        "Una condici√≥n de terminaci√≥n del bucle que nunca se cumple.",
        "Usar un tipo de dato incorrecto para un contador.",
        "Escribir un comentario demasiado largo dentro del bucle."
      ],
      "correctAnswerIndex": 1,
      "explanation": "Los bucles (como `for` o `while`) necesitan una condici√≥n que eventualmente se vuelva falsa para detenerse. Si esta condici√≥n siempre es verdadera (por ejemplo, `while(true)` sin un `break` interno, o un contador que nunca alcanza el l√≠mite), el bucle se ejecutar√° indefinidamente.",
      "originalId": "pregunta_arraylist_vs_array_java"
    },
    {
      "id": "pregunta_declaracion_variable_entera_java",
      "text": "¬øCu√°l de las siguientes l√≠neas de c√≥digo declara correctamente una variable entera llamada puntuacion y le asigna un valor inicial de 100 en Java?",
      "options": [
        "puntuacion = 100;",
        "int puntuacion;",
        "int puntuacion = 100;",
        "Puntuacion int = 100;"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) int puntuacion = 100;. Esta l√≠nea declara una variable de tipo entero (int), la nombra puntuacion, y le asigna el valor 100 en el mismo momento. a) Solo asigna un valor, la variable no est√° declarada. b) Declara la variable, pero no le asigna un valor inicial. d) La sintaxis es incorrecta; el tipo de dato siempre va antes del nombre de la variable.",
      "originalId": "pregunta_nombre_variable_valido_java"
    },
    {
      "id": "pregunta_que_es_una_excepcion_java",
      "text": "¬øQu√© es una 'excepci√≥n' en Java?",
      "options": [
        "Un tipo de variable que guarda texto.",
        "Un m√©todo especial para imprimir mensajes.",
        "Un evento inesperado o un problema que ocurre durante la ejecuci√≥n de un programa y que interrumpe su flujo normal.",
        "Una forma de hacer que el programa sea m√°s r√°pido."
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) Un evento inesperado o un problema que ocurre durante la ejecuci√≥n de un programa y que interrumpe su flujo normal. Las excepciones son como alarmas que suenan cuando algo va mal. Java nos permite 'capturar' estas alarmas para poder gestionarlas y evitar que el programa se bloquee, mostrando un mensaje de error al usuario o intentando una acci√≥n alternativa.",
      "originalId": "pregunta_estructura_if_java"
    },
    {
      "id": "pregunta_por_que_java",
      "text": "¬øPor qu√© Java es un buen lenguaje para aprender programaci√≥n?",
      "correctAnswerIndex": 2,
      "originalId": "pregunta_por_que_java",
      "options": [
        "Porque es muy dif√≠cil",
        "Porque solo funciona en un ordenador",
        "Porque es f√°cil de leer y funciona en muchos tipos de ordenadores",
        "Porque es muy antiguo"
      ],
      "explanation": "La respuesta correcta es c) Porque es f√°cil de leer y funciona en muchos tipos de ordenadores. Java fue dise√±ado para ser claro y comprensible, y tiene la ventaja de que un programa escrito en Java puede ejecutarse en Windows, Mac, Linux y otros sistemas sin cambios."
    },
    {
      "id": "pregunta_razon_usar_metodo_java",
      "text": "¬øCu√°l de las siguientes es una buena raz√≥n para usar un 'm√©todo' en programaci√≥n?",
      "options": [
        "Para hacer el c√≥digo m√°s dif√≠cil de entender.",
        "Para repetir la misma instrucci√≥n muchas veces seguidas sin control.",
        "Para organizar el c√≥digo en tareas espec√≠ficas y reutilizarlo, evitando la repetici√≥n.",
        "Para hacer que el programa se ejecute m√°s lento."
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) Para organizar el c√≥digo en tareas espec√≠ficas y reutilizarlo, evitando la repetici√≥n. Los m√©todos son una herramienta fundamental para mantener el c√≥digo limpio, modular y f√°cil de mantener. Al encapsular una tarea en un m√©todo, puedes llamarlo desde cualquier lugar del programa sin tener que reescribir el mismo conjunto de instrucciones.",
      "originalId": "pregunta_condicion_if_else_java"
    },
    {
      "id": "pregunta_expresion_calculo_vidas_java",
      "text": "Si tienes dos variables, vidas = 5 y da√±o = 2, ¬øqu√© expresi√≥n Java usar√≠as para calcular cu√°ntas vidas te quedan si te quitan el da√±o?",
      "options": [
        "vidas + da√±o",
        "vidas * da√±o",
        "vidas - da√±o",
        "vidas / da√±o"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) vidas - da√±o. Para saber cu√°ntas vidas te quedan despu√©s de recibir da√±o, debes restar el da√±o a tus vidas actuales. El operador - realiza la resta.",
      "originalId": "pregunta_instruccion_hola_mundo_java"
    },
    {
      "id": "pregunta_llamar_metodo_java",
      "text": "Dado el siguiente m√©todo en Java: public void mostrarMensaje() { System.out.println(\"¬°Bienvenido a CodeQuest!\"); } ¬øC√≥mo llamar√≠as a este m√©todo para que imprima el mensaje?",
      "options": [
        "System.out.println(mostrarMensaje);",
        "mostrarMensaje();",
        "call mostrarMensaje();",
        "run mostrarMensaje;"
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) mostrarMensaje();. Para llamar a un m√©todo sin par√°metros, simplemente escribes su nombre seguido de par√©ntesis vac√≠os y un punto y coma. Las otras opciones usan sintaxis incorrecta o comandos que no existen en Java para llamar a un m√©todo.",
      "originalId": "pregunta_bucle_for_java"
    },
    {
      "id": "pregunta_funcion_array_java",
      "text": "¬øCu√°l es la funci√≥n principal de un Array en programaci√≥n Java?",
      "options": [
        "Realizar operaciones matem√°ticas complejas.",
        "Almacenar un √∫nico valor de texto.",
        "Almacenar una colecci√≥n de elementos del mismo tipo de dato, organizados por un √≠ndice.",
        "Dibujar gr√°ficos en la pantalla."
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) Almacenar una colecci√≥n de elementos del mismo tipo de dato, organizados por un √≠ndice. Los arrays son estructuras de datos que nos permiten guardar m√∫ltiples valores (como una lista de puntuaciones, nombres de enemigos o habilidades) bajo un solo nombre de variable, facilitando su manejo y acceso mediante posiciones num√©ricas.",
      "originalId": "pregunta_funcion_array_java"
    },
    {
      "id": "pregunta_que_es_programar",
      "correctAnswerIndex": 1,
      "originalId": "pregunta_que_es_programar",
      "options": [
        "Encender y apagar el ordenador",
        "Darle instrucciones paso a paso para que haga algo espec√≠fico",
        "Cambiar el color de la pantalla",
        "Conectarlo a internet"
      ],
      "text": "¬øQu√© significa \"programar\" un ordenador?",
      "explanation": "La respuesta correcta es b) Darle instrucciones paso a paso para que haga algo espec√≠fico. Programar es como ense√±arle al ordenador c√≥mo resolver un problema o realizar una tarea, escribiendo las instrucciones en un lenguaje que √©l pueda entender."
    },
    {
      "id": "pregunta_estructura_principal_java_clase_main",
      "text": "En Java, ¬ødentro de qu√© estructura principal se organiza casi todo el c√≥digo y d√≥nde se encuentra el m√©todo main (el punto de inicio de un programa)?",
      "options": [
        "Un archivo de texto.",
        "Una carpeta.",
        "Una clase.",
        "Una funci√≥n."
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) Una clase. En Java, la programaci√≥n es 'orientada a objetos', y las clases son los bloques de construcci√≥n fundamentales. Todo el c√≥digo que escribimos, incluyendo el m√©todo main (que es el primer lugar donde el programa comienza a ejecutarse), debe estar encapsulado dentro de una clase.",
      "originalId": "pregunta_razon_usar_metodo_java"
    },
    {
      "id": "pregunta_estructura_if_java",
      "text": "Si quieres que un mensaje '¬°Has ganado!' solo se muestre si la puntuacion del jugador es mayor que 100, ¬øcu√°l es la estructura correcta de un if en Java?",
      "options": [
        "if puntuacion > 100 { System.out.println(\"¬°Has ganado!\"); }",
        "if (puntuacion > 100) System.out.println(\"¬°Has ganado!\");",
        "if (puntuacion > 100) { System.out.println(\"¬°Has ganado!\"); }",
        "if (puntuacion es mayor que 100) { System.out.println(\"¬°Has ganado!\"); }"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) if (puntuacion > 100) { System.out.println(\"¬°Has ganado!\"); }. En Java, la condici√≥n de un if siempre debe ir entre par√©ntesis (), y el bloque de c√≥digo a ejecutar si la condici√≥n es verdadera debe ir entre llaves {}. La opci√≥n b) es t√©cnicamente v√°lida para una sola l√≠nea, pero la c) es la forma est√°ndar y recomendada para claridad y cuando hay m√∫ltiples l√≠neas de c√≥digo.",
      "originalId": "pregunta_multiplataforma_java"
    },
    {
      "id": "pregunta_identificar_bucle_infinito",
      "text": "Si sospechas que tienes un bucle infinito, ¬øqu√© s√≠ntoma podr√≠as observar en tu programa?",
      "options": [
        "El programa termina inmediatamente sin errores.",
        "El programa se ejecuta m√°s r√°pido de lo esperado.",
        "El programa no responde, consume muchos recursos del CPU o imprime el mismo resultado repetidamente.",
        "El programa muestra un mensaje de 'error de sintaxis'."
      ],
      "correctAnswerIndex": 2,
      "explanation": "Un bucle infinito a menudo hace que el programa parezca colgado, use mucha CPU porque est√° constantemente ejecutando el cuerpo del bucle, o si hay una instrucci√≥n de impresi√≥n dentro, la ver√°s repetirse sin parar en la consola.",
      "originalId": "pregunta_llamar_metodo_java"
    },
    {
      "id": "pregunta_funcion_array_java",
      "text": "¬øCu√°l es la funci√≥n principal de un Array en programaci√≥n Java?",
      "options": [
        "Realizar operaciones matem√°ticas complejas.",
        "Almacenar un √∫nico valor de texto.",
        "Almacenar una colecci√≥n de elementos del mismo tipo de dato, organizados por un √≠ndice.",
        "Dibujar gr√°ficos en la pantalla."
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) Almacenar una colecci√≥n de elementos del mismo tipo de dato, organizados por un √≠ndice. Los arrays son estructuras de datos que nos permiten guardar m√∫ltiples valores (como una lista de puntuaciones, nombres de enemigos o habilidades) bajo un solo nombre de variable, facilitando su manejo y acceso mediante posiciones num√©ricas.",
      "originalId": "pregunta_funcion_array_java"
    },
    {
      "id": "pregunta_identificar_bucle_infinito",
      "text": "Si sospechas que tienes un bucle infinito, ¬øqu√© s√≠ntoma podr√≠as observar en tu programa?",
      "options": [
        "El programa termina inmediatamente sin errores.",
        "El programa se ejecuta m√°s r√°pido de lo esperado.",
        "El programa no responde, consume muchos recursos del CPU o imprime el mismo resultado repetidamente.",
        "El programa muestra un mensaje de 'error de sintaxis'."
      ],
      "correctAnswerIndex": 2,
      "explanation": "Un bucle infinito a menudo hace que el programa parezca colgado, use mucha CPU porque est√° constantemente ejecutando el cuerpo del bucle, o si hay una instrucci√≥n de impresi√≥n dentro, la ver√°s repetirse sin parar en la consola.",
      "originalId": "pregunta_llamar_metodo_java"
    },
    {
      "id": "pregunta_clase_vs_objeto_java",
      "text": "En Java, si una Clase es como un plano o molde (ej: Clase Jugador), ¬øqu√© representa un 'objeto' (ej: jugador1)?",
      "options": [
        "Otra clase diferente.",
        "Un error en el programa.",
        "Una instancia concreta creada a partir de ese plano, con sus propios valores para los atributos.",
        "Un tipo de dato primitivo."
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) Una instancia concreta creada a partir de ese plano, con sus propios valores para los atributos. Un objeto es la materializaci√≥n de una clase. Si la clase Jugador define que los jugadores tienen un nombre y una vida, jugador1 y jugador2 ser√≠an dos objetos diferentes, cada uno con su propio nombre y valor de vida, pero ambos creados siguiendo el molde de la clase Jugador.",
      "originalId": "pregunta_que_es_una_variable"
    },
    {
      "id": "pregunta_division_enteros_java",
      "text": "Considerando las variables monedas = 10 y precioObjeto = 3. ¬øQu√© valor obtendr√≠a la variable objetosComprados si ejecutas la siguiente l√≠nea de c√≥digo en Java? int objetosComprados = monedas / precioObjeto;",
      "options": [
        "3.33",
        "3",
        "4",
        "10"
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) 3. Cuando divides dos n√∫meros enteros (int) en Java usando el operador /, el resultado tambi√©n es un entero y se trunca la parte decimal (se elimina, no se redondea). Entonces, 10 / 3 da como resultado 3.",
      "originalId": "pregunta_acceder_elemento_array_java"
    },
    {
      "id": "pregunta_que_es_una_excepcion_java",
      "text": "¬øQu√© es una 'excepci√≥n' en Java?",
      "options": [
        "Un tipo de variable que guarda texto.",
        "Un m√©todo especial para imprimir mensajes.",
        "Un evento inesperado o un problema que ocurre durante la ejecuci√≥n de un programa y que interrumpe su flujo normal.",
        "Una forma de hacer que el programa sea m√°s r√°pido."
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) Un evento inesperado o un problema que ocurre durante la ejecuci√≥n de un programa y que interrumpe su flujo normal. Las excepciones son como alarmas que suenan cuando algo va mal. Java nos permite 'capturar' estas alarmas para poder gestionarlas y evitar que el programa se bloquee, mostrando un mensaje de error al usuario o intentando una acci√≥n alternativa.",
      "originalId": "pregunta_estructura_if_java"
    },
    {
      "id": "pregunta_idea_central_poo_java",
      "text": "¬øCu√°l es la idea central de la Programaci√≥n Orientada a Objetos (POO) en Java?",
      "options": [
        "Escribir todo el c√≥digo en una sola l√≠nea.",
        "Organizar el c√≥digo alrededor de 'objetos' que tienen atributos (caracter√≠sticas) y m√©todos (acciones).",
        "Usar solo n√∫meros en el programa.",
        "Programar solo para computadoras muy antiguas."
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) Organizar el c√≥digo alrededor de 'objetos' que tienen atributos (caracter√≠sticas) y m√©todos (acciones). La POO es un paradigma de programaci√≥n que nos permite modelar el mundo real en el c√≥digo, facilitando la creaci√≥n de programas complejos, modulares y f√°ciles de mantener.",
      "originalId": "q_constructor_4"
    },
    {
      "id": "q_constructor_1",
      "text": "¬øQu√© es un constructor en Java?",
      "options": [
        "Un m√©todo para destruir objetos",
        "Un m√©todo especial para inicializar objetos",
        "Una variable que almacena el nombre de un objeto",
        "Un tipo de bucle para la creaci√≥n de objetos"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Correcto. Un constructor es un bloque de c√≥digo similar a un m√©todo que se llama cuando se crea una instancia de un objeto (se inicializa).",
      "originalId": "pregunta_evitar_nullpointerexception"
    },
    {
      "id": "pregunta_compilador_ayuda",
      "text": "Cuando tu c√≥digo tiene un error de sintaxis, como un punto y coma faltante, ¬øqu√© herramienta te avisa de este problema antes de que intentes ejecutar el programa?",
      "options": [
        "El sistema operativo",
        "El editor de texto simple",
        "El compilador",
        "El navegador web"
      ],
      "correctAnswerIndex": 2,
      "explanation": "El compilador es el programa que traduce tu c√≥digo fuente a un lenguaje que la m√°quina puede entender. Durante este proceso, revisa la sintaxis y te informa de errores como la falta de un punto y coma, ayud√°ndote a corregirlos.",
      "originalId": "pregunta_error_sintaxis_comun"
    },
    {
      "id": "pregunta_acceder_elemento_array_java",
      "text": "Dado el siguiente array en Java: String[] nombresEnemigos = {\"Goblin\", \"Orco\", \"Esqueleto\"}; ¬øQu√© c√≥digo imprimir√≠a 'Orco' en la consola?",
      "options": [
        "System.out.println(nombresEnemigos[1]);",
        "System.out.println(nombresEnemigos[2]);",
        "System.out.println(nombresEnemigos[0]);",
        "System.out.println(nombresEnemigos[\"Orco\"]);"
      ],
      "correctAnswerIndex": 0,
      "explanation": "La respuesta correcta es a) System.out.println(nombresEnemigos[1]);. 'Goblin' est√° en el √≠ndice 0. 'Orco' est√° en el √≠ndice 1. 'Esqueleto' est√° en el √≠ndice 2. Para acceder a 'Orco', necesitamos el √≠ndice 1.",
      "originalId": "pregunta_idea_central_poo_java"
    },
    {
      "id": "pregunta_division_enteros_java",
      "text": "Considerando las variables monedas = 10 y precioObjeto = 3. ¬øQu√© valor obtendr√≠a la variable objetosComprados si ejecutas la siguiente l√≠nea de c√≥digo en Java? int objetosComprados = monedas / precioObjeto;",
      "options": [
        "3.33",
        "3",
        "4",
        "10"
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) 3. Cuando divides dos n√∫meros enteros (int) en Java usando el operador /, el resultado tambi√©n es un entero y se trunca la parte decimal (se elimina, no se redondea). Entonces, 10 / 3 da como resultado 3.",
      "originalId": "pregunta_acceder_elemento_array_java"
    },
    {
      "id": "q_constructor_3",
      "text": "¬øCu√°l es la palabra clave utilizada para crear una instancia de un objeto e invocar su constructor?",
      "options": [
        "create",
        "instance",
        "new",
        "build"
      ],
      "correctAnswerIndex": 2,
      "explanation": "Correcto. La palabra clave `new` se usa para crear nuevas instancias de objetos, lo que implica llamar al constructor de la clase.",
      "originalId": "q_constructor_1"
    },
    {
      "id": "q_constructor_2",
      "text": "Si no defines ning√∫n constructor en tu clase Java, ¬øqu√© sucede?",
      "options": [
        "El c√≥digo no compilar√°",
        "Java proporciona un constructor por defecto sin argumentos",
        "Se produce un error en tiempo de ejecuci√≥n al crear un objeto",
        "Debes llamar a un m√©todo 'crearObjeto' especial"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Correcto. Si una clase no tiene constructores expl√≠citamente definidos, el compilador de Java a√±ade autom√°ticamente un constructor p√∫blico por defecto sin argumentos.",
      "originalId": "pregunta_clase_vs_objeto_java"
    },
    {
      "id": "pregunta_arraylist_vs_array_java",
      "text": "Si necesitas una lista en Java que pueda cambiar de tama√±o (a√±adir o eliminar elementos din√°micamente) para, por ejemplo, gestionar el inventario de un jugador, ¬øcu√°l de las siguientes opciones es la m√°s adecuada?",
      "options": [
        "Un array (String[] inventario)",
        "Un int",
        "Un ArrayList<String>",
        "Un boolean"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) Un ArrayList<String>. Mientras que un array (String[]) tiene un tama√±o fijo una vez creado, un ArrayList es una colecci√≥n din√°mica que puede crecer y encogerse. Es perfecto para situaciones como un inventario donde el n√∫mero de objetos cambia constantemente. El <String> entre > indica que es un ArrayList que guarda elementos de tipo String.",
      "originalId": "pregunta_que_es_una_excepcion_java"
    },
    {
      "id": "pregunta_que_es_bucle_infinito",
      "text": "Un 'Bug de Bucle Infinito' es un problema donde un bucle en tu programa se repite sin fin, usualmente congelando la aplicaci√≥n. ¬øCu√°l podr√≠a ser una causa com√∫n?",
      "options": [
        "Una variable que nunca se declara.",
        "Una condici√≥n de terminaci√≥n del bucle que nunca se cumple.",
        "Usar un tipo de dato incorrecto para un contador.",
        "Escribir un comentario demasiado largo dentro del bucle."
      ],
      "correctAnswerIndex": 1,
      "explanation": "Los bucles (como `for` o `while`) necesitan una condici√≥n que eventualmente se vuelva falsa para detenerse. Si esta condici√≥n siempre es verdadera (por ejemplo, `while(true)` sin un `break` interno, o un contador que nunca alcanza el l√≠mite), el bucle se ejecutar√° indefinidamente.",
      "originalId": "pregunta_arraylist_vs_array_java"
    },
    {
      "id": "q_constructor_5",
      "text": "¬øPuede un constructor en Java tener un tipo de retorno (por ejemplo, `void` o `int`)?",
      "options": [
        "S√≠, siempre debe devolver un booleano",
        "S√≠, puede devolver cualquier tipo de dato",
        "No, los constructores no tienen un tipo de retorno expl√≠cito",
        "Solo si es un constructor privado"
      ],
      "correctAnswerIndex": 2,
      "explanation": "Correcto. Los constructores no tienen un tipo de retorno expl√≠cito, ni siquiera `void`. Su 'retorno' impl√≠cito es la instancia del objeto que crean.",
      "originalId": "q_constructor_3"
    },
    {
      "id": "pregunta_compilador_ayuda",
      "text": "Cuando tu c√≥digo tiene un error de sintaxis, como un punto y coma faltante, ¬øqu√© herramienta te avisa de este problema antes de que intentes ejecutar el programa?",
      "options": [
        "El sistema operativo",
        "El editor de texto simple",
        "El compilador",
        "El navegador web"
      ],
      "correctAnswerIndex": 2,
      "explanation": "El compilador es el programa que traduce tu c√≥digo fuente a un lenguaje que la m√°quina puede entender. Durante este proceso, revisa la sintaxis y te informa de errores como la falta de un punto y coma, ayud√°ndote a corregirlos.",
      "originalId": "pregunta_error_sintaxis_comun"
    },
    {
      "id": "pregunta_que_hace_programa",
      "options": [
        "Solo mostrar texto en la pantalla",
        "Resolver problemas, procesar informaci√≥n y automatizar tareas",
        "Solo reproducir m√∫sica",
        "Solo navegar por internet"
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) Resolver problemas, procesar informaci√≥n y automatizar tareas. Los programas son incre√≠blemente vers√°tiles: pueden calcular, organizar datos, controlar dispositivos, crear juegos, gestionar redes sociales y mucho m√°s.",
      "originalId": "pregunta_que_hace_programa",
      "text": "¬øQu√© puede hacer un programa de ordenador?"
    },
    {
      "id": "pregunta_instruccion_hola_mundo_java",
      "text": "¬øCu√°l es la instrucci√≥n correcta en Java para mostrar el mensaje 'Hola Mundo' en la consola, y luego saltar a la siguiente l√≠nea?",
      "options": [
        "print(\"Hola Mundo\");",
        "System.in.println(\"Hola Mundo\");",
        "System.out.println(\"Hola Mundo\");",
        "console.log(\"Hola Mundo\");"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) System.out.println(\"Hola Mundo\");. Esta es la sintaxis est√°ndar en Java para imprimir texto en la consola de salida y a√±adir un salto de l√≠nea al final, lo que es muy √∫til para depurar o mostrar informaci√≥n al usuario. Las otras opciones son incorrectas para Java: print no es el comando completo, System.in es para la entrada, y console.log es de otros lenguajes.",
      "originalId": "pregunta_tipo_dato_edad_java"
    },
    {
      "id": "q_constructor_6",
      "text": "¬øCu√°l es el prop√≥sito principal de un constructor parametrizado?",
      "options": [
        "Crear objetos siempre con los mismos valores iniciales",
        "Inicializar un nuevo objeto con valores espec√≠ficos pasados como argumentos",
        "Evitar la creaci√≥n de objetos",
        "Solo se usa para herencia"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Correcto. Un constructor parametrizado permite pasar valores al momento de la creaci√≥n del objeto para inicializar sus atributos con esos valores espec√≠ficos, ofreciendo flexibilidad.",
      "originalId": "pregunta_compilador_ayuda"
    },
    {
      "id": "pregunta_acceder_elemento_array_java",
      "text": "Dado el siguiente array en Java: String[] nombresEnemigos = {\"Goblin\", \"Orco\", \"Esqueleto\"}; ¬øQu√© c√≥digo imprimir√≠a 'Orco' en la consola?",
      "options": [
        "System.out.println(nombresEnemigos[1]);",
        "System.out.println(nombresEnemigos[2]);",
        "System.out.println(nombresEnemigos[0]);",
        "System.out.println(nombresEnemigos[\"Orco\"]);"
      ],
      "correctAnswerIndex": 0,
      "explanation": "La respuesta correcta es a) System.out.println(nombresEnemigos[1]);. 'Goblin' est√° en el √≠ndice 0. 'Orco' est√° en el √≠ndice 1. 'Esqueleto' est√° en el √≠ndice 2. Para acceder a 'Orco', necesitamos el √≠ndice 1.",
      "originalId": "pregunta_idea_central_poo_java"
    },
    {
      "id": "pregunta_condicion_if_else_java",
      "text": "Considera el siguiente c√≥digo Java: int nivel = 7; if (nivel >= 10) { System.out.println(\"Eres un h√©roe legendario.\"); } else { System.out.println(\"Sigue entrenando.\"); } ¬øQu√© mensaje se imprimir√° en la consola cuando se ejecute este c√≥digo?",
      "options": [
        "Eres un h√©roe legendario.",
        "Sigue entrenando.",
        "Ambos mensajes.",
        "Ning√∫n mensaje."
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) 'Sigue entrenando.'. La variable nivel tiene un valor de 7. La condici√≥n nivel >= 10 (7 es mayor o igual que 10) es false (falsa). Por lo tanto, el c√≥digo dentro del bloque if no se ejecuta, y en su lugar se ejecuta el c√≥digo dentro del bloque else.",
      "originalId": "pregunta_causa_nullpointerexception"
    },
    {
      "id": "q_constructor_2",
      "text": "Si no defines ning√∫n constructor en tu clase Java, ¬øqu√© sucede?",
      "options": [
        "El c√≥digo no compilar√°",
        "Java proporciona un constructor por defecto sin argumentos",
        "Se produce un error en tiempo de ejecuci√≥n al crear un objeto",
        "Debes llamar a un m√©todo 'crearObjeto' especial"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Correcto. Si una clase no tiene constructores expl√≠citamente definidos, el compilador de Java a√±ade autom√°ticamente un constructor p√∫blico por defecto sin argumentos.",
      "originalId": "pregunta_clase_vs_objeto_java"
    },
    {
      "id": "pregunta_razon_usar_metodo_java",
      "text": "¬øCu√°l de las siguientes es una buena raz√≥n para usar un 'm√©todo' en programaci√≥n?",
      "options": [
        "Para hacer el c√≥digo m√°s dif√≠cil de entender.",
        "Para repetir la misma instrucci√≥n muchas veces seguidas sin control.",
        "Para organizar el c√≥digo en tareas espec√≠ficas y reutilizarlo, evitando la repetici√≥n.",
        "Para hacer que el programa se ejecute m√°s lento."
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) Para organizar el c√≥digo en tareas espec√≠ficas y reutilizarlo, evitando la repetici√≥n. Los m√©todos son una herramienta fundamental para mantener el c√≥digo limpio, modular y f√°cil de mantener. Al encapsular una tarea en un m√©todo, puedes llamarlo desde cualquier lugar del programa sin tener que reescribir el mismo conjunto de instrucciones.",
      "originalId": "pregunta_condicion_if_else_java"
    },
    {
      "id": "q_constructor_1",
      "text": "¬øQu√© es un constructor en Java?",
      "options": [
        "Un m√©todo para destruir objetos",
        "Un m√©todo especial para inicializar objetos",
        "Una variable que almacena el nombre de un objeto",
        "Un tipo de bucle para la creaci√≥n de objetos"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Correcto. Un constructor es un bloque de c√≥digo similar a un m√©todo que se llama cuando se crea una instancia de un objeto (se inicializa).",
      "originalId": "pregunta_evitar_nullpointerexception"
    },
    {
      "id": "pregunta_condicion_if_else_java",
      "text": "Considera el siguiente c√≥digo Java: int nivel = 7; if (nivel >= 10) { System.out.println(\"Eres un h√©roe legendario.\"); } else { System.out.println(\"Sigue entrenando.\"); } ¬øQu√© mensaje se imprimir√° en la consola cuando se ejecute este c√≥digo?",
      "options": [
        "Eres un h√©roe legendario.",
        "Sigue entrenando.",
        "Ambos mensajes.",
        "Ning√∫n mensaje."
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) 'Sigue entrenando.'. La variable nivel tiene un valor de 7. La condici√≥n nivel >= 10 (7 es mayor o igual que 10) es false (falsa). Por lo tanto, el c√≥digo dentro del bloque if no se ejecuta, y en su lugar se ejecuta el c√≥digo dentro del bloque else.",
      "originalId": "pregunta_causa_nullpointerexception"
    },
    {
      "id": "pregunta_multiplataforma_java",
      "text": "Una caracter√≠stica clave de Java es que sus programas pueden ejecutarse en diferentes sistemas operativos (como Windows, macOS o Linux) sin cambios importantes. ¬øC√≥mo se describe esta caracter√≠stica?",
      "options": [
        "Monoplataforma",
        "Multiplataforma",
        "Hiperplataforma",
        "Uniplataforma"
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) Multiplataforma. El prefijo 'multi-' significa 'muchos', y 'plataforma' se refiere al sistema donde el programa se ejecuta. Por lo tanto, 'multiplataforma' significa que funciona en muchas plataformas.",
      "originalId": "pregunta_que_es_bucle_infinito"
    },
    {
      "id": "pregunta_estructura_principal_java_clase_main",
      "text": "En Java, ¬ødentro de qu√© estructura principal se organiza casi todo el c√≥digo y d√≥nde se encuentra el m√©todo main (el punto de inicio de un programa)?",
      "options": [
        "Un archivo de texto.",
        "Una carpeta.",
        "Una clase.",
        "Una funci√≥n."
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) Una clase. En Java, la programaci√≥n es 'orientada a objetos', y las clases son los bloques de construcci√≥n fundamentales. Todo el c√≥digo que escribimos, incluyendo el m√©todo main (que es el primer lugar donde el programa comienza a ejecutarse), debe estar encapsulado dentro de una clase.",
      "originalId": "pregunta_razon_usar_metodo_java"
    },
    {
      "id": "pregunta_multiplataforma_java",
      "text": "Una caracter√≠stica clave de Java es que sus programas pueden ejecutarse en diferentes sistemas operativos (como Windows, macOS o Linux) sin cambios importantes. ¬øC√≥mo se describe esta caracter√≠stica?",
      "options": [
        "Monoplataforma",
        "Multiplataforma",
        "Hiperplataforma",
        "Uniplataforma"
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) Multiplataforma. El prefijo 'multi-' significa 'muchos', y 'plataforma' se refiere al sistema donde el programa se ejecuta. Por lo tanto, 'multiplataforma' significa que funciona en muchas plataformas.",
      "originalId": "pregunta_que_es_bucle_infinito"
    },
    {
      "id": "pregunta_tipo_dato_edad_java",
      "text": "Si necesitas guardar la edad de una persona (por ejemplo, 25) en una variable en Java, ¬øcu√°l es el tipo de dato m√°s adecuado para esa variable?",
      "options": [
        "double",
        "boolean",
        "int",
        "String"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) int. El tipo int (de 'integer') se utiliza para n√∫meros enteros, y la edad de una persona es t√≠picamente un n√∫mero entero sin decimales. double ser√≠a para n√∫meros con decimales, boolean para verdadero/falso, y String para texto.",
      "originalId": "q_constructor_6"
    },
    {
      "id": "pregunta_que_es_un_programa",
      "text": "¬øQu√© es un 'programa' en el contexto de la programaci√≥n?",
      "options": [
        "Un dibujo de un ordenador.",
        "Un conjunto de instrucciones para que el ordenador realice una tarea.",
        "Un tipo de m√∫sica.",
        "Un juego de mesa."
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) Un conjunto de instrucciones para que el ordenador realice una tarea. Un programa es precisamente eso: una serie de pasos detallados que le decimos a una m√°quina para que la ejecute y logre un objetivo, como mostrar un mensaje en pantalla o procesar informaci√≥n.",
      "originalId": "pregunta_expresion_calculo_vidas_java"
    },
    {
      "id": "pregunta_nombre_variable_valido_java",
      "text": "¬øCu√°l de los siguientes nombres de variable es v√°lido en Java?",
      "options": [
        "1puntuacion",
        "nombre jugador",
        "mi_nombre",
        "public"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) mi_nombre. a) 1puntuacion es inv√°lido porque un nombre de variable no puede empezar con un n√∫mero. b) nombre jugador es inv√°lido porque no puede contener espacios. d) public es inv√°lido porque es una palabra reservada del lenguaje Java. mi_nombre sigue las reglas: no empieza con n√∫mero, no tiene espacios y no es una palabra reservada.",
      "originalId": "pregunta_division_enteros_java"
    },
    {
      "id": "pregunta_bucle_for_java",
      "text": "¬øCu√°ntas veces se ejecutar√° 'Ataque!' en este c√≥digo? for (int i = 0; i < 3; i++) { System.out.println(\"Ataque!\"); }",
      "options": [
        "0 veces",
        "1 vez",
        "3 veces",
        "4 veces"
      ],
      "correctAnswerIndex": 2,
      "explanation": "El bucle empieza con i=0, contin√∫a mientras i<3, e incrementa i en cada iteraci√≥n. Ejecuta cuando i=0, i=1, i=2. Cuando i=3, la condici√≥n i<3 es falsa y el bucle termina. Total: 3 veces.",
      "level": 2
    },
    {
      "id": "pregunta_declaracion_variable_entera_java",
      "text": "¬øCu√°l de las siguientes l√≠neas declara correctamente una variable entera llamada 'puntuacion' con valor 100?",
      "options": [
        "puntuacion = 100;",
        "int puntuacion;",
        "int puntuacion = 100;",
        "Puntuacion int = 100;"
      ],
      "correctAnswerIndex": 2,
      "explanation": "En Java, primero declaras el tipo (int), luego el nombre (puntuacion), y finalmente asignas el valor (= 100). Todo en una l√≠nea: int puntuacion = 100;",
      "level": 1
    },
    {
      "id": "pregunta_estructura_if_java",
      "text": "Si quieres mostrar '¬°Has ganado!' solo cuando la puntuaci√≥n sea mayor que 100, ¬øcu√°l es la estructura correcta?",
      "options": [
        "if puntuacion > 100 { System.out.println(\"¬°Has ganado!\"); }",
        "if (puntuacion > 100) System.out.println(\"¬°Has ganado!\");",
        "if (puntuacion > 100) { System.out.println(\"¬°Has ganado!\"); }",
        "if (puntuacion es mayor que 100) { System.out.println(\"¬°Has ganado!\"); }"
      ],
      "correctAnswerIndex": 2,
      "explanation": "En Java, la condici√≥n del if debe ir entre par√©ntesis (), y el c√≥digo a ejecutar debe ir entre llaves {}. Esta es la forma est√°ndar y m√°s clara.",
      "level": 2
    },
    {
      "id": "pregunta_evitar_nullpointerexception",
      "text": "¬øC√≥mo puedes proteger tu c√≥digo contra una NullPointerException?",
      "options": [
        "Ignorar el problema y esperar que no ocurra.",
        "Usar siempre nombres de variables muy cortos.",
        "Verificar si el objeto es 'null' antes de usarlo (ej: if (miObjeto != null)).",
        "A√±adir muchos comentarios al c√≥digo."
      ],
      "correctAnswerIndex": 2,
      "explanation": "Verificar expl√≠citamente si una referencia es null antes de usarla es una pr√°ctica defensiva clave para prevenir NullPointerExceptions y hacer tu c√≥digo m√°s robusto.",
      "level": 2
    },
    {
      "id": "pregunta_instruccion_hola_mundo_java",
      "text": "¬øCu√°l es la instrucci√≥n correcta para mostrar 'Hola Mundo' en la consola?",
      "options": [
        "print(\"Hola Mundo\");",
        "System.in.println(\"Hola Mundo\");",
        "System.out.println(\"Hola Mundo\");",
        "console.log(\"Hola Mundo\");"
      ],
      "correctAnswerIndex": 2,
      "explanation": "System.out.println() es la instrucci√≥n est√°ndar en Java para mostrar texto en la consola. 'System.out' se refiere a la salida est√°ndar, y 'println' imprime el texto y a√±ade un salto de l√≠nea.",
      "level": 1
    },
    {
      "id": "pregunta_multiplataforma_java",
      "text": "¬øQu√© significa que Java sea 'multiplataforma'?",
      "options": [
        "Que solo funciona en Windows.",
        "Que un programa Java puede ejecutarse en diferentes sistemas operativos sin modificaciones.",
        "Que necesitas reescribir el c√≥digo para cada sistema operativo.",
        "Que solo funciona en servidores."
      ],
      "correctAnswerIndex": 1,
      "explanation": "Java es multiplataforma porque utiliza la JVM (Java Virtual Machine), que act√∫a como una capa intermedia entre tu programa y el sistema operativo, permitiendo que el mismo c√≥digo funcione en Windows, Mac, Linux, etc.",
      "level": 1
    },
    {
      "id": "pregunta_por_que_java",
      "text": "¬øPor qu√© Java es un buen lenguaje para aprender programaci√≥n?",
      "correctAnswerIndex": 2,
      "originalId": "pregunta_por_que_java",
      "options": [
        "Porque es muy dif√≠cil",
        "Porque solo funciona en un ordenador",
        "Porque es f√°cil de leer y funciona en muchos tipos de ordenadores",
        "Porque es muy antiguo"
      ],
      "explanation": "La respuesta correcta es c) Porque es f√°cil de leer y funciona en muchos tipos de ordenadores. Java fue dise√±ado para ser claro y comprensible, y tiene la ventaja de que un programa escrito en Java puede ejecutarse en Windows, Mac, Linux y otros sistemas sin cambios."
    },
    {
      "id": "pregunta_que_es_programar",
      "correctAnswerIndex": 1,
      "originalId": "pregunta_que_es_programar",
      "options": [
        "Encender y apagar el ordenador",
        "Darle instrucciones paso a paso para que haga algo espec√≠fico",
        "Cambiar el color de la pantalla",
        "Conectarlo a internet"
      ],
      "text": "¬øQu√© significa \"programar\" un ordenador?",
      "explanation": "La respuesta correcta es b) Darle instrucciones paso a paso para que haga algo espec√≠fico. Programar es como ense√±arle al ordenador c√≥mo resolver un problema o realizar una tarea, escribiendo las instrucciones en un lenguaje que √©l pueda entender."
    },
    {
      "id": "pregunta_que_es_un_programa",
      "text": "¬øQu√© es un 'programa' en el contexto de la programaci√≥n?",
      "options": [
        "Un dibujo de un ordenador.",
        "Un conjunto de instrucciones para que el ordenador realice una tarea.",
        "Un tipo de m√∫sica.",
        "Un juego de mesa."
      ],
      "correctAnswerIndex": 1,
      "explanation": "Un programa es precisamente eso: una serie de pasos detallados que le decimos a una m√°quina para que la ejecute y logre un objetivo, como mostrar un mensaje en pantalla o procesar informaci√≥n.",
      "level": 1
    },
    {
      "id": "pregunta_que_es_una_variable",
      "text": "¬øQu√© es una 'variable' en programaci√≥n?",
      "options": [
        "Un n√∫mero que nunca cambia.",
        "Un contenedor que puede almacenar diferentes tipos de informaci√≥n.",
        "Un error en el programa.",
        "Una funci√≥n matem√°tica."
      ],
      "correctAnswerIndex": 1,
      "explanation": "Una variable es como una caja etiquetada donde puedes guardar informaci√≥n (n√∫meros, texto, etc.) y cambiar su contenido cuando sea necesario. Es uno de los conceptos m√°s fundamentales en programaci√≥n.",
      "level": 1
    },
    {
      "id": "pregunta_que_hace_programa",
      "options": [
        "Solo mostrar texto en la pantalla",
        "Resolver problemas, procesar informaci√≥n y automatizar tareas",
        "Solo reproducir m√∫sica",
        "Solo navegar por internet"
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) Resolver problemas, procesar informaci√≥n y automatizar tareas. Los programas son incre√≠blemente vers√°tiles: pueden calcular, organizar datos, controlar dispositivos, crear juegos, gestionar redes sociales y mucho m√°s.",
      "originalId": "pregunta_que_hace_programa",
      "text": "¬øQu√© puede hacer un programa de ordenador?"
    },
    {
      "id": "pregunta_razon_usar_metodo_java",
      "text": "¬øCu√°l es una buena raz√≥n para usar m√©todos en programaci√≥n?",
      "options": [
        "Para hacer el c√≥digo m√°s dif√≠cil de entender.",
        "Para repetir la misma instrucci√≥n muchas veces sin control.",
        "Para organizar el c√≥digo en tareas espec√≠ficas y reutilizarlo, evitando la repetici√≥n.",
        "Para hacer que el programa se ejecute m√°s lento."
      ],
      "correctAnswerIndex": 2,
      "explanation": "Los m√©todos permiten dividir el c√≥digo en partes m√°s peque√±as y manejables, evitar repetici√≥n, y hacer el c√≥digo m√°s f√°cil de entender y mantener. Son fundamentales para escribir buen c√≥digo.",
      "level": 2
    },
    {
      "id": "pregunta_causa_nullpointerexception",
      "text": "La temida 'NullPointerException' ocurre en Java cuando intentas usar un objeto que en realidad no apunta a ninguna instancia en memoria (es decir, su valor es 'null'). ¬øCu√°l de las siguientes acciones podr√≠a causar una NullPointerException?",
      "options": [
        "Sumar dos n√∫meros enteros.",
        "Llamar a un m√©todo de un objeto que es 'null'.",
        "Imprimir un mensaje en la consola.",
        "Declarar una variable sin inicializarla (si no se usa despu√©s)."
      ],
      "correctAnswerIndex": 1,
      "explanation": "Si tienes una variable de objeto que es 'null' e intentas acceder a uno de sus m√©todos o atributos (ej: `miObjeto.hacerAlgo()` cuando `miObjeto` es `null`), el programa lanzar√° una NullPointerException porque no hay ning√∫n objeto real sobre el cual operar.",
      "originalId": "pregunta_identificar_bucle_infinito"
    },
    {
      "id": "pregunta_que_es_una_variable",
      "text": "En programaci√≥n, ¬øqu√© es una 'variable'?",
      "options": [
        "Un error en el c√≥digo.",
        "Una caja de almacenamiento en la memoria del ordenador que guarda un valor que puede cambiar.",
        "Un programa completo.",
        "Un tipo de teclado."
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) Una caja de almacenamiento en la memoria del ordenador que guarda un valor que puede cambiar. Las variables son esenciales en programaci√≥n porque nos permiten almacenar y manipular informaci√≥n mientras el programa se ejecuta, como la puntuaci√≥n de un juego o el nombre de un usuario.",
      "originalId": "q_constructor_5"
    },
    {
      "id": "q_constructor_3",
      "text": "¬øCu√°l es la palabra clave utilizada para crear una instancia de un objeto e invocar su constructor?",
      "options": [
        "create",
        "instance",
        "new",
        "build"
      ],
      "correctAnswerIndex": 2,
      "explanation": "Correcto. La palabra clave `new` se usa para crear nuevas instancias de objetos, lo que implica llamar al constructor de la clase.",
      "originalId": "q_constructor_1"
    },
    {
      "id": "pregunta_llamar_metodo_java",
      "text": "Dado el siguiente m√©todo en Java: public void mostrarMensaje() { System.out.println(\"¬°Bienvenido a CodeQuest!\"); } ¬øC√≥mo llamar√≠as a este m√©todo para que imprima el mensaje?",
      "options": [
        "System.out.println(mostrarMensaje);",
        "mostrarMensaje();",
        "call mostrarMensaje();",
        "run mostrarMensaje;"
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) mostrarMensaje();. Para llamar a un m√©todo sin par√°metros, simplemente escribes su nombre seguido de par√©ntesis vac√≠os y un punto y coma. Las otras opciones usan sintaxis incorrecta o comandos que no existen en Java para llamar a un m√©todo.",
      "originalId": "pregunta_bucle_for_java"
    },
    {
      "id": "pregunta_error_sintaxis_comun",
      "text": "En muchos lenguajes de programaci√≥n como Java o C#, ¬øcu√°l es un error de sintaxis muy com√∫n que a menudo impide que el c√≥digo compile, relacionado con la finalizaci√≥n de una instrucci√≥n?",
      "options": [
        "Usar demasiados espacios",
        "Olvidar un punto y coma al final de una instrucci√≥n",
        "Escribir comentarios muy largos",
        "Nombrar una variable con may√∫sculas"
      ],
      "correctAnswerIndex": 1,
      "explanation": "El punto y coma (;) es crucial en lenguajes como Java, C# o JavaScript para indicar el final de una instrucci√≥n. Olvidarlo es una de las causas m√°s frecuentes de errores de compilaci√≥n, ¬°un verdadero 'Bug del Punto y Coma'!",
      "originalId": "q_constructor_2"
    },
    {
      "id": "q_constructor_5",
      "text": "¬øPuede un constructor en Java tener un tipo de retorno (por ejemplo, `void` o `int`)?",
      "options": [
        "S√≠, siempre debe devolver un booleano",
        "S√≠, puede devolver cualquier tipo de dato",
        "No, los constructores no tienen un tipo de retorno expl√≠cito",
        "Solo si es un constructor privado"
      ],
      "correctAnswerIndex": 2,
      "explanation": "Correcto. Los constructores no tienen un tipo de retorno expl√≠cito, ni siquiera `void`. Su 'retorno' impl√≠cito es la instancia del objeto que crean.",
      "originalId": "q_constructor_3"
    },
    {
      "id": "pregunta_idea_central_poo_java",
      "text": "¬øCu√°l es la idea central de la Programaci√≥n Orientada a Objetos (POO) en Java?",
      "options": [
        "Escribir todo el c√≥digo en una sola l√≠nea.",
        "Organizar el c√≥digo alrededor de 'objetos' que tienen atributos (caracter√≠sticas) y m√©todos (acciones).",
        "Usar solo n√∫meros en el programa.",
        "Programar solo para computadoras muy antiguas."
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) Organizar el c√≥digo alrededor de 'objetos' que tienen atributos (caracter√≠sticas) y m√©todos (acciones). La POO es un paradigma de programaci√≥n que nos permite modelar el mundo real en el c√≥digo, facilitando la creaci√≥n de programas complejos, modulares y f√°ciles de mantener.",
      "originalId": "q_constructor_4"
    },
    {
      "id": "q_constructor_6",
      "text": "¬øCu√°l es el prop√≥sito principal de un constructor parametrizado?",
      "options": [
        "Crear objetos siempre con los mismos valores iniciales",
        "Inicializar un nuevo objeto con valores espec√≠ficos pasados como argumentos",
        "Evitar la creaci√≥n de objetos",
        "Solo se usa para herencia"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Correcto. Un constructor parametrizado permite pasar valores al momento de la creaci√≥n del objeto para inicializar sus atributos con esos valores espec√≠ficos, ofreciendo flexibilidad.",
      "originalId": "pregunta_compilador_ayuda"
    },
    {
      "id": "pregunta_que_es_una_variable",
      "text": "En programaci√≥n, ¬øqu√© es una 'variable'?",
      "options": [
        "Un error en el c√≥digo.",
        "Una caja de almacenamiento en la memoria del ordenador que guarda un valor que puede cambiar.",
        "Un programa completo.",
        "Un tipo de teclado."
      ],
      "correctAnswerIndex": 1,
      "explanation": "La respuesta correcta es b) Una caja de almacenamiento en la memoria del ordenador que guarda un valor que puede cambiar. Las variables son esenciales en programaci√≥n porque nos permiten almacenar y manipular informaci√≥n mientras el programa se ejecuta, como la puntuaci√≥n de un juego o el nombre de un usuario.",
      "originalId": "q_constructor_5"
    },
    {
      "id": "pregunta_tipo_dato_edad_java",
      "text": "Si necesitas guardar la edad de una persona (por ejemplo, 25) en una variable en Java, ¬øcu√°l es el tipo de dato m√°s adecuado para esa variable?",
      "options": [
        "double",
        "boolean",
        "int",
        "String"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) int. El tipo int (de 'integer') se utiliza para n√∫meros enteros, y la edad de una persona es t√≠picamente un n√∫mero entero sin decimales. double ser√≠a para n√∫meros con decimales, boolean para verdadero/falso, y String para texto.",
      "originalId": "q_constructor_6"
    },
    {
      "id": "pregunta_error_sintaxis_comun",
      "text": "En muchos lenguajes de programaci√≥n como Java o C#, ¬øcu√°l es un error de sintaxis muy com√∫n que a menudo impide que el c√≥digo compile, relacionado con la finalizaci√≥n de una instrucci√≥n?",
      "options": [
        "Usar demasiados espacios",
        "Olvidar un punto y coma al final de una instrucci√≥n",
        "Escribir comentarios muy largos",
        "Nombrar una variable con may√∫sculas"
      ],
      "correctAnswerIndex": 1,
      "explanation": "El punto y coma (;) es crucial en lenguajes como Java, C# o JavaScript para indicar el final de una instrucci√≥n. Olvidarlo es una de las causas m√°s frecuentes de errores de compilaci√≥n, ¬°un verdadero 'Bug del Punto y Coma'!",
      "originalId": "q_constructor_2"
    },
    {
      "id": "pregunta_causa_nullpointerexception",
      "text": "La temida 'NullPointerException' ocurre en Java cuando intentas usar un objeto que en realidad no apunta a ninguna instancia en memoria (es decir, su valor es 'null'). ¬øCu√°l de las siguientes acciones podr√≠a causar una NullPointerException?",
      "options": [
        "Sumar dos n√∫meros enteros.",
        "Llamar a un m√©todo de un objeto que es 'null'.",
        "Imprimir un mensaje en la consola.",
        "Declarar una variable sin inicializarla (si no se usa despu√©s)."
      ],
      "correctAnswerIndex": 1,
      "explanation": "Si tienes una variable de objeto que es 'null' e intentas acceder a uno de sus m√©todos o atributos (ej: `miObjeto.hacerAlgo()` cuando `miObjeto` es `null`), el programa lanzar√° una NullPointerException porque no hay ning√∫n objeto real sobre el cual operar.",
      "originalId": "pregunta_identificar_bucle_infinito"
    },
    {
      "id": "pregunta_arraylist_vs_array_java",
      "text": "Si necesitas una lista en Java que pueda cambiar de tama√±o (a√±adir o eliminar elementos din√°micamente) para, por ejemplo, gestionar el inventario de un jugador, ¬øcu√°l de las siguientes opciones es la m√°s adecuada?",
      "options": [
        "Un array (String[] inventario)",
        "Un int",
        "Un ArrayList<String>",
        "Un boolean"
      ],
      "correctAnswerIndex": 2,
      "explanation": "La respuesta correcta es c) Un ArrayList<String>. Mientras que un array (String[]) tiene un tama√±o fijo una vez creado, un ArrayList es una colecci√≥n din√°mica que puede crecer y encogerse. Es perfecto para situaciones como un inventario donde el n√∫mero de objetos cambia constantemente. El <String> entre > indica que es un ArrayList que guarda elementos de tipo String.",
      "originalId": "pregunta_que_es_una_excepcion_java"
    }
  ],
  "timestamp": "2025-06-01T21:35:49.708Z"
}