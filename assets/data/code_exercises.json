[
  {
    "id": "bucle_for_basico",
    "exerciseId": "bucle_for_basico",
    "title": "El C√≠rculo M√°gico de la Repetici√≥n",
    "description": "Crea un bucle for simple que muestre los n√∫meros del 1 al 3 en una sola l√≠nea.",
    "theory": "üåÄ **Los C√≠rculos M√°gicos de Repetici√≥n** üåÄ\n\nEn Algorithmia, existe una magia ancestral conocida como los **C√≠rculos de Repetici√≥n**. Estos hechizos permiten a los Guardianes del C√≥digo realizar tareas repetitivas de manera eficiente, canalizando su energ√≠a m√°gica en patrones c√≠clicos.\n\n**üîÑ El Hechizo FOR (C√≠rculo Controlado)**\nEl hechizo `for` es el m√°s preciso de todos los c√≠rculos m√°gicos. Te permite definir exactamente cu√°ntas veces quieres que se repita una acci√≥n, como un ritual que se ejecuta un n√∫mero espec√≠fico de veces.\n\n**‚ö° La Anatom√≠a del C√≠rculo M√°gico:**\n```java\nfor (inicializaci√≥n; condici√≥n; incremento) {\n    // Acci√≥n a repetir\n}\n```\n\n**üéØ Los Tres Pilares del Hechizo:**\n1. **Inicializaci√≥n** (`int i = 1`): Donde comienza el ritual\n2. **Condici√≥n** (`i <= 3`): Cu√°ndo debe continuar el c√≠rculo\n3. **Incremento** (`i++`): C√≥mo avanza cada iteraci√≥n\n\n**üìú Ejemplo de Invocaci√≥n:**\n```java\nfor (int i = 1; i <= 3; i++) {\n    System.out.print(i + \" \");\n}\n```\n\n**üéØ Tu Misi√≥n C√≠clica:**\nDebes crear un c√≠rculo m√°gico que invoque los n√∫meros sagrados del 1 al 3, manifest√°ndolos en una secuencia continua para demostrar tu dominio sobre la magia de la repetici√≥n.",
    "initialCode": "public class BucleFor {\n    public static void main(String[] args) {\n        // Escribe aqu√≠ tu c√≥digo\n    }\n}",
    "expectedOutput": "1 2 3 ",
    "hints": [
      "Usa for (int i = 1; i <= 3; i++) System.out.print(i + \" \");",
      "Usa System.out.print() en lugar de println para mantener todo en una l√≠nea"
    ],
    "requiredPatterns": [
      "for",
      "int i",
      "System.out.print"
    ],
    "forbiddenPatterns": [],
    "testCases": [
      {
        "description": "Debe mostrar n√∫meros del 1 al 3",
        "expectedOutput": "1 2 3 ",
        "isHidden": false
      }
    ],
    "difficulty": 3,
    "concepts": [
      "bucles",
      "for",
      "iteraci√≥n"
    ]
  },
  {
    "id": "condicionales_if",
    "exerciseId": "condicionales_if",
    "title": "Las Puertas de la Sabidur√≠a",
    "description": "Usa una estructura if simple para verificar si la edad (20) es mayor o igual a 18 y mostrar 'Eres mayor de edad'.",
    "theory": "üö™ **Las Puertas M√°gicas de la Decisi√≥n** üö™\n\nEn Algorithmia, los caminos del destino se bifurcan constantemente. Los Guardianes del C√≥digo han aprendido a crear **Puertas M√°gicas** que solo se abren cuando se cumplen ciertas condiciones m√≠sticas.\n\n**üîÆ El Hechizo IF (Si M√°gico)**\nEl hechizo `if` es una de las magias m√°s poderosas de Algorithmia. Permite a los Guardianes crear puertas que eval√∫an la verdad de una condici√≥n y act√∫an en consecuencia.\n\n**‚öñÔ∏è Los S√≠mbolos de Comparaci√≥n Sagrados:**\n- `>=` (Mayor o igual): \"La energ√≠a es igual o superior\"\n- `<=` (Menor o igual): \"La energ√≠a es igual o inferior\"\n- `==` (Igual): \"Las energ√≠as son id√©nticas\"\n- `!=` (Diferente): \"Las energ√≠as son distintas\"\n- `>` (Mayor): \"La energ√≠a es superior\"\n- `<` (Menor): \"La energ√≠a es inferior\"\n\n**üé≠ La Estructura del Hechizo:**\n```java\nif (condicion_magica) {\n    // Acci√≥n si la condici√≥n es verdadera\n}\n```\n\n**üéØ Tu Misi√≥n de Sabidur√≠a:**\nDebes crear una puerta m√°gica que determine si un habitante de Algorithmia ha alcanzado la mayor√≠a de edad (18 a√±os) para acceder a los secretos avanzados del reino.",
    "initialCode": "public class MayorEdad {\n    public static void main(String[] args) {\n        int edad = 20;\n        \n        // Escribe aqu√≠ tu c√≥digo\n    }\n}",
    "expectedOutput": "Eres mayor de edad",
    "hints": [
      "Usa if (edad >= 18) System.out.println(\"Eres mayor de edad\");",
      "La condici√≥n es: edad >= 18"
    ],
    "requiredPatterns": [
      "if",
      ">=",
      "System.out.println"
    ],
    "forbiddenPatterns": [],
    "testCases": [
      {
        "description": "Debe usar estructura if",
        "expectedOutput": "Eres mayor de edad",
        "isHidden": false
      }
    ],
    "difficulty": 3,
    "concepts": [
      "condicionales",
      "if",
      "operadores de comparaci√≥n"
    ]
  },
  {
    "id": "hola_mundo_java",
    "exerciseId": "hola_mundo_java",
    "title": "El Primer Hechizo del Guardi√°n",
    "description": "Crea un programa que muestre el mensaje 'Hola Mundo' en la consola. Este es el ejercicio cl√°sico para comenzar a programar en Java.",
    "theory": "üåü **Bienvenido a Algorithmia, joven Guardi√°n del C√≥digo** üåü\n\nEn el m√≠stico reino de Algorithmia, el poder reside en las palabras m√°gicas que pueden manifestarse a trav√©s del C√≥digo Fuente. Como nuevo Guardi√°n, tu primera misi√≥n es aprender el hechizo m√°s fundamental: hacer que el reino te escuche.\n\n**üìú La Magia de System.out.println()**\nEste es el hechizo b√°sico que permite a los Guardianes comunicarse con el mundo exterior. Cuando invocas `System.out.println()`, est√°s canalizando tu energ√≠a m√°gica para proyectar un mensaje que todos en Algorithmia pueden ver y escuchar.\n\n**‚ö° Estructura del Hechizo:**\n- `System.out.println()` es tu varita m√°gica\n- Las comillas dobles `\"\"` son el c√≠rculo m√°gico que contiene tu mensaje\n- El punto y coma `;` sella el hechizo y lo activa\n\n**üéØ Tu Primera Misi√≥n:**\nDebes invocar el hechizo ancestral 'Hola Mundo' para anunciar tu llegada como nuevo Guardi√°n del C√≥digo. Este ritual ha sido realizado por todos los grandes programadores de la historia de Algorithmia.",
    "initialCode": "public class MiPrograma {\n    public static void main(String[] args) {\n        // Escribe aqu√≠ tu c√≥digo\n    }\n}",
    "expectedOutput": "Hola Mundo",
    "hints": [
      "Usa System.out.println() para mostrar texto en la consola",
      "El texto debe ir entre comillas dobles: \"Hola Mundo\"",
      "No olvides el punto y coma (;) al final de la instrucci√≥n"
    ],
    "requiredPatterns": [
      "System.out.println",
      "Hola Mundo"
    ],
    "forbiddenPatterns": [
      "System.out.print("
    ],
    "testCases": [
      {
        "description": "Debe mostrar 'Hola Mundo'",
        "expectedOutput": "Hola Mundo",
        "isHidden": false
      }
    ],
    "difficulty": 1,
    "concepts": [
      "sintaxis b√°sica",
      "output",
      "strings"
    ]
  },
  {
    "id": "metodo_simple",
    "exerciseId": "metodo_simple",
    "title": "Invocando los Hechizos Ancestrales",
    "description": "Llama al m√©todo 'saludar' que ya est√° definido, pas√°ndole el nombre 'Ana' y muestra el resultado.",
    "theory": "üìö **Los Grimorio de Hechizos (M√©todos)** üìö\n\nEn Algorithmia, los Guardianes m√°s sabios han creado **Grimorios de Hechizos** conocidos como m√©todos. Estos son conjuntos de instrucciones m√°gicas que pueden ser invocados una y otra vez, permitiendo a los Guardianes reutilizar poderosos encantamientos sin tener que reescribirlos.\n\n**üîÆ La Magia de la Invocaci√≥n**\nCuando un hechizo ya ha sido inscrito en el grimorio (m√©todo definido), cualquier Guardi√°n puede invocarlo simplemente pronunciando su nombre m√°gico y proporcionando los ingredientes necesarios (par√°metros).\n\n**‚ö° Anatom√≠a de un Hechizo:**\n```java\npublic static String saludar(String nombre) {\n    return \"¬°Hola, \" + nombre + \"! ¬øC√≥mo est√°s?\";\n}\n```\n\n**üé≠ Los Elementos del Hechizo:**\n- `public static`: Hace el hechizo accesible a todos los Guardianes\n- `String`: El tipo de energ√≠a m√°gica que devuelve\n- `saludar`: El nombre del hechizo\n- `String nombre`: El ingrediente m√°gico requerido\n- `return`: Devuelve el resultado del encantamiento\n\n**üåü Invocando el Hechizo:**\n```java\nSystem.out.println(saludar(\"Ana\"));\n```\n\n**üéØ Tu Misi√≥n M√≠stica:**\nDebes invocar el hechizo ancestral de saludo, proporcionando el nombre 'Ana' como ingrediente m√°gico, y manifestar el resultado en el reino de Algorithmia.",
    "initialCode": "public class Metodos {\n    public static String saludar(String nombre) {\n        return \"¬°Hola, \" + nombre + \"! ¬øC√≥mo est√°s?\";\n    }\n    \n    public static void main(String[] args) {\n        // Escribe aqu√≠ tu c√≥digo\n    }\n}",
    "expectedOutput": "¬°Hola, Ana! ¬øC√≥mo est√°s?",
    "hints": [
      "Llama al m√©todo: System.out.println(saludar(\"Ana\"));",
      "El m√©todo saludar ya est√° definido, solo necesitas llamarlo"
    ],
    "requiredPatterns": [
      "saludar",
      "Ana",
      "System.out.println"
    ],
    "forbiddenPatterns": [],
    "testCases": [
      {
        "description": "Debe llamar al m√©todo saludar",
        "expectedOutput": "¬°Hola, Ana! ¬øC√≥mo est√°s?",
        "isHidden": false
      }
    ],
    "difficulty": 3,
    "concepts": [
      "m√©todos",
      "llamada de m√©todos"
    ]
  },
  {
    "id": "operaciones_matematicas",
    "exerciseId": "operaciones_matematicas",
    "title": "La Alquimia de los N√∫meros Sagrados",
    "description": "Realiza una suma de dos n√∫meros (10 + 5) y muestra el resultado en la consola.",
    "theory": "üî¢ **La Alquimia Num√©rica de Algorithmia** üî¢\n\nEn las profundidades de Algorithmia, los n√∫meros poseen un poder m√≠stico especial. Los Guardianes del C√≥digo han aprendido a manipular estas energ√≠as num√©ricas para resolver los problemas m√°s complejos del reino.\n\n**‚öóÔ∏è Los Cristales Num√©ricos (int)**\nLos `int` son cristales m√°gicos que pueden almacenar n√∫meros enteros. Estos cristales son fundamentales para realizar c√°lculos y operaciones alqu√≠micas.\n\n**‚ûï Los Rituales Aritm√©ticos:**\nLos antiguos Guardianes descubrieron que pod√≠an combinar la energ√≠a de diferentes cristales usando s√≠mbolos sagrados:\n- `+` (Suma): Combina las energ√≠as de dos cristales\n- `-` (Resta): Extrae energ√≠a de un cristal\n- `*` (Multiplicaci√≥n): Amplifica la energ√≠a\n- `/` (Divisi√≥n): Divide la energ√≠a en partes iguales\n\n**üß™ El Proceso Alqu√≠mico:**\n```java\nint suma = numero1 + numero2;\n```\nEste ritual toma la energ√≠a de `numero1` y `numero2`, las combina usando el s√≠mbolo sagrado `+`, y almacena el resultado en un nuevo cristal llamado `suma`.\n\n**üéØ Tu Misi√≥n Alqu√≠mica:**\nDebes combinar las energ√≠as de dos cristales num√©ricos (10 y 5) y revelar el resultado de esta transmutaci√≥n al reino.",
    "initialCode": "public class Calculadora {\n    public static void main(String[] args) {\n        int numero1 = 10;\n        int numero2 = 5;\n        \n        // Escribe aqu√≠ tu c√≥digo\n    }\n}",
    "expectedOutput": "Suma: 15",
    "hints": [
      "Para sumar: int suma = numero1 + numero2;",
      "Muestra el resultado con System.out.println(\"Suma: \" + suma);"
    ],
    "requiredPatterns": [
      "+",
      "System.out.println"
    ],
    "forbiddenPatterns": [],
    "testCases": [
      {
        "description": "Debe realizar suma correctamente",
        "expectedOutput": "Suma: 15",
        "isHidden": false
      }
    ],
    "difficulty": 2,
    "concepts": [
      "operadores aritm√©ticos",
      "variables",
      "tipos num√©ricos"
    ]
  },
  {
    "id": "variables_basicas",
    "exerciseId": "variables_basicas",
    "title": "Los Recipientes M√°gicos de Algorithmia",
    "description": "Declara una variable de tipo String llamada 'nombre' con el valor 'Juan' y mu√©strala en la consola.",
    "theory": "üè∫ **Los Recipientes M√°gicos (Variables)** üè∫\n\nEn Algorithmia, los Guardianes del C√≥digo utilizan recipientes m√°gicos llamados **Variables** para almacenar y manipular la esencia de la informaci√≥n. Estos recipientes pueden contener diferentes tipos de energ√≠a m√°gica.\n\n**üìù Los Pergaminos de Texto (String)**\nLos `String` son recipientes especiales que pueden contener palabras, frases y textos m√°gicos. Son como pergaminos que guardan mensajes importantes para el reino.\n\n**‚ö° Creando tu Primer Recipiente:**\n```java\nString nombre = \"Juan\";\n```\n- `String` define el tipo de recipiente (para texto)\n- `nombre` es el nombre que le das a tu recipiente\n- `=` es el ritual de asignaci√≥n\n- `\"Juan\"` es el contenido m√°gico que guardas\n\n**üîó Combinando Energ√≠as M√°gicas:**\nPuedes combinar texto fijo con el contenido de tus recipientes usando el operador de concatenaci√≥n `+`:\n```java\nSystem.out.println(\"Mi nombre es \" + nombre);\n```\n\n**üéØ Tu Misi√≥n:**\nCrea un recipiente m√°gico llamado 'nombre' que contenga 'Juan' y revela su contenido al reino usando tu hechizo de comunicaci√≥n.",
    "initialCode": "public class Variables {\n    public static void main(String[] args) {\n        // Escribe aqu√≠ tu c√≥digo\n    }\n}",
    "expectedOutput": "Mi nombre es Juan",
    "hints": [
      "Para declarar una variable String: String nombre = \"Juan\";",
      "Puedes mostrar texto y variables con System.out.println(\"Mi nombre es \" + nombre);"
    ],
    "requiredPatterns": [
      "String nombre",
      "System.out.println"
    ],
    "forbiddenPatterns": [],
    "testCases": [
      {
        "description": "Debe declarar variable String nombre y mostrarla",
        "expectedOutput": "Mi nombre es Juan",
        "isHidden": false
      }
    ],
    "difficulty": 2,
    "concepts": [
      "variables",
      "tipos de datos",
      "concatenaci√≥n"
    ]
  }
]