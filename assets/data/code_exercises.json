[
  {
    "id": "variables_declaracion_asignacion",
    "exerciseId": "variables_declaracion_asignacion",
    "title": "El Cofre del Tesoro",
    "description": "Declara una variable entera llamada 'monedas' y as√≠gnale el valor 50.",
    "theory": "üí∞ El Cofre del Tesoro: Variables y Asignaci√≥n üí∞\n\nEn tu viaje como Guardi√°n del C√≥digo, encontrar√°s tesoros y recursos. Para guardarlos, necesitas Cofres del Tesoro, que en el lenguaje de Java se llaman variables.\n\nüì¶ Declaraci√≥n: Abriendo el Cofre\nAntes de guardar cualquier cosa, debes declarar tu cofre, es decir, decirle a Java qu√© tipo de tesoro va a contener. Para n√∫meros enteros, usar√°s el tipo `int`.\n\n```java\nint miNumero;\n```\nAqu√≠, `int` dice que guardar√° un n√∫mero entero, y `miNumero` es el nombre que le das a tu cofre.\n\nüíé Asignaci√≥n: Guardando el Tesoro\nUna vez que tienes tu cofre, puedes guardar un tesoro dentro de √©l usando el operador de asignaci√≥n `=`.\n\n```java\nmiNumero = 10;\n```\nAhora, el cofre `miNumero` contiene el valor `10`.\n\n‚ú® Declaraci√≥n y Asignaci√≥n en un solo paso:\n¬°Puedes abrir el cofre y guardar el tesoro al mismo tiempo!\n\n```java\nint miNumero = 10;\n```\n\nüéØ Tu Misi√≥n del Tesoro:\nTu primera misi√≥n es preparar un cofre para tus monedas. Declara una variable entera llamada `monedas` y guarda en ella la cantidad inicial de `50` monedas de oro.",
    "initialCode": "// Escribe aqu√≠ tu c√≥digo",
    "expectedOutput": "",
    "hints": [
      "Recuerda que para n√∫meros enteros se usa `int`.",
      "No olvides el punto y coma al final de la l√≠nea."
    ],
    "requiredPatterns": [
      "int monedas",
      "monedas = 50",
      ";"
    ],
    "forbiddenPatterns": [
      "System.out"
    ],
    "testCases": [
      {
        "description": "La variable 'monedas' debe ser declarada como int y tener el valor 50.",
        "expectedOutput": "",
        "codeToEvaluate": "int monedas = 50; System.out.println(monedas);",
        "expectedEvaluationOutput": "50\n",
        "isHidden": false
      }
    ],
    "difficulty": 1,
    "concepts": [
      "variables",
      "tipos de datos",
      "int",
      "asignaci√≥n"
    ]
  },
  {
    "id": "imprimir_hola_mundo",
    "exerciseId": "imprimir_hola_mundo",
    "title": "El Primer Saludo",
    "description": "Escribe un programa que imprima en la consola el mensaje '¬°Hola, Guardi√°n del C√≥digo!'",
    "theory": "üó£Ô∏è El Primer Saludo: Imprimiendo Mensajes üó£Ô∏è\n\nComo Guardi√°n del C√≥digo, necesitas una forma de comunicarte con el mundo digital y mostrar tus resultados. Para esto, Java te ofrece un hechizo de invocaci√≥n de mensajes.\n\n‚ú® El Hechizo `System.out.println()`\nEste es tu conjuro principal para hacer que tu programa hable. La palabra `System` se refiere al sistema de tu ordenador. `out` significa que estamos enviando algo 'hacia afuera' (la consola), y `println` (print line) significa 'imprimir una l√≠nea'.\n\n```java\nSystem.out.println(\"Tu mensaje aqu√≠\");\n```\n\nüìù Reglas del Conjuro:\n* El mensaje que quieres imprimir debe ir entre comillas dobles (`\" \"`).\n* Cada conjuro debe terminar con un punto y coma (`;`), como el sello final de un pergamino.\n\nüìú Ejemplo de Invocaci√≥n:\n```java\nSystem.out.println(\"¬°Mi primer mensaje!\");\n```\nEsto har√° que `¬°Mi primer mensaje!` aparezca en la pantalla.\n\nüéØ Tu Misi√≥n del Saludo:\nTu misi√≥n es invocar el mensaje de bienvenida a todos los Guardianes del C√≥digo. Haz que tu programa imprima exactamente: `¬°Hola, Guardi√°n del C√≥digo!`",
    "initialCode": "// Escribe aqu√≠ tu c√≥digo",
    "expectedOutput": "¬°Hola, Guardi√°n del C√≥digo!\n",
    "hints": [
      "Usa `System.out.println();` para imprimir una l√≠nea.",
      "Aseg√∫rate de que el mensaje est√© exactamente entre comillas dobles."
    ],
    "requiredPatterns": [
      "System.out.println",
      "\"¬°Hola, Guardi√°n del C√≥digo!\""
    ],
    "forbiddenPatterns": [],
    "testCases": [
      {
        "description": "Debe imprimir el saludo exacto.",
        "expectedOutput": "¬°Hola, Guardi√°n del C√≥digo!\n",
        "isHidden": false
      }
    ],
    "difficulty": 1,
    "concepts": [
      "salida",
      "imprimir",
      "System.out.println"
    ]
  },
  {
    "id": "operaciones_basicas",
    "exerciseId": "operaciones_basicas",
    "title": "Los C√≥mputos del Escriba",
    "description": "¬øCu√°l es el resultado de la operaci√≥n 15 + 8 * 2?",
    "theory": "‚ûï‚ûñ‚úñÔ∏è‚ûó Los C√≥mputos del Escriba: Operaciones B√°sicas ‚ûï‚ûñ‚úñÔ∏è‚ûó\n\nComo Guardi√°n del C√≥digo, a menudo necesitar√°s realizar c√°lculos con los tesoros que almacenas en tus variables. Los Escribas de Algorithmia te ense√±ar√°n los operadores aritm√©ticos b√°sicos.\n\nüî¢ Operadores Aritm√©ticos:\n* Suma: `+` (ej: `5 + 3` es `8`)\n* Resta: `-` (ej: `10 - 4` es `6`)\n* Multiplicaci√≥n: `*` (ej: `2 * 6` es `12`)\n* Divisi√≥n: `/` (ej: `10 / 2` es `5`)\n\n‚ö° Orden de Operaciones:\nEn Java, al igual que en matem√°ticas, existe un orden de precedencia:\n1. Par√©ntesis `()`\n2. Multiplicaci√≥n `*` y Divisi√≥n `/`\n3. Suma `+` y Resta `-`\n\nüìú Ejemplo:\n```java\nint resultado = 5 + 3 * 2; // resultado ser√° 11, no 16\n// Porque primero se hace 3 * 2 = 6, luego 5 + 6 = 11\n```\n\nüéØ Tu Misi√≥n de C√≥mputos:\nCalcula mentalmente el resultado de la operaci√≥n `15 + 8 * 2` siguiendo el orden correcto de operaciones.",
    "initialCode": "// ¬øCu√°l es el resultado de 15 + 8 * 2?\n// Escribe aqu√≠ tu respuesta",
    "expectedOutput": "31\n",
    "hints": [
      "Recuerda el orden de operaciones: primero multiplicaci√≥n, luego suma.",
      "8 * 2 = 16, luego 15 + 16 = 31"
    ],
    "requiredPatterns": [
      "System.out.println(15 + 8 * 2)"
    ],
    "forbiddenPatterns": [],
    "testCases": [
      {
        "description": "Debe calcular correctamente 15 + 8 * 2 = 31.",
        "expectedOutput": "31\n",
        "codeToEvaluate": "System.out.println(15 + 8 * 2);",
        "expectedEvaluationOutput": "31\n",
        "isHidden": false
      },
      {
        "description": "Debe entender el orden de operaciones.",
        "expectedOutput": "31\n",
        "codeToEvaluate": "System.out.println(15 + 8 * 2);",
        "expectedEvaluationOutput": "31\n",
        "isHidden": false
      }
    ],
    "difficulty": 2,
    "concepts": [
      "operadores aritm√©ticos",
      "suma",
      "resta",
      "multiplicaci√≥n",
      "divisi√≥n"
    ]
  },
  {
    "id": "condicional_if_basico",
    "exerciseId": "condicional_if_basico",
    "title": "El Sendero Bifurcado",
    "description": "Declara una variable 'puntuacion' con valor 70. Si la 'puntuacion' es mayor o igual a 60, imprime '¬°Has aprobado la prueba!'",
    "theory": " bifurcado. Necesitas aprender a tomar decisiones en tu c√≥digo, a guiarlo por diferentes senderos seg√∫n las circunstancias. Las estructuras condicionales ser√°n tu mapa y br√∫jula.\n\nüß≠ El Sendero `if` (Si...):\nEl hechizo `if` te permite ejecutar un bloque de c√≥digo solo si una condici√≥n es verdadera. Es como decir: 'Si el camino est√° despejado, avanza'.\n\n```java\nif (condicion) {\n    // C√≥digo a ejecutar si la condici√≥n es verdadera\n}\n```\n\n‚ùì Condiciones:\nUna condici√≥n es una expresi√≥n que se eval√∫a como `true` (verdadero) o `false` (falso). Usar√°s operadores de comparaci√≥n para construir estas condiciones:\n* `>` (mayor que)\n* `<` (menor que)\n* `>=` (mayor o igual que)\n* `<=` (menor o igual que)\n* `==` (igual a)\n* `!=` (diferente de)\n\nüìú Ejemplo de Invocaci√≥n:\n```java\nint edad = 18;\nif (edad >= 18) {\n    System.out.println(\"Puedes votar.\");\n}\n```\n\nüéØ Tu Misi√≥n Bifurcada:\nTu misi√≥n es usar el hechizo `if` para determinar si un Guardi√°n ha aprobado una prueba. Declara una variable `puntuacion` con un valor de `70`. Luego, si la `puntuacion` es mayor o igual a `60`, imprime el mensaje: `¬°Has aprobado la prueba!`",
    "initialCode": "// Escribe aqu√≠ tu c√≥digo",
    "expectedOutput": "¬°Has aprobado la prueba!\n",
    "hints": [
      "Declara `puntuacion` como `int`.",
      "Usa el operador `>=` para la condici√≥n de 'mayor o igual que'.",
      "Aseg√∫rate de que el mensaje a imprimir sea exactamente el esperado."
    ],
    "requiredPatterns": [
      "int puntuacion = 70",
      "if (puntuacion >= 60)",
      "System.out.println(\"¬°Has aprobado la prueba!\")"
    ],
    "forbiddenPatterns": [
      "else"
    ],
    "testCases": [
      {
        "description": "Debe imprimir el mensaje si la puntuaci√≥n es 70.",
        "expectedOutput": "¬°Has aprobado la prueba!\n",
        "codeToEvaluate": "int puntuacion = 70; if (puntuacion >= 60) { System.out.println(\"¬°Has aprobado la prueba!\"); }",
        "expectedEvaluationOutput": "¬°Has aprobado la prueba!\n",
        "isHidden": false
      },
      {
        "description": "No debe imprimir el mensaje si la puntuaci√≥n es 50.",
        "expectedOutput": "",
        "codeToEvaluate": "int puntuacion = 50; if (puntuacion >= 60) { System.out.println(\"¬°Has aprobado la prueba!\"); }",
        "expectedEvaluationOutput": "",
        "isHidden": false
      }
    ],
    "difficulty": 2,
    "concepts": [
      "condicionales",
      "if",
      "operadores de comparaci√≥n"
    ]
  },
  {
    "id": "bucle_for_basico",
    "exerciseId": "bucle_for_basico",
    "title": "El C√≠rculo M√°gico de la Repetici√≥n",
    "description": "Crea un bucle for simple que muestre los n√∫meros del 1 al 3 en una sola l√≠nea.",
    "theory": "üåÄ Los C√≠rculos M√°gicos de Repetici√≥n üåÄ\n\nEn Algorithmia, existe una magia ancestral conocida como los C√≠rculos de Repetici√≥n. Estos hechizos permiten a los Guardianes del C√≥digo realizar tareas repetitivas de manera eficiente, canalizando su energ√≠a m√°gica en patrones c√≠clicos.\n\nüîÑ El Hechizo FOR (C√≠rculo Controlado)\nEl hechizo `for` es el m√°s preciso de todos los c√≠rculos m√°gicos. Te permite definir exactamente cu√°ntas veces quieres que se repita una acci√≥n, como un ritual que se ejecuta un n√∫mero espec√≠fico de veces.\n\n‚ö° La Anatom√≠a del C√≠rculo M√°gico:\n```java\nfor (inicializaci√≥n; condici√≥n; incremento) {\n ¬† ¬†// Acci√≥n a repetir\n}\n```\n\nüéØ Los Tres Pilares del Hechizo:\n1.  Inicializaci√≥n (`int i = 1`): Donde comienza el ritual\n2.  Condici√≥n (`i <= 3`): Cu√°ndo debe continuar el c√≠rculo\n3.  Incremento (`i++`): C√≥mo avanza cada iteraci√≥n\n\nüìú Ejemplo de Invocaci√≥n:\n```java\nfor (int i = 1; i <= 3; i++) {\n ¬† ¬†System.out.print(i + \" \");\n}\n```\n\nüéØ Tu Misi√≥n C√≠clica:\nDebes crear un c√≠rculo m√°gico que invoque los n√∫meros sagrados del 1 al 3, manifest√°ndolos en una secuencia continua para demostrar tu dominio sobre la magia de la repetici√≥n.",
    "initialCode": "// Escribe aqu√≠ tu c√≥digo",
    "expectedOutput": "1 2 3 ",
    "hints": [
      "Usa `for (int i = 1; i <= 3; i++)` para configurar el bucle.",
      "Usa `System.out.print()` en lugar de `println` para mantener todo en una l√≠nea, y a√±ade un espacio (`\" \"`) despu√©s de cada n√∫mero."
    ],
    "requiredPatterns": [
      "for",
      "int i",
      "System.out.print"
    ],
    "forbiddenPatterns": [],
    "testCases": [
      {
        "description": "Debe mostrar n√∫meros del 1 al 3 en una l√≠nea.",
        "expectedOutput": "1 2 3 ",
        "isHidden": false
      }
    ],
    "difficulty": 3,
    "concepts": [
      "bucles",
      "for",
      "iteraci√≥n"
    ]
  },
  {
    "id": "clase_simple_personaje",
    "exerciseId": "clase_simple_personaje",
    "title": "El Molde del H√©roe",
    "description": "¬øCu√°l es la palabra clave correcta para crear una nueva instancia de una clase en Java?",
    "theory": "üßô El Molde del H√©roe: Creando tu Primera Clase üßô\n\nEn Algorithmia, todo lo que ves y con lo que interact√∫as se basa en Objetos. Un Objeto es como una criatura o un artefacto m√°gico, y una Clase es el Molde o el Plano que te permite crear esos objetos.\n\nüèóÔ∏è La Clase:\nUna clase define las caracter√≠sticas (atributos) y las acciones (m√©todos) que tendr√°n los objetos creados a partir de ella.\n\n```java\npublic class MiClase {\n    // Atributos (caracter√≠sticas)\n    String nombre;\n    int vida;\n\n    // M√©todos (acciones)\n    public void hacerAlgo() {\n        System.out.println(\"Haciendo algo...\");\n    }\n}\n```\n\n‚ú® Creando Objetos:\nPara crear un objeto (instancia) de una clase, usas la palabra clave `new` seguida del nombre de la clase y par√©ntesis:\n\n```java\nMiClase objeto = new MiClase();\n```\n\nüéØ Opciones:\nA) create\nB) new\nC) make\nD) instance",
    "initialCode": "public class Main {\n    public static void main(String[] args) {\n        // ¬øCu√°l palabra clave se usa para crear objetos?\n        // Escribe aqu√≠ tu respuesta (A, B, C o D)\n        \n    }\n}",
    "expectedOutput": "B\n",
    "hints": [
      "Piensa en la palabra que usas antes del nombre de la clase para crear un objeto.",
      "Es la misma palabra que usas para crear arrays: `new int[5]`."
    ],
    "requiredPatterns": [
      "System.out.println(\"B\")"
    ],
    "forbiddenPatterns": [],
    "testCases": [
      {
        "description": "Debe responder correctamente que 'new' es la palabra clave para crear objetos.",
        "expectedOutput": "B\n",
        "codeToEvaluate": "System.out.println(\"B\");",
        "expectedEvaluationOutput": "B\n",
        "isHidden": false
      }
    ],
    "difficulty": 4,
    "concepts": [
      "clases",
      "objetos",
      "atributos",
      "m√©todos",
      "POO"
    ]
  },
  {
    "id": "constructor_personaje",
    "exerciseId": "constructor_personaje",
    "title": "El Ritual de Creaci√≥n",
    "description": "¬øCu√°l es la caracter√≠stica principal que distingue a un constructor de un m√©todo normal en Java?",
    "theory": "‚ú® El Ritual de Creaci√≥n: Constructores ‚ú®\n\nCrear objetos es un acto de magia, y cada objeto necesita ser invocado correctamente. Para eso usamos los Constructores.\n\nüèóÔ∏è ¬øQu√© es un Constructor?\nUn constructor es un m√©todo especial que se invoca autom√°ticamente cuando creas un nuevo objeto de una clase (`new MiClase()`). Su prop√≥sito principal es inicializar los atributos del objeto.\n\nüìù Caracter√≠sticas del Constructor:\n* Tiene el mismo nombre que la clase\n* No tiene tipo de retorno (ni siquiera `void`)\n* Se ejecuta autom√°ticamente al crear un objeto\n* Puede recibir par√°metros para inicializar atributos\n\nüìú Ejemplo:\n```java\npublic class Golem {\n    String material;\n\n    // Constructor\n    public Golem(String mat) {\n        this.material = mat;\n    }\n}\n```\n\nüéØ Opciones:\nA) Tiene la palabra 'constructor' en su nombre\nB) No tiene tipo de retorno\nC) Siempre es privado\nD) Debe tener par√°metros",
    "initialCode": "public class Main {\n    public static void main(String[] args) {\n        // ¬øCu√°l es la caracter√≠stica principal de un constructor?\n        // Escribe aqu√≠ tu respuesta (A, B, C o D)\n        \n    }\n}",
    "expectedOutput": "B\n",
    "hints": [
      "Piensa en qu√© hace diferente a un constructor de un m√©todo normal.",
      "Los m√©todos normales tienen tipos de retorno como void, int, String, etc."
    ],
    "requiredPatterns": [
      "System.out.println(\"B\")"
    ],
    "forbiddenPatterns": [],
    "testCases": [
      {
        "description": "Debe responder correctamente que los constructores no tienen tipo de retorno.",
        "expectedOutput": "B\n",
        "codeToEvaluate": "System.out.println(\"B\");",
        "expectedEvaluationOutput": "B\n",
        "isHidden": false
      }
    ],
    "difficulty": 4,
    "concepts": [
      "constructores",
      "POO",
      "this"
    ]
  },
  {
    "id": "herencia_basica",
    "exerciseId": "herencia_basica",
    "title": "El Linaje del C√≥digo",
    "description": "¬øCu√°l es la palabra clave en Java que se usa para indicar que una clase hereda de otra?",
    "theory": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ El Linaje del C√≥digo: Herencia üë®‚Äçüë©‚Äçüëß‚Äçüë¶\n\nEn el reino de Algorithmia, el conocimiento y las habilidades pueden transmitirse de generaci√≥n en generaci√≥n. Esto es la Herencia, uno de los pilares de la Programaci√≥n Orientada a Objetos.\n\nüß¨ ¬øQu√© es la Herencia?\nLa herencia permite que una clase hija (subclase) adquiera los atributos y m√©todos de una clase padre (superclase). Es como decir: 'Un Perro ES UN Animal', por lo tanto, un Perro tiene todo lo que tiene un Animal, y adem√°s, sus propias caracter√≠sticas.\n\nüîë La Palabra Clave para Herencia:\nPara indicar que una clase hereda de otra, usas una palabra clave espec√≠fica.\n\n```java\nclass ClaseHija extends ClasePadre {\n    // La clase hija hereda todo de la clase padre\n}\n```\n\nüìú Ejemplo:\n```java\nclass Animal {\n    public void respirar() {\n        System.out.println(\"El animal respira\");\n    }\n}\n\nclass Perro extends Animal {\n    // Perro hereda el m√©todo respirar()\n    public void ladrar() {\n        System.out.println(\"Guau!\");\n    }\n}\n```\n\nüéØ Opciones:\nA) inherits\nB) extends\nC) implements\nD) super",
    "initialCode": "public class Main {\n    public static void main(String[] args) {\n        // ¬øCu√°l palabra clave se usa para herencia?\n        // Escribe aqu√≠ tu respuesta (A, B, C o D)\n        \n    }\n}",
    "expectedOutput": "B\n",
    "hints": [
      "Piensa en la palabra que 'extiende' las capacidades de una clase.",
      "Es la misma palabra que usar√≠as para decir que algo se 'extiende' o 'ampl√≠a'."
    ],
    "requiredPatterns": [
      "System.out.println(\"B\")"
    ],
    "forbiddenPatterns": [],
    "testCases": [
      {
        "description": "Debe responder correctamente que 'extends' es la palabra clave para herencia.",
        "expectedOutput": "B\n",
        "codeToEvaluate": "System.out.println(\"B\");",
        "expectedEvaluationOutput": "B\n",
        "isHidden": false
      }
    ],
    "difficulty": 5,
    "concepts": [
      "herencia",
      "POO",
      "superclase",
      "subclase",
      "sobreescritura",
      "extends"
    ]
  },
  {
    "id": "array_basico",
    "exerciseId": "array_basico",
    "title": "El Pergamino de los Elementos",
    "description": "Declara un array de enteros llamado 'numeros' con los valores 10, 20 y 30. Luego, imprime el segundo elemento del array.",
    "theory": "üìú El Pergamino de los Elementos: Arrays üìú\n\nImagina que necesitas organizar una colecci√≥n de tesoros similares, como una lista de pociones o una serie de puntuaciones. En lugar de usar un cofre (variable) para cada uno, puedes usar un Pergamino de los Elementos, o lo que en Java llamamos un Array.\n\nüì¶ ¬øQu√© es un Array?\nUn array es una estructura de datos que te permite almacenar una colecci√≥n de elementos del mismo tipo en un solo lugar. Piensa en √©l como una lista numerada de cajones, donde cada caj√≥n guarda un tesoro.\n\nüìè Declaraci√≥n y Creaci√≥n:\nPara crear un array, debes especificar el tipo de elementos que guardar√° y su tama√±o.\n\n```java\n// Declarar un array de enteros llamado 'puntuaciones' con 5 espacios\nint[] puntuaciones = new int[5];\n\n// Declarar e inicializar un array con valores directamente\nString[] nombres = {\"Ana\", \"Juan\", \"Maria\"};\n```\n\nüìç Acceso a Elementos: Los √çndices\nCada elemento en un array tiene una posici√≥n, llamada √≠ndice. ¬°Atenci√≥n! Los √≠ndices en Java siempre empiezan en `0`.\n\n```java\nString[] frutas = {\"Manzana\", \"Banana\", \"Cereza\"};\n// \"Manzana\" est√° en el √≠ndice 0\n// \"Banana\" est√° en el √≠ndice 1\n// \"Cereza\" est√° en el √≠ndice 2\n\nSystem.out.println(frutas[0]); // Imprime \"Manzana\"\n```\n\nüéØ Tu Misi√≥n del Pergamino:\nTu misi√≥n es crear un pergamino que contenga algunos n√∫meros sagrados. Declara un array de enteros llamado `numeros` e inicial√≠zalo con los valores `10`, `20` y `30`. Luego, utilizando el √≠ndice correcto, imprime el segundo elemento de ese array.",
    "initialCode": "// Escribe aqu√≠ tu c√≥digo",
    "expectedOutput": "20\n",
    "hints": [
      "Usa la sintaxis `{ valor1, valor2, ... }` para inicializar el array directamente.",
      "Recuerda que los √≠ndices de los arrays comienzan en 0."
    ],
    "requiredPatterns": [
      "int[] numeros = {10, 20, 30}",
      "System.out.println(numeros[1])"
    ],
    "forbiddenPatterns": [
      "new int[3]",
      "for"
    ],
    "testCases": [
      {
        "description": "Debe declarar el array con los valores correctos e imprimir el segundo elemento (√≠ndice 1).",
        "expectedOutput": "20\n",
        "codeToEvaluate": "public class ArrayEjemplo { public static void main(String[] args) { int[] numeros = {10, 20, 30}; System.out.println(numeros[1]); } }",
        "expectedEvaluationOutput": "20\n",
        "isHidden": false
      }
    ],
    "difficulty": 3,
    "concepts": [
      "arrays",
      "√≠ndices",
      "colecciones"
    ]
  }
]