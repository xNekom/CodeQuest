[
  {
    "id": "mision_1_1",
    "name": "El Despertar del Guardián",
    "description": "Descubre tu destino como Guardián del Código y aprende qué es la programación.",
    "zone": "Bosque de los Algoritmos",
    "levelRequired": 1,
    "status": "disponible",
    "isRepeatable": false,
    "rewards": {
      "id": "reward_mision_1_1",
      "name": "Recompensa del Despertar",
      "description": "Experiencia y monedas por completar tu primera misión",
      "type": "experience",
      "value": 30,
      "conditions": {}
    },
    "unlocks": [
      "mision_1_2"
    ],
    "storyPages": [
      {
        "pageNumber": 1,
        "name": "El Despertar del Guardián",
        "text": "En las brumas del amanecer, te despiertas en el corazón de Algorithmia. El aire vibra con energía digital, y puedes sentir que algo terrible ha perturbado el equilibrio del reino. Los Errores Sintácticos han comenzado a corromper el Código Fuente.\n\nComo nuevo Guardián del Código, tu misión es clara: debes aprender las artes ancestrales de la programación para restaurar el orden.",
        "imageUrl": ""
      }
    ],
    "order": 1,
    "theory": "La programación es el arte de comunicarse con las máquinas. Imagina que eres un mago que puede hablar con los ordenadores y darles órdenes para que hagan cosas increíbles.\n\nUn programa es como una receta de cocina muy detallada: una lista de pasos que le decimos al ordenador para que realice una tarea. Por ejemplo, podríamos crear un programa que calcule cuánto dinero necesitas ahorrar cada mes para comprar algo especial.\n\nJava es uno de los lenguajes de programación más populares del mundo. Lo especial de Java es que es como un idioma universal: un programa escrito en Java puede funcionar en casi cualquier ordenador.",
    "objectives": [
      {
        "type": "theory",
        "description": "Completa la lección teórica sobre programación básica.",
        "target": 1
      },
      {
        "type": "questions",
        "description": "Responde correctamente 3 preguntas sobre programación.",
        "target": 3,
        "questionIds": [
          "q_java_intro_1",
          "q_java_intro_2",
          "q_java_intro_3"
        ]
      }
    ]
  },
  {
    "id": "mision_1_2",
    "name": "Los Secretos de las Variables",
    "description": "Aprende a manejar las variables, los contenedores mágicos que guardan información.",
    "zone": "Bosque de los Algoritmos",
    "levelRequired": 1,
    "status": "bloqueada",
    "isRepeatable": false,
    "requirements": {
      "completedMissionId": "mision_1_1"
    },
    "rewards": {
      "id": "reward_mision_1_2",
      "name": "Recompensa de Variables",
      "description": "Experiencia y monedas por dominar las variables",
      "type": "experience",
      "value": 35,
      "conditions": {}
    },
    "unlocks": [
      "mision_1_3"
    ],
    "order": 2,
    "storyPages": [
      {
        "pageNumber": 1,
        "name": "Los Secretos de las Variables",
        "text": "Tras tu primer despertar, sientes el poder del código fluyendo. Ahora, es momento de aprender a almacenar los tesoros que encuentres. Las variables son como cofres mágicos que guardan diferentes tipos de información, ¡pero cada cofre está diseñado para un tipo de tesoro específico!",
        "imageUrl": ""
      }
    ],
    "theory": "En Algorithmia, los magos programadores descubrieron que necesitaban cajas especiales para guardar información. Estas cajas mágicas se llaman 'variables' y pueden contener diferentes tipos de tesoros.\n\nImagina que tienes diferentes tipos de cajas:\n• Una caja para números enteros (como tu edad: 15, 20, 100)\n• Una caja para palabras y frases (como tu nombre: 'María', 'Hola mundo')\n• Una caja para números con decimales (como tu altura: 1.65, 3.14)\n• Una caja para respuestas de sí o no (como: verdadero, falso)\n\nEn Java, antes de usar una caja (variable), debemos decirle qué tipo de tesoro va a guardar.",
    "objectives": [
      {
        "type": "theory",
        "description": "Aprende sobre variables y tipos de datos.",
        "target": 1
      },
      {
        "type": "questions",
        "description": "Responde correctamente 3 preguntas sobre variables.",
        "target": 3,
        "questionIds": [
          "q_java_tipos_1",
          "q_java_tipos_2",
          "q_java_variables_1"
        ]
      }
    ]
  },
  {
    "id": "mision_1_3",
    "name": "El Arte de las Instrucciones",
    "description": "Domina las instrucciones básicas y aprende a crear tu primer programa completo en Java.",
    "zone": "Bosque de los Algoritmos",
    "levelRequired": 1,
    "status": "bloqueada",
    "isRepeatable": false,
    "requirements": {
      "completedMissionId": "mision_1_2"
    },
    "rewards": {
      "id": "reward_mision_1_3",
      "name": "Recompensa de Instrucciones",
      "description": "Experiencia y monedas por dominar las instrucciones",
      "type": "experience",
      "value": 40,
      "conditions": {}
    },
    "unlocks": [
      "mision_batalla_1"
    ],
    "order": 3,
    "storyPages": [
      {
        "pageNumber": 1,
        "name": "El Arte de las Instrucciones",
        "text": "Ahora que sabes guardar tesoros, es hora de dar órdenes. Cada conjuro en Java es una instrucción que el compilador entiende. Aprende a dirigir tu poder para que el código haga exactamente lo que quieres, ¡y el mundo digital se doblegará ante ti!",
        "imageUrl": ""
      }
    ],
    "theory": "En el corazón de todo programa Java reside el método main, el punto de entrada donde comienza la ejecución del hechizo. Como un portal mágico, este método especial es donde el sistema invoca tu programa.\n\nLas instrucciones en Java son como conjuros individuales que se ejecutan uno tras otro. System.out.println() es uno de los hechizos más fundamentales, permitiendo que tu programa se comunique con el mundo exterior mostrando mensajes en la consola.\n\nCada instrucción debe terminar con un punto y coma, como el sello final de un conjuro.",
    "objectives": [
      {
        "type": "theory",
        "description": "Aprende sobre instrucciones y estructura de programas.",
        "target": 1
      },
      {
        "type": "questions",
        "description": "Responde correctamente 3 preguntas sobre instrucciones.",
        "target": 3,
        "questionIds": [
          "q_java_intro_4",
          "q_java_tipos_3",
          "q_java_operadores_1"
        ]
      }
    ]
  },
  {
    "id": "mision_batalla_1",
    "name": "Batalla Inicial: El Guardián Novato",
    "description": "Enfrenta tu primer desafío combinando tus conocimientos básicos de Java.",
    "zone": "Arena de Compilación",
    "levelRequired": 1,
    "status": "bloqueada",
    "isRepeatable": true,
    "type": "batalla",
    "requirements": {
      "completedMissionId": "mision_1_3"
    },
    "rewards": {
      "id": "reward_mision_batalla_1",
      "name": "Recompensa de Batalla Inicial",
      "description": "Gran recompensa por vencer al Guardián Novato",
      "type": "experience",
      "value": 100,
      "conditions": {}
    },
    "unlocks": [
      "mision_2_1"
    ],
    "order": 4,
    "storyPages": [
      {
        "pageNumber": 1,
        "name": "Batalla Inicial: El Guardián Novato",
        "text": "El Primer Error Sintáctico ha aparecido, una abominación formada por tus propias dudas y olvidos. ¡Demuestra que estás listo para ser un Guardián del Código, combinando todo lo aprendido hasta ahora para derrotarlo!",
        "imageUrl": ""
      }
    ],
    "theory": "Esta es tu primera gran prueba. Demuestra que has absorbido los fundamentos de Java. La batalla será contra tus propias dudas, y solo la claridad de tu conocimiento te llevará a la victoria.",
    "objectives": [
      {
        "type": "batalla",
        "description": "Responde correctamente 9 preguntas sobre los fundamentos de Java.",
        "target": 9,
        "questionIds": [
          "q_java_intro_1",
          "q_java_intro_2",
          "q_java_intro_3",
          "q_java_intro_4",
          "q_java_tipos_1",
          "q_java_tipos_2",
          "q_java_tipos_3",
          "q_java_variables_1",
          "q_java_operadores_1"
        ],
        "battleConfig": {
          "enemyId": "enemigo_syntax_error",
          "questionIds": [
            "q_java_intro_1",
            "q_java_intro_2",
            "q_java_intro_3",
            "q_java_intro_4",
            "q_java_tipos_1",
            "q_java_tipos_2",
            "q_java_tipos_3",
            "q_java_variables_1",
            "q_java_operadores_1"
          ]
        }
      }
    ]
  },
  {
    "id": "mision_2_1",
    "name": "La Lógica de las Decisiones",
    "description": "Aprende a controlar el flujo de tu programa con las estructuras condicionales.",
    "zone": "Cuevas del Condicional",
    "levelRequired": 2,
    "status": "bloqueada",
    "isRepeatable": false,
    "requirements": {
      "completedMissionId": "mision_batalla_1"
    },
    "rewards": {
      "id": "reward_mision_2_1",
      "name": "Recompensa de Decisiones",
      "description": "Experiencia y monedas por dominar las decisiones",
      "type": "experience",
      "value": 45,
      "conditions": {}
    },
    "unlocks": [
      "mision_2_2"
    ],
    "order": 5,
    "storyPages": [
      {
        "pageNumber": 1,
        "name": "La Lógica de las Decisiones",
        "text": "Has superado tu primera prueba. Ahora, el camino se bifurca. Necesitas aprender a tomar decisiones en tu código, a guiarlo por diferentes senderos según las circunstancias. Las estructuras condicionales serán tu mapa y brújula.",
        "imageUrl": ""
      }
    ],
    "theory": "En el mundo real, tomamos decisiones constantemente: 'si llueve, cojo un paraguas'. En programación, es igual. Las estructuras condicionales (`if`, `else if`, `else`) permiten a tu programa elegir diferentes caminos de ejecución basados en si una condición es verdadera o falsa.\n\nLos operadores lógicos (`&&` (AND), `||` (OR), `!` (NOT)) te permiten combinar múltiples condiciones para decisiones más complejas.",
    "objectives": [
      {
        "type": "theory",
        "description": "Comprende las estructuras de control condicionales.",
        "target": 1
      },
      {
        "type": "questions",
        "description": "Responde correctamente 3 preguntas sobre condicionales y lógica.",
        "target": 3,
        "questionIds": [
          "q_java_operadores_2",
          "q_java_operadores_3",
          "q_java_control_1"
        ]
      }
    ]
  },
  {
    "id": "mision_2_2",
    "name": "Los Ciclos del Tiempo",
    "description": "Aprende a repetir acciones eficientemente con los bucles en Java.",
    "zone": "Cuevas del Condicional",
    "levelRequired": 2,
    "status": "bloqueada",
    "isRepeatable": false,
    "requirements": {
      "completedMissionId": "mision_2_1"
    },
    "rewards": {
      "experience": 50,
      "coins": 40,
      "items": [],
      "unlocks": [
        "mision_2_3"
      ]
    },
    "order": 6,
    "storyPages": [
      {
        "pageNumber": 1,
        "name": "Los Ciclos del Tiempo",
        "text": "Algunas tareas en Algorithmia son repetitivas, como un encantamiento que debe ser recitado muchas veces. Los bucles son los hechizos que te permitirán automatizar estas repeticiones, ahorrando energía y tiempo en tu viaje.",
        "imageUrl": ""
      }
    ],
    "theory": "Imagínate que necesitas hacer algo muchas veces, como contar hasta 100 o procesar todos los nombres de una lista. Para eso existen los bucles.\n\nLos bucles `for` son ideales cuando sabes cuántas veces quieres repetir algo. Los bucles `while` se usan cuando quieres repetir algo mientras una condición sea verdadera.\n\nTambién aprenderás a usar `break` para salir de un bucle de repente y `continue` para saltar una iteración y pasar a la siguiente.",
    "objectives": [
      {
        "type": "theory",
        "description": "Domina las estructuras de control repetitivas.",
        "target": 1
      },
      {
        "type": "questions",
        "description": "Responde correctamente 3 preguntas sobre bucles.",
        "target": 3,
        "questionIds": [
          "q_java_control_2",
          "q_java_control_3",
          "q_java_control_4"
        ]
      }
    ]
  },
  {
    "id": "mision_2_3",
    "name": "El Almacén de Colecciones",
    "description": "Organiza grandes cantidades de datos con arrays y colecciones.",
    "zone": "Cuevas del Condicional",
    "levelRequired": 2,
    "status": "bloqueada",
    "isRepeatable": false,
    "requirements": {
      "completedMissionId": "mision_2_2"
    },
    "rewards": {
      "experience": 55,
      "coins": 45,
      "items": [],
      "unlocks": [
        "mision_batalla_2"
      ]
    },
    "order": 7,
    "storyPages": [
      {
        "pageNumber": 1,
        "name": "El Almacén de Colecciones",
        "text": "Tu misión te exige manejar cada vez más información. Necesitas técnicas para almacenar y organizar estos datos de forma eficiente, como un experto bibliotecario organiza sus pergaminos. Los arrays y las colecciones son tus herramientas para este desafío.",
        "imageUrl": ""
      }
    ],
    "theory": "Cuando tienes muchos datos del mismo tipo, como una lista de nombres de jugadores o una colección de puntuaciones, no puedes usar una variable para cada uno. Aquí es donde entran los arrays y las colecciones.\n\nLos arrays son como estanterías fijas para tus datos. Las colecciones, como los `ArrayList`, son como mochilas mágicas que pueden expandirse o encogerse según lo necesites.",
    "objectives": [
      {
        "type": "theory",
        "description": "Aprende a usar arrays y colecciones básicas.",
        "target": 1
      },
      {
        "type": "questions",
        "description": "Responde correctamente 3 preguntas sobre arrays y colecciones.",
        "target": 3,
        "questionIds": [
          "q_java_control_5",
          "q_java_control_6",
          "q_java_arrays_1"
        ]
      }
    ]
  },
  {
    "id": "mision_batalla_2",
    "name": "Batalla Intermedia: El Lógico Estratega",
    "description": "Pon a prueba tu habilidad para controlar el flujo de tu programa y gestionar colecciones.",
    "zone": "Arena de Compilación",
    "levelRequired": 2,
    "status": "bloqueada",
    "isRepeatable": true,
    "type": "batalla",
    "requirements": {
      "completedMissionId": "mision_2_3"
    },
    "rewards": {
      "experience": 150,
      "coins": 75,
      "items": [
        "Guantelete de la Lógica"
      ],
      "unlocks": [
        "mision_3_1"
      ]
    },
    "order": 8,
    "storyPages": [
      {
        "pageNumber": 1,
        "name": "Batalla Intermedia: El Lógico Estratega",
        "text": "El segundo Error Sintáctico se alza, una entidad que busca confundir la lógica de tu código. Demuestra tu dominio de las decisiones y las repeticiones para superarlo, usando todo el poder de los arrays y los bucles.",
        "imageUrl": ""
      }
    ],
    "theory": "Esta batalla requiere una estrategia clara y un dominio de los bucles y las condicionales, así como el manejo básico de colecciones. Cada decisión y cada repetición deben ser impecables para alcanzar la victoria.",
    "objectives": [
      {
        "type": "batalla",
        "description": "Responde correctamente 9 preguntas sobre estructuras de control y arrays.",
        "target": 9,
        "questionIds": [
          "q_java_operadores_2",
          "q_java_operadores_3",
          "q_java_control_1",
          "q_java_control_2",
          "q_java_control_3",
          "q_java_control_4",
          "q_java_control_5",
          "q_java_control_6",
          "q_java_arrays_1"
        ],
        "battleConfig": {
          "enemyId": "enemigo_illegalargumentexception",
          "questionIds": [
            "q_java_operadores_2",
            "q_java_operadores_3",
            "q_java_control_1",
            "q_java_control_2",
            "q_java_control_3",
            "q_java_control_4",
            "q_java_control_5",
            "q_java_control_6",
            "q_java_arrays_1"
          ]
        }
      }
    ]
  },
  {
    "id": "mision_3_1",
    "name": "Los Pilares de los Objetos",
    "description": "Descubre el poder de la Programación Orientada a Objetos (POO) y cómo modelar el mundo.",
    "zone": "Fortaleza del Objeto",
    "levelRequired": 3,
    "status": "bloqueada",
    "isRepeatable": false,
    "requirements": {
      "completedMissionId": "mision_batalla_2"
    },
    "rewards": {
      "experience": 60,
      "coins": 50,
      "items": [],
      "unlocks": [
        "mision_3_2"
      ]
    },
    "order": 9,
    "storyPages": [
      {
        "pageNumber": 1,
        "name": "Los Pilares de los Objetos",
        "text": "Las amenazas de Algorithmia se vuelven más complejas, y tu código debe adaptarse. Es hora de aprender el arte de la Programación Orientada a Objetos (POO), un método para construir tu mundo digital con piezas modulares y vivas.",
        "imageUrl": ""
      }
    ],
    "theory": "La Programación Orientada a Objetos (POO) es la filosofía central de Java. Piensa en el mundo real: todo está hecho de 'objetos' (un coche, una persona, un árbol). La POO nos permite representar estos objetos en nuestro código.\n\nUna **clase** es como el plano para construir objetos (el plano de un coche).\nUn **objeto** es una instancia de una clase (el coche real que construyes con el plano).\nLos **atributos** son las características del objeto (color, velocidad del coche).\nLos **métodos** son las acciones que el objeto puede realizar (acelerar, frenar el coche).\nUn **constructor** es un método especial para crear y configurar un nuevo objeto.",
    "objectives": [
      {
        "type": "theory",
        "description": "Aprende los conceptos fundamentales de la POO.",
        "target": 1
      },
      {
        "type": "questions",
        "description": "Responde correctamente 3 preguntas sobre POO básica.",
        "target": 3,
        "questionIds": [
          "q_java_poo_1",
          "q_java_poo_2",
          "q_constructor_4"
        ]
      }
    ]
  },
  {
    "id": "mision_3_2",
    "name": "El Arte de la Herencia",
    "description": "Descubre cómo las clases pueden heredar características y comportamientos de otras.",
    "zone": "Fortaleza del Objeto",
    "levelRequired": 3,
    "status": "bloqueada",
    "isRepeatable": false,
    "requirements": {
      "completedMissionId": "mision_3_1"
    },
    "rewards": {
      "experience": 65,
      "coins": 55,
      "items": [],
      "unlocks": [
        "mision_3_3"
      ]
    },
    "order": 10,
    "storyPages": [
      {
        "pageNumber": 1,
        "name": "El Arte de la Herencia",
        "text": "En Algorithmia, las familias de código comparten sus secretos. La herencia es el hechizo que permite que una clase comparta sus características con otras, creando jerarquías de poder y conocimiento.",
        "imageUrl": ""
      }
    ],
    "theory": "La **herencia** es uno de los pilares de la POO. Permite que una clase (la **subclase** o clase hija) adquiera los atributos y métodos de otra clase (la **superclase** o clase padre).\n\nEsto promueve la reutilización de código y la creación de jerarquías lógicas. Por ejemplo, un 'Coche' puede heredar de un 'Vehículo', obteniendo automáticamente características como 'velocidad' y 'color', y añadiendo sus propias especialidades.",
    "objectives": [
      {
        "type": "theory",
        "description": "Comprende el concepto de herencia en POO.",
        "target": 1
      },
      {
        "type": "questions",
        "description": "Responde correctamente 3 preguntas sobre herencia.",
        "target": 3,
        "questionIds": [
          "q_java_poo_3",
          "q_java_poo_4",
          "q_java_herencia_1"
        ]
      }
    ]
  },
  {
    "id": "mision_3_3",
    "name": "Las Formas del Polimorfismo",
    "description": "Explora cómo un mismo objeto puede tomar múltiples formas y comportamientos.",
    "zone": "Fortaleza del Objeto",
    "levelRequired": 3,
    "status": "bloqueada",
    "isRepeatable": false,
    "requirements": {
      "completedMissionId": "mision_3_2"
    },
    "rewards": {
      "experience": 70,
      "coins": 60,
      "items": [],
      "unlocks": [
        "mision_batalla_3"
      ]
    },
    "order": 11,
    "storyPages": [
      {
        "pageNumber": 1,
        "name": "Las Formas del Polimorfismo",
        "text": "El mundo de Algorithmia es diverso, y a veces, una misma acción debe manifestarse de diferentes maneras. El polimorfismo es el arte de hacer que tus objetos tomen múltiples formas, permitiéndoles comportarse de manera única según el contexto.",
        "imageUrl": ""
      }
    ],
    "theory": "El **polimorfismo** significa 'muchas formas'. En Java, esto se manifiesta de dos maneras principales:\n\n**Sobrecarga (Overloading)**: Múltiples métodos con el mismo nombre en la misma clase, pero con diferentes parámetros (como una varita mágica que puede lanzar diferentes hechizos según lo que le digas).\n\n**Sobreescritura (Overriding)**: Una subclase proporciona una implementación diferente de un método que ya existe en su superclase (como una familia de magos donde cada uno tiene su propia forma de lanzar el mismo hechizo).",
    "objectives": [
      {
        "type": "theory",
        "description": "Aprende sobre polimorfismo y sus tipos.",
        "target": 1
      },
      {
        "type": "questions",
        "description": "Responde correctamente 3 preguntas sobre polimorfismo.",
        "target": 3,
        "questionIds": [
          "q_java_herencia_2",
          "q_java_polimorfismo_1",
          "q_java_polimorfismo_2"
        ]
      }
    ]
  },
  {
    "id": "mision_batalla_3",
    "name": "Batalla Avanzada: El Maestro de Objetos",
    "description": "Demuestra tu comprensión de la Programación Orientada a Objetos y sus principios fundamentales.",
    "zone": "Arena de Compilación",
    "levelRequired": 3,
    "status": "bloqueada",
    "isRepeatable": true,
    "type": "batalla",
    "requirements": {
      "completedMissionId": "mision_3_3"
    },
    "rewards": {
      "experience": 200,
      "coins": 100,
      "items": [
        "Amuleto del Encapsulamiento"
      ],
      "unlocks": [
        "mision_4_1"
      ]
    },
    "order": 12,
    "storyPages": [
      {
        "pageNumber": 1,
        "name": "Batalla Avanzada: El Maestro de Objetos",
        "text": "El tercer Error Sintáctico es una manifestación de la complejidad mal gestionada en el código. Solo dominando los principios de la POO podrás enfrentarlo, modelando el mundo digital con la sabiduría de un verdadero Guardián del Código.",
        "imageUrl": ""
      }
    ],
    "theory": "Esta batalla exige una comprensión profunda de las clases, objetos, herencia y polimorfismo. Un código bien estructurado y una clara aplicación de los principios de la POO son tus mayores armas.",
    "objectives": [
      {
        "type": "batalla",
        "description": "Responde correctamente 9 preguntas sobre los principios de la POO.",
        "target": 9,
        "questionIds": [
          "q_java_poo_1",
          "q_java_poo_2",
          "q_constructor_4",
          "q_java_poo_3",
          "q_java_poo_4",
          "q_java_herencia_1",
          "q_java_herencia_2",
          "q_java_polimorfismo_1",
          "q_java_polimorfismo_2"
        ],
        "battleConfig": {
          "enemyId": "enemigo_classnotfoundexception",
          "questionIds": [
            "q_java_poo_1",
            "q_java_poo_2",
            "q_constructor_4",
            "q_java_poo_3",
            "q_java_poo_4",
            "q_java_herencia_1",
            "q_java_herencia_2",
            "q_java_polimorfismo_1",
            "q_java_polimorfismo_2"
          ]
        }
      }
    ]
  }
]