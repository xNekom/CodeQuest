[
  {
    "id": "mision_1_1",
    "title": "El Despertar del Guardián",
    "description": "Descubre tu destino como Guardián del Código en el reino de Algorithmia y aprende los fundamentos de la programación.",
    "zone": "Bosque de los Algoritmos",
    "levelRequired": 1,
    "status": "disponible",
    "isRepeatable": false,
    "rewards": {
      "experience": 75,
      "coins": 20,
      "items": [],
      "unlocks": [
        "mision_1_2"
      ]
    },
    "storyPages": [
      {
        "pageNumber": 1,
        "title": "El Despertar del Guardián",
        "text": "En las brumas del amanecer, te despiertas en el corazón de Algorithmia. El aire vibra con energía digital, y puedes sentir que algo terrible ha perturbado el equilibrio del reino. Los Errores Sintácticos han comenzado a corromper el Código Fuente, amenazando con sumir el mundo en el caos.\n\nComo nuevo Guardián del Código, tu misión es clara: debes aprender las artes ancestrales de la programación para restaurar el orden. Tu primer desafío te espera en el Bosque de los Algoritmos, donde los conceptos fundamentales de la programación cobran vida.",
        "imageUrl": ""
      },
      {
        "pageNumber": 2,
        "title": "El Oráculo de Java",
        "text": "Mientras caminas por el sendero de cristal que atraviesa el bosque, encuentras una antigua estructura: el Oráculo de Java. Sus paredes están cubiertas de runas que brillan con un suave resplandor azul. Una voz sabia resuena en tu mente:\n\n'Joven Guardián, para dominar el arte de la programación, primero debes comprender que un programa es como un conjuro: una serie de instrucciones precisas que le dicen a la máquina qué hacer. Java, el lenguaje que aprenderás, es especial porque puede ejecutarse en cualquier reino digital.'",
        "imageUrl": ""
      }
    ],
    "order": 1,
    "examples": [
      "// Mi primer mensaje en Java\nSystem.out.println(\"¡Hola, mundo de la programación!\");",
      "// Mostrando diferentes mensajes\nSystem.out.println(\"Bienvenido a Java\");\nSystem.out.println(\"La programación es divertida\");\nSystem.out.println(\"¡Vamos a aprender juntos!\");"
    ],
    "objectives": [
      {
        "type": "theory",
        "description": "Completa la lección teórica sobre programación básica.",
        "target": 1
      },
      {
        "type": "questions",
        "description": "Responde correctamente 3 preguntas sobre programación.",
        "target": 3,
        "questionIds": [
          "pregunta_que_es_programar",
          "pregunta_por_que_java",
          "pregunta_que_hace_programa"
        ]
      }
    ],
    "technicalExplanation": "La programación es el proceso de crear instrucciones que un ordenador puede seguir para resolver problemas o realizar tareas.\n\nConceptos fundamentales:\n• Programa: Conjunto de instrucciones escritas en un lenguaje que el ordenador entiende\n• Lenguaje de programación: Sistema de comunicación entre humanos y máquinas\n• Java: Lenguaje popular, fácil de aprender y multiplataforma\n• Multiplataforma: Capacidad de ejecutarse en diferentes sistemas operativos\n\nJava es ideal para principiantes porque:\n• Sintaxis clara y legible\n• Amplia comunidad y recursos de aprendizaje\n• Usado en aplicaciones web, móviles y empresariales",
    "theory": "En el reino mágico de Algorithmia, donde la tecnología y la magia se entrelazan, existe un arte ancestral llamado 'Programación'. Imagina que eres un mago que puede hablar con los ordenadores y darles órdenes para que hagan cosas increíbles.\n\nUn programa es como una receta de cocina muy detallada: una lista de pasos que le decimos al ordenador para que realice una tarea. Por ejemplo, podríamos crear un programa que calcule cuánto dinero necesitas ahorrar cada mes para comprar algo especial.\n\nJava es uno de los lenguajes de programación más populares del mundo. Lo especial de Java es que es como un idioma universal: un programa escrito en Java puede funcionar en casi cualquier ordenador, ya sea Windows, Mac o Linux. ¡Es como tener un hechizo que funciona en cualquier reino!"
  },
  {
    "id": "mision_1_2",
    "title": "Los Secretos de las Variables",
    "description": "Aprende a manejar las variables, los contenedores mágicos que guardan información en Algorithmia.",
    "zone": "Bosque de los Algoritmos",
    "levelRequired": 1,
    "status": "bloqueada",
    "isRepeatable": false,
    "requirements": {
      "completedMissionId": "mision_1_1"
    },
    "rewards": {
      "experience": 75,
      "coins": 25,
      "items": [],
      "unlocks": [
        "mision_1_3"
      ]
    },
    "storyPages": [
      {
        "pageNumber": 1,
        "title": "La Biblioteca de los Contenedores",
        "text": "Siguiendo las indicaciones del Oráculo, llegas a una majestuosa biblioteca construida en el corazón de un árbol milenario. Sus estantes están llenos de contenedores cristalinos de diferentes formas y colores, cada uno etiquetado con runas misteriosas.\n\nUn anciano bibliotecario, con barba que brilla como código binario, se acerca a ti: 'Bienvenido, joven Guardián. Estos son los Contenedores de Información, conocidos en el mundo mortal como variables. Cada uno puede guardar un tipo específico de dato, y son esenciales para cualquier hechizo de programación.'",
        "imageUrl": ""
      }
    ],
    "order": 2,
    "examples": [
      "// Creando variables básicas\nint miEdad = 18;\nString miNombre = \"Ana\";\nSystem.out.println(\"Hola, soy \" + miNombre);\nSystem.out.println(\"Tengo \" + miEdad + \" años\");",
      "// Diferentes tipos de variables\nint puntaje = 100;\nString juego = \"CodeQuest\";\ndouble tiempo = 45.5;\nboolean completado = true;\n\nSystem.out.println(\"Juego: \" + juego);\nSystem.out.println(\"Puntaje: \" + puntaje);"
    ],
    "theory": "En Algorithmia, los magos programadores descubrieron que necesitaban cajas especiales para guardar información. Estas cajas mágicas se llaman 'variables' y pueden contener diferentes tipos de tesoros.\n\nImagina que tienes diferentes tipos de cajas:\n• Una caja para números enteros (como tu edad: 15, 20, 100)\n• Una caja para palabras y frases (como tu nombre: \"María\", \"Hola mundo\")\n• Una caja para números con decimales (como tu altura: 1.65, 3.14)\n• Una caja para respuestas de sí o no (como: verdadero, falso)\n\nEn Java, antes de usar una caja (variable), debemos decirle qué tipo de tesoro va a guardar. Es como poner una etiqueta en la caja que dice \"Solo números\" o \"Solo palabras\".",
    "objectives": [
      {
        "type": "theory",
        "description": "Completa la lección teórica sobre programación básica.",
        "target": 1
      },
      {
        "type": "questions",
        "description": "Responde correctamente 3 preguntas sobre programación.",
        "target": 3,
        "questionIds": [
          "pregunta_que_es_una_variable",
          "pregunta_tipo_dato_edad_java",
          "pregunta_instruccion_hola_mundo_java"
        ]
      }
    ],
    "technicalExplanation": "Una variable es un contenedor que almacena datos en la memoria del ordenador. Cada variable tiene un nombre único y un tipo de dato específico.\n\nTipos de datos básicos en Java:\n• int: números enteros (ej: 42, -10, 0)\n• String: texto entre comillas (ej: \"Hola\", \"Java\")\n• double: números decimales (ej: 3.14, -2.5)\n• boolean: verdadero o falso (true/false)\n\nSintaxis básica:\ntipo nombreVariable = valor;\n\nEjemplo: int edad = 20;"
  },
  {
    "id": "mision_1_3",
    "title": "El Arte de las Instrucciones",
    "description": "Domina las instrucciones básicas y aprende a crear tu primer programa completo en Java.",
    "zone": "Bosque de los Algoritmos",
    "levelRequired": 1,
    "status": "bloqueada",
    "isRepeatable": false,
    "requirements": {
      "completedMissionId": "mision_1_2"
    },
    "objectives": [
      {
        "type": "theory",
        "description": "Aprende sobre instrucciones y estructura de programas.",
        "target": 1
      },
      {
        "type": "questions",
        "description": "Responde correctamente 3 preguntas sobre instrucciones.",
        "target": 3,
        "questionIds": [
          "pregunta_estructura_principal_java_clase_main",
          "pregunta_instruccion_hola_mundo_java",
          "pregunta_que_es_un_programa"
        ]
      }
    ],
    "rewards": {
      "experience": 75,
      "coins": 30,
      "items": [],
      "unlocks": [
        "mision_batalla_1_1"
      ]
    },
    "theory": "En el corazón de todo programa Java reside el método main, el punto de entrada donde comienza la ejecución del hechizo. Como un portal mágico, este método especial es donde el sistema invoca tu programa y donde todas las aventuras de código comienzan.\n\nLas instrucciones en Java son como conjuros individuales que se ejecutan uno tras otro. System.out.println() es uno de los hechizos más fundamentales, permitiendo que tu programa se comunique con el mundo exterior mostrando mensajes en la consola. Cada instrucción debe terminar con un punto y coma, como el sello final de un conjuro.",
    "technicalExplanation": "El método main es el punto de entrada de cualquier aplicación Java. Su firma debe ser exactamente: public static void main(String[] args)\n\nComponentes del método main:\n• public: modificador de acceso que permite acceso desde cualquier lugar\n• static: permite llamar al método sin crear una instancia de la clase\n• void: indica que el método no retorna ningún valor\n• String[] args: parámetro que recibe argumentos de línea de comandos\n\nSystem.out.println() es un método para imprimir texto en la consola estándar, agregando un salto de línea al final.",
    "examples": [
      "// Programa básico con método main\npublic class MiPrograma {\n    public static void main(String[] args) {\n        System.out.println(\"¡Mi primer programa!\");\n        System.out.println(\"Java es genial\");\n    }\n}",
      "// Programa con variables y salida\npublic class Calculadora {\n    public static void main(String[] args) {\n        int numero1 = 15;\n        int numero2 = 25;\n        int resultado = numero1 + numero2;\n        System.out.println(\"El resultado es: \" + resultado);\n    }\n}"
    ],
    "storyPages": [
      {
        "pageNumber": 1,
        "title": "El Altar de Ejecución",
        "text": "En el centro del bosque, descubres un altar circular rodeado de pilares de código luminoso. Este es el Altar de Ejecución, donde todos los programas Java cobran vida. El bibliotecario te explica: 'Aquí es donde reside el método main, el corazón palpitante de todo programa Java. Sin él, ningún hechizo puede ejecutarse.'\n\nObservas cómo las runas se organizan en patrones específicos, cada una representando una instrucción que será ejecutada en orden. Es hora de crear tu primer programa completo.",
        "imageUrl": ""
      }
    ],
    "order": 3
  },
  {
    "id": "mision_2_1",
    "title": "El Laberinto de las Condiciones",
    "description": "Aprende a tomar decisiones en tus programas usando estructuras condicionales.",
    "zone": "Valle de las Decisiones",
    "levelRequired": 2,
    "status": "bloqueada",
    "isRepeatable": false,
    "requirements": {
      "completedMissionId": "mision_batalla_1_1"
    },
    "objectives": [
      {
        "type": "theory",
        "description": "Aprende sobre estructuras condicionales.",
        "target": 1
      },
      {
        "type": "questions",
        "description": "Responde correctamente 3 preguntas sobre condicionales.",
        "target": 3,
        "questionIds": [
          "pregunta_que_es_una_variable",
          "pregunta_tipo_dato_edad_java",
          "pregunta_instruccion_hola_mundo_java"
        ]
      }
    ],
    "rewards": {
      "experience": 75,
      "coins": 35,
      "items": [],
      "unlocks": [
        "mision_2_2"
      ]
    },
    "theory": "En el Valle de las Decisiones de Algorithmia, los caminos se bifurcan constantemente, y solo los Guardianes que dominan el arte de las decisiones pueden navegar exitosamente. Las estructuras condicionales son como encrucijadas mágicas que permiten a tu programa elegir diferentes caminos basándose en condiciones específicas.\n\nLa estructura if es la más fundamental: evalúa una condición y ejecuta un bloque de código solo si esa condición es verdadera. Es como un guardián que solo permite el paso si se cumple cierta regla. Puedes expandir esto con else para manejar el caso contrario, y else if para múltiples condiciones.",
    "technicalExplanation": "Las estructuras condicionales permiten que un programa tome decisiones basadas en condiciones lógicas. En Java, las principales estructuras son:\n\n• if: ejecuta código si la condición es true\n• if-else: ejecuta un bloque si es true, otro si es false\n• if-else if-else: evalúa múltiples condiciones en secuencia\n• switch: compara una variable con múltiples valores\n\nLas condiciones se evalúan como expresiones boolean y pueden usar operadores de comparación (==, !=, <, >, <=, >=) y lógicos (&&, ||, !).",
    "examples": [
      "// Estructura if básica\nint edad = 18;\nif (edad >= 18) {\n    System.out.println(\"Eres mayor de edad\");\n}",
      "// Estructura if-else-if\nint puntuacion = 85;\nif (puntuacion >= 90) {\n    System.out.println(\"Excelente\");\n} else if (puntuacion >= 70) {\n    System.out.println(\"Bueno\");\n} else {\n    System.out.println(\"Necesitas mejorar\");\n}"
    ],
    "storyPages": [
      {
        "pageNumber": 1,
        "title": "El Valle de las Decisiones",
        "text": "Tras tu victoria contra el Bug del Punto y Coma, el camino te lleva hacia un valle misterioso donde los senderos se multiplican infinitamente. Cada bifurcación está marcada con cristales que brillan según diferentes condiciones. Un sabio centinela te explica: 'Este es el Valle de las Decisiones, donde aprenderás a guiar a tus programas por el camino correcto usando el poder de las condiciones.'",
        "imageUrl": ""
      }
    ],
    "order": 5
  },
  {
    "id": "mision_2_2",
    "title": "Los Ciclos del Tiempo",
    "description": "Domina los bucles y aprende a repetir acciones de manera eficiente en tus programas.",
    "zone": "Valle de las Decisiones",
    "levelRequired": 2,
    "status": "bloqueada",
    "isRepeatable": false,
    "requirements": {
      "completedMissionId": "mision_2_1"
    },
    "objectives": [
      {
        "type": "theory",
        "description": "Aprende sobre bucles y repetición.",
        "target": 1
      },
      {
        "type": "questions",
        "description": "Responde correctamente 3 preguntas sobre bucles.",
        "target": 3,
        "questionIds": [
          "pregunta_que_es_un_programa",
          "pregunta_que_es_una_variable",
          "pregunta_estructura_principal_java_clase_main"
        ]
      }
    ],
    "rewards": {
      "experience": 75,
      "coins": 40,
      "items": [],
      "unlocks": [
        "mision_2_3"
      ]
    },
    "theory": "En las profundidades del Valle de las Decisiones, descubres los Círculos del Tiempo, donde las acciones pueden repetirse una y otra vez hasta que se cumpla una condición específica. Los bucles son como rituales mágicos que permiten ejecutar el mismo conjunto de instrucciones múltiples veces sin tener que escribirlas repetidamente.\n\nExisten tres tipos principales de bucles en Java: for (cuando sabes exactamente cuántas veces repetir), while (cuando repites mientras una condición sea verdadera), y do-while (similar a while, pero garantiza al menos una ejecución). Cada uno tiene su propósito específico en la magia de la programación.",
    "technicalExplanation": "Los bucles permiten ejecutar repetidamente un bloque de código. Java ofrece tres tipos principales:\n\n• for: ideal cuando conoces el número de iteraciones\n  Sintaxis: for(inicialización; condición; incremento)\n• while: repite mientras la condición sea true\n  Sintaxis: while(condición)\n• do-while: ejecuta al menos una vez, luego verifica la condición\n  Sintaxis: do { } while(condición)\n\nEs importante evitar bucles infinitos asegurándose de que la condición eventualmente se vuelva false.",
    "examples": [
      "// Bucle for\nfor (int i = 1; i <= 5; i++) {\n    System.out.println(\"Iteración: \" + i);\n}",
      "// Bucle while\nint contador = 0;\nwhile (contador < 3) {\n    System.out.println(\"Contador: \" + contador);\n    contador++;\n}"
    ],
    "storyPages": [
      {
        "pageNumber": 1,
        "title": "Los Círculos del Tiempo",
        "text": "Siguiendo el sendero de cristales luminosos, llegas a una zona donde el tiempo parece moverse en círculos. Aquí, las mismas acciones se repiten una y otra vez, creando patrones hipnóticos en el aire. Un mago temporal te recibe: 'Bienvenido a los Círculos del Tiempo, donde aprenderás el poder de la repetición controlada. Los bucles son la clave para realizar tareas complejas con elegancia y eficiencia.'",
        "imageUrl": ""
      }
    ],
    "order": 6
  },
  {
    "id": "mision_2_3",
    "title": "El Santuario de los Métodos",
    "description": "Aprende a organizar tu código creando métodos reutilizables y modulares.",
    "zone": "Valle de las Decisiones",
    "levelRequired": 2,
    "status": "bloqueada",
    "isRepeatable": false,
    "requirements": {
      "completedMissionId": "mision_2_2"
    },
    "objectives": [
      {
        "type": "theory",
        "description": "Aprende sobre métodos y modularización.",
        "target": 1
      },
      {
        "type": "questions",
        "description": "Responde correctamente 3 preguntas sobre métodos.",
        "target": 3,
        "questionIds": [
          "pregunta_multiplataforma_java",
          "pregunta_tipo_dato_edad_java",
          "pregunta_instruccion_hola_mundo_java"
        ]
      }
    ],
    "rewards": {
      "experience": 75,
      "coins": 45,
      "items": [],
      "unlocks": [
        "mision_batalla_2_1"
      ]
    },
    "theory": "En lo alto del Valle de las Decisiones se alza el Santuario de los Métodos, un templo donde los Guardianes aprenden a dividir sus hechizos en componentes más pequeños y manejables. Los métodos son como conjuros especializados que pueden ser invocados cuando se necesiten, permitiendo organizar el código de manera clara y reutilizable.\n\nUn método en Java es un bloque de código que realiza una tarea específica y puede ser llamado desde otras partes del programa. Puede recibir parámetros (información de entrada) y puede devolver un valor (información de salida). Esto permite crear código más limpio, fácil de mantener y libre de repetición.",
    "technicalExplanation": "Los métodos son bloques de código reutilizables que realizan tareas específicas. Su sintaxis en Java es:\n\n[modificadores] tipoRetorno nombreMétodo(parámetros) {\n    // código del método\n    return valor; // si no es void\n}\n\nComponentes:\n• Modificadores: public, private, static, etc.\n• Tipo de retorno: tipo de dato que devuelve (void si no devuelve nada)\n• Nombre: identificador del método\n• Parámetros: valores de entrada (opcionales)\n\nLos métodos promueven la reutilización de código y la modularización.",
    "examples": [
      "// Método simple sin parámetros\npublic static void saludar() {\n    System.out.println(\"¡Hola desde el método!\");\n}\n\n// Llamada al método\nsaludar();",
      "// Método con parámetros y valor de retorno\npublic static int sumar(int a, int b) {\n    return a + b;\n}\n\n// Uso del método\nint resultado = sumar(5, 3);\nSystem.out.println(\"Resultado: \" + resultado);"
    ],
    "storyPages": [
      {
        "pageNumber": 1,
        "title": "El Santuario de los Métodos",
        "text": "Al final del valle, una escalinata de mármol te conduce hacia un templo majestuoso donde resuenan ecos de conjuros organizados. El Maestro de Métodos, un sabio de túnica dorada, te recibe: 'Aquí aprenderás a dividir tus hechizos en componentes especializados. Cada método es como un conjuro que puede ser invocado cuando lo necesites, haciendo tu magia más poderosa y organizada.'",
        "imageUrl": ""
      }
    ],
    "order": 7
  },
  {
    "id": "mision_batalla_1_1",
    "title": "Batalla: El Bug del Punto y Coma",
    "description": "Enfrenta tu primera batalla contra las fuerzas corruptoras. Derrota al Bug del Punto y Coma con tus conocimientos.",
    "zone": "Campo de Batalla",
    "levelRequired": 1,
    "status": "bloqueada",
    "isRepeatable": true,
    "requirements": {
      "completedMissionId": "mision_1_3"
    },
    "objectives": [
      {
        "type": "batalla",
        "description": "Derrota al Bug del Punto y Coma respondiendo preguntas.",
        "target": 1,
        "battleConfig": {
          "enemyId": "enemigo_bug_del_punto_y_coma",
          "questionIds": [
            "pregunta_que_es_un_programa",
            "pregunta_multiplataforma_java",
            "pregunta_estructura_principal_java_clase_main"
          ],
          "playerHealthMultiplier": 1,
          "enemyAttackMultiplier": 0.8,
          "environment": "campo_bug"
        }
      }
    ],
    "rewards": {
      "experience": 175,
      "coins": 40,
      "items": [],
      "unlocks": [
        "mision_2_1"
      ]
    },
    "order": 4
  },
  {
    "id": "mision_batalla_2_1",
    "title": "Batalla: El NullPointerException",
    "description": "Enfrenta al temido NullPointerException, una de las criaturas más peligrosas del Valle de las Decisiones.",
    "zone": "Campo de Batalla",
    "levelRequired": 2,
    "status": "bloqueada",
    "isRepeatable": true,
    "requirements": {
      "completedMissionId": "mision_2_3"
    },
    "objectives": [
      {
        "type": "batalla",
        "description": "Derrota al NullPointerException con tus conocimientos avanzados.",
        "target": 1,
        "battleConfig": {
          "enemyId": "enemigo_nullpointerexception",
          "questionIds": [
            "pregunta_que_es_una_variable",
            "pregunta_tipo_dato_edad_java",
            "pregunta_instruccion_hola_mundo_java",
            "pregunta_estructura_principal_java_clase_main"
          ],
          "playerHealthMultiplier": 1,
          "enemyAttackMultiplier": 1,
          "environment": "campo_bug"
        }
      }
    ],
    "rewards": {
      "experience": 175,
      "coins": 50,
      "items": [],
      "unlocks": []
    },
    "order": 8
  }
]