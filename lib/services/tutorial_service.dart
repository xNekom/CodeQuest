import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../widgets/interactive_tutorial.dart';

class TutorialService {
  static const String _homeScreenTutorialKey = 'home_screen_tutorial_completed';

  static const String _missionsTutorialKey = 'missions_tutorial_completed';
  static const String _achievementsTutorialKey =
      'achievements_tutorial_completed';
  static const String _missionDetailTutorialKey =
      'mission_detail_tutorial_completed';
  static const String _theoryScreenTutorialKey =
      'theory_screen_tutorial_completed';
  static const String _welcomeTutorialKey = 'welcome_tutorial_completed';

  // Singleton pattern
  static final TutorialService _instance = TutorialService._internal();
  factory TutorialService() => _instance;
  TutorialService._internal();

  // Set para rastrear tutoriales ya verificados y evitar logs repetitivos
  static final Set<String> _checkedTutorials = <String>{};

  /// Verifica si un tutorial espec√≠fico ya fue completado
  Future<bool> isTutorialCompleted(String tutorialKey) async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool(tutorialKey) ?? false;
  }

  /// Marca un tutorial como completado
  Future<void> markTutorialCompleted(String tutorialKey) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(tutorialKey, true);
  }

  /// Resetea todos los tutoriales (para pruebas)
  Future<void> resetAllTutorials() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_homeScreenTutorialKey);

    await prefs.remove(_missionsTutorialKey);
    await prefs.remove(_achievementsTutorialKey);
    await prefs.remove(_missionDetailTutorialKey);
    await prefs.remove(_theoryScreenTutorialKey);
    await prefs.remove(_welcomeTutorialKey);
  }

  /// Tutorial para la pantalla principal (HomeScreen)
  static List<InteractiveTutorialStep> getHomeScreenTutorial({
    GlobalKey? profileKey,
    GlobalKey? missionsKey,
    GlobalKey? achievementsKey,
    GlobalKey? leaderboardKey,
    GlobalKey? adventureButtonKey,
    GlobalKey? shopButtonKey,
    GlobalKey? inventoryButtonKey,
    GlobalKey? codeExercisesButtonKey,
  }) {
    return [
      InteractiveTutorialStep(
        title: '¬°Bienvenido a CodeQuest! üöÄ',
        description:
            '¬°Hola, futuro programador! Te guiaremos paso a paso por todas las incre√≠bles funciones de CodeQuest. ¬°Prep√°rate para una aventura √©pica de aprendizaje!',
        icon: Icons.rocket_launch,
        showPulse: false,
      ),
      if (profileKey != null)
        InteractiveTutorialStep(
          title: 'Tu Avatar de Programador üë§',
          description:
              'Este es tu perfil personal donde puedes ver tu progreso, nivel actual, experiencia ganada y todas tus estad√≠sticas de aventurero. ¬°Cada l√≠nea de c√≥digo te hace m√°s fuerte!',
          icon: Icons.account_circle,
          targetKey: profileKey,
          showPulse: true,
        ),
      if (missionsKey != null)
        InteractiveTutorialStep(
          title: 'Panel de Estad√≠sticas üìä',
          description:
              'Aqu√≠ puedes monitorear tu progreso: preguntas respondidas, aciertos conseguidos, batallas ganadas y mucho m√°s. ¬°Cada n√∫mero cuenta tu historia de √©xito!',
          icon: Icons.analytics,
          targetKey: missionsKey,
          showPulse: true,
        ),
      if (adventureButtonKey != null)
        InteractiveTutorialStep(
          title: 'Portal de Aventuras üè∞',
          description:
              '¬°El coraz√≥n de CodeQuest! Aqu√≠ encontrar√°s misiones emocionantes que te ense√±ar√°n programaci√≥n de forma divertida. Cada misi√≥n es un nuevo desaf√≠o esper√°ndote.',
          icon: Icons.castle,
          targetKey: adventureButtonKey,
          showPulse: true,
        ),
      if (codeExercisesButtonKey != null)
        InteractiveTutorialStep(
          title: 'Laboratorio de C√≥digo üíª',
          description:
              'Tu espacio de pr√°ctica personal. Aqu√≠ puedes experimentar con c√≥digo, resolver ejercicios adicionales y perfeccionar tus habilidades sin presi√≥n.',
          icon: Icons.computer,
          targetKey: codeExercisesButtonKey,
          showPulse: true,
        ),
      if (shopButtonKey != null)
        InteractiveTutorialStep(
          title: 'Mercado del Aventurero üõí',
          description:
              'Gasta sabiamente las monedas que ganes completando misiones. Aqu√≠ encontrar√°s objetos √∫tiles, mejoras para tu personaje y sorpresas especiales.',
          icon: Icons.shopping_bag,
          targetKey: shopButtonKey,
          showPulse: true,
        ),
      if (inventoryButtonKey != null)
        InteractiveTutorialStep(
          title: 'Mochila del Programador üéí',
          description:
              'Tu colecci√≥n personal de objetos, herramientas y recompensas. Organiza y usa estrat√©gicamente todo lo que has conseguido en tus aventuras.',
          icon: Icons.backpack,
          targetKey: inventoryButtonKey,
          showPulse: true,
        ),
      if (leaderboardKey != null)
        InteractiveTutorialStep(
          title: 'Ranking de Leyendas üèÜ',
          description:
              '¬øTienes lo que se necesita para estar entre los mejores? Compite sanamente con otros programadores y demuestra tus habilidades en la tabla global.',
          icon: Icons.emoji_events,
          targetKey: leaderboardKey,
          showPulse: true,
        ),
      if (achievementsKey != null)
        InteractiveTutorialStep(
          title: 'Galer√≠a de Logros üåü',
          description:
              'Cada logro cuenta una historia de superaci√≥n. Desde tu primera l√≠nea de c√≥digo hasta desaf√≠os √©picos, aqu√≠ se celebran todos tus triunfos.',
          icon: Icons.stars,
          targetKey: achievementsKey,
          showPulse: true,
        ),
      InteractiveTutorialStep(
        title: '¬°Tu Aventura Comienza Ahora! ‚ö°',
        description:
            'Tienes todas las herramientas para convertirte en un maestro programador. Recuerda: cada error es aprendizaje, cada l√≠nea de c√≥digo es progreso. ¬°Adelante, h√©roe!',
        icon: Icons.flash_on,
        showPulse: false,
      ),
    ];
  }



  /// Tutorial para la pantalla de misiones
  static List<InteractiveTutorialStep> getMissionsTutorial({
    GlobalKey? missionListKey,
    GlobalKey? firstMissionKey,
  }) {
    return [
      InteractiveTutorialStep(
        title: 'Centro de Comando de Misiones üéØ',
        description:
            '¬°Bienvenido al coraz√≥n de tu aventura! Aqu√≠ encontrar√°s desaf√≠os emocionantes dise√±ados para convertirte en un programador experto. Cada misi√≥n es una oportunidad de crecimiento.',
        icon: Icons.military_tech,
        showPulse: false,
      ),
      if (missionListKey != null)
        InteractiveTutorialStep(
          title: 'Cat√°logo de Aventuras üìã',
          description:
              'Explora este universo de posibilidades. Las misiones est√°n organizadas por dificultad y tema. Conforme avances, desbloquear√°s desaf√≠os m√°s emocionantes y complejos.',
          icon: Icons.explore,
          targetKey: missionListKey,
          showPulse: true,
        ),
      if (firstMissionKey != null)
        InteractiveTutorialStep(
          title: 'Tu Primera Gran Aventura üåü',
          description:
              '¬°Es hora de la acci√≥n! Selecciona cualquier misi√≥n disponible para ver sus detalles, objetivos y recompensas. Cada paso te acerca m√°s a dominar la programaci√≥n.',
          icon: Icons.rocket,
          targetKey: firstMissionKey,
          showPulse: true,
        ),
    ];
  }

  /// Tutorial para la pantalla de logros
  static List<InteractiveTutorialStep> getAchievementsTutorial({
    GlobalKey? achievementGridKey,
    GlobalKey? progressKey,
    GlobalKey? rewardsKey,
  }) {
    return [
      InteractiveTutorialStep(
        title: 'Sal√≥n de la Fama del Programador üèÜ',
        description:
            '¬°Bienvenido a tu museo personal de triunfos! Aqu√≠ se exhiben todas tus haza√±as como programador. Cada logro representa un hito importante en tu viaje de aprendizaje.',
        icon: Icons.museum,
        showPulse: false,
      ),
      if (achievementGridKey != null)
        InteractiveTutorialStep(
          title: 'Colecci√≥n de Trofeos üéñÔ∏è',
          description:
              'Tu vitrina personal de √©xitos. Los logros dorados brillan con orgullo, mientras que los plateados esperan pacientemente tu pr√≥ximo gran momento. ¬°Cada uno tiene su historia!',
          icon: Icons.workspace_premium,
          targetKey: achievementGridKey,
          showPulse: true,
        ),
      if (progressKey != null)
        InteractiveTutorialStep(
          title: 'Medidor de Grandeza üìà',
          description:
              'Tu barra de progreso hacia la maestr√≠a. Cada porcentaje representa horas de dedicaci√≥n, l√≠neas de c√≥digo escritas y problemas resueltos. ¬°El camino hacia la excelencia!',
          icon: Icons.trending_up,
          targetKey: progressKey,
          showPulse: true,
        ),
      if (rewardsKey != null)
        InteractiveTutorialStep(
          title: 'Tesoros del Conocimiento üíé',
          description:
              'Los logros no solo son reconocimientos, ¬°son llaves que abren puertas! Experiencia extra, t√≠tulos √∫nicos, objetos especiales y sorpresas te esperan.',
          icon: Icons.diamond,
          targetKey: rewardsKey,
          showPulse: true,
        ),
    ];
  }

  /// Tutorial para la pantalla de misiones (nueva versi√≥n)
  static List<InteractiveTutorialStep> getMissionScreenTutorial({
    GlobalKey? missionListKey,
    GlobalKey? filterButtonKey,
    GlobalKey? backButtonKey,
  }) {
    return [
      InteractiveTutorialStep(
        title: '¬°Bienvenido al Reino de las Misiones! üè∞',
        description:
            'Has entrado al epicentro de la aventura. Aqu√≠ cada desaf√≠o es una puerta hacia nuevos conocimientos. ¬°Prep√°rate para una experiencia de aprendizaje √∫nica y emocionante!',
        icon: Icons.castle,
        showPulse: false,
      ),
      if (missionListKey != null)
        InteractiveTutorialStep(
          title: 'Mapa del Tesoro del Conocimiento üó∫Ô∏è',
          description:
              'Tu gu√≠a hacia la maestr√≠a en programaci√≥n. Las misiones brillantes est√°n listas para ser conquistadas, mientras que las sombreadas aguardan tu crecimiento. ¬°Cada una es un escal√≥n hacia la grandeza!',
          icon: Icons.map,
          targetKey: missionListKey,
          showPulse: true,
        ),
      if (filterButtonKey != null)
        InteractiveTutorialStep(
          title: 'Br√∫jula de Aventuras üß≠',
          description:
              'Tu herramienta de navegaci√≥n inteligente. Filtra por tema, dificultad o tipo de desaf√≠o para encontrar exactamente lo que necesitas para tu pr√≥ximo gran salto de aprendizaje.',
          icon: Icons.explore,
          targetKey: filterButtonKey,
          showPulse: true,
        ),
      if (backButtonKey != null)
        InteractiveTutorialStep(
          title: 'Portal de Regreso üö™',
          description:
              'Tu escape r√°pido cuando necesites reagruparte. Siempre puedes volver al campamento base para planificar tu pr√≥xima estrategia de conquista.',
          icon: Icons.exit_to_app,
          targetKey: backButtonKey,
          showPulse: true,
        ),
      InteractiveTutorialStep(
        title: '¬°Que Comience la √âpica! ‚öîÔ∏è',
        description:
            'Cada misi√≥n completada forja tu leyenda como programador. Experiencia, tesoros y sabidur√≠a te esperan. ¬°El destino est√° en tus manos, valiente aventurero!',
        icon: Icons.auto_awesome,
        showPulse: false,
      ),
    ];
  }

  /// Tutorial para la pantalla de detalle de misi√≥n
  static List<InteractiveTutorialStep> getMissionDetailTutorial({
    GlobalKey? missionTitleKey,
    GlobalKey? missionDescriptionKey,
    GlobalKey? startMissionButtonKey,
  }) {
    return [
      InteractiveTutorialStep(
        title: 'Briefing de la Misi√≥n üìã',
        description:
            '¬°Momento de estrategia! Aqu√≠ tienes toda la informaci√≥n crucial sobre tu pr√≥xima aventura. Conoce a tu enemigo, planifica tu ataque y prep√°rate para la victoria.',
        icon: Icons.assignment_ind,
        showPulse: false,
      ),
      if (missionTitleKey != null)
        InteractiveTutorialStep(
          title: 'Nombre en Clave de la Operaci√≥n üéØ',
          description: 'Cada misi√≥n tiene su identidad √∫nica. Este t√≠tulo no es solo un nombre, es tu destino, tu desaf√≠o, tu oportunidad de brillar como programador.',
          icon: Icons.flag,
          targetKey: missionTitleKey,
          showPulse: true,
        ),
      if (missionDescriptionKey != null)
        InteractiveTutorialStep(
          title: 'Dossier de Inteligencia üìñ',
          description:
              'Tu manual de supervivencia para esta aventura. Lee cuidadosamente: aqu√≠ est√°n los objetivos, el contexto y las claves para triunfar. ¬°El conocimiento es poder!',
          icon: Icons.menu_book,
          targetKey: missionDescriptionKey,
          showPulse: true,
        ),
      if (startMissionButtonKey != null)
        InteractiveTutorialStep(
          title: 'Bot√≥n de Lanzamiento üöÄ',
          description:
              '¬°El momento de la verdad! Cuando te sientas preparado y confiado, presiona aqu√≠ para iniciar tu aventura de aprendizaje. ¬°Tu futuro como programador te espera!',
          icon: Icons.rocket_launch,
          targetKey: startMissionButtonKey,
          showPulse: true,
        ),
    ];
  }

  /// Tutorial para la pantalla de teor√≠a
  static List<InteractiveTutorialStep> getTheoryScreenTutorial({
    GlobalKey? theoryTitleKey,
    GlobalKey? theoryContentKey,
    GlobalKey? examplesKey,
    GlobalKey? startExercisesButtonKey,
    GlobalKey? backButtonKey,
  }) {
    return [
      InteractiveTutorialStep(
        title: 'Academia de Conocimiento üéì',
        description:
            '¬°Bienvenido al aula m√°s emocionante del mundo! Aqu√≠ transformar√°s conceptos abstractos en superpoderes de programaci√≥n. Cada l√≠nea que leas te acerca m√°s a la maestr√≠a.',
        icon: Icons.school,
        showPulse: false,
      ),
      if (theoryTitleKey != null)
        InteractiveTutorialStep(
          title: 'Lecci√≥n del D√≠a üìñ',
          description:
              'El tema estrella de tu aventura de aprendizaje. Este concepto ser√° tu nueva herramienta secreta para resolver problemas como un verdadero programador ninja.',
          icon: Icons.auto_stories,
          targetKey: theoryTitleKey,
          showPulse: true,
        ),
      if (theoryContentKey != null)
        InteractiveTutorialStep(
          title: 'Grimorio del Programador üìú',
          description:
              'Tu manual de hechizos de programaci√≥n. Lee cada palabra como si fuera un tesoro: aqu√≠ est√°n los secretos que necesitas para dominar este arte milenario.',
          icon: Icons.library_books,
          targetKey: theoryContentKey,
          showPulse: true,
        ),
      if (examplesKey != null)
        InteractiveTutorialStep(
          title: 'Laboratorio de Experimentos üß™',
          description:
              '¬°La magia en acci√≥n! Estos ejemplos son como recetas de cocina para programadores. Observa c√≥mo la teor√≠a cobra vida y se convierte en c√≥digo real y funcional.',
          icon: Icons.science,
          targetKey: examplesKey,
          showPulse: true,
        ),
      if (startExercisesButtonKey != null)
        InteractiveTutorialStep(
          title: 'Arena de Combate ü•ä',
          description:
              '¬°Hora de demostrar tu val√≠a! Cuando te sientas como un maestro de la teor√≠a, presiona aqu√≠ para enfrentar desaf√≠os reales y poner a prueba tus nuevas habilidades.',
          icon: Icons.sports_mma,
          targetKey: startExercisesButtonKey,
          showPulse: true,
        ),
      if (backButtonKey != null)
        InteractiveTutorialStep(
          title: 'Puerta de Escape Estrat√©gico üîÑ',
          description:
              'A veces necesitas reagruparte y revisar el plan maestro. Este bot√≥n te lleva de vuelta al briefing para repasar los objetivos de tu misi√≥n.',
          icon: Icons.refresh,
          targetKey: backButtonKey,
          showPulse: true,
        ),
    ];
  }

  /// Tutorial de bienvenida despu√©s de la primera selecci√≥n de personaje
  static List<InteractiveTutorialStep> getWelcomeTutorial() {
    return [
      InteractiveTutorialStep(
        title: '¬°Bienvenido a CodeQuest, H√©roe! üéâ',
        description:
            '¬°Felicidades, valiente aventurero! Has dado el primer paso hacia la grandeza. Tu personaje est√° listo y tu destino como maestro programador te espera. ¬°La leyenda comienza ahora!',
        icon: Icons.celebration,
        showPulse: false,
      ),
      InteractiveTutorialStep(
        title: 'El Mundo Te Espera üåç',
        description:
            'Un universo infinito de posibilidades se abre ante ti. Explorar√°s reinos de c√≥digo, conquistar√°s algoritmos misteriosos y desbloquear√°s poderes de programaci√≥n que ni imaginas.',
        icon: Icons.public,
        showPulse: false,
      ),
      InteractiveTutorialStep(
        title: 'Forja Tu Leyenda üí´',
        description:
            'Cada l√≠nea de c√≥digo que escribas, cada problema que resuelvas, cada misi√≥n que completes te convertir√° en una leyenda. Experiencia, tesoros y reconocimiento ser√°n tus recompensas.',
        icon: Icons.auto_awesome,
        showPulse: false,
      ),
      InteractiveTutorialStep(
        title: '¬°Que Comience la √âpica! üöÄ',
        description:
            'Tu nave est√° lista, tu equipo preparado, tu mente afilada. Dir√≠gete al centro de comando y elige tu primera misi√≥n. ¬°El futuro de la programaci√≥n est√° en tus manos, campe√≥n!',
        icon: Icons.rocket_launch,
        showPulse: false,
      ),
    ];
  }

  /// Verifica si un tutorial est√° disponible pero NO lo inicia autom√°ticamente
  static Future<void> startTutorialIfNeeded(
    BuildContext context,
    String tutorialKey,
    List<InteractiveTutorialStep> steps,
  ) async {
    try {
      // Evitar verificaciones repetitivas del mismo tutorial
      if (_checkedTutorials.contains(tutorialKey)) {
        return;
      }

      final tutorialService = TutorialService();
      final completed = await tutorialService.isTutorialCompleted(tutorialKey);

      // Verificar si el contexto sigue siendo v√°lido
      if (!context.mounted) return;

      // Marcar como verificado para evitar llamadas futuras
      _checkedTutorials.add(tutorialKey);

      // Solo verificar si el tutorial est√° disponible, pero NO iniciarlo autom√°ticamente
      // El tutorial solo debe iniciarse cuando se accede espec√≠ficamente desde el men√∫
      if (!completed) {
        // Tutorial disponible pero no se inicia autom√°ticamente
        debugPrint(
          'Tutorial $tutorialKey disponible pero no se inicia autom√°ticamente',
        );
      }
    } catch (e) {
      // Capturar cualquier error que pueda ocurrir
      debugPrint('Error al verificar tutorial: $e');
    }
  }

  /// Muestra un di√°logo para iniciar un tutorial espec√≠fico
  static void showTutorialDialog(
    BuildContext context,
    List<InteractiveTutorialStep> steps, {
    String? tutorialKey,
  }) {
    _showTutorialDialog(context, steps, tutorialKey: tutorialKey);
  }

  /// M√©todo p√∫blico para iniciar un tutorial directamente
  static void startTutorial(
    BuildContext context,
    List<InteractiveTutorialStep> steps, {
    String? tutorialKey,
  }) {
    final tutorialService = TutorialService();
    tutorialService._startInteractiveTutorial(context, steps, tutorialKey);
  }

  // M√©todo privado para mostrar el di√°logo de tutorial
  static void _showTutorialDialog(
    BuildContext context,
    List<InteractiveTutorialStep> steps, {
    String? tutorialKey,
  }) {
    showDialog(
      context: context,
      builder:
          (context) => AlertDialog(
            title: const Text('Tutorial'),
            content: const Text(
              '¬øQuieres iniciar el tutorial para esta pantalla?',
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: const Text('No'),
              ),
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop();
                  // Crear una instancia de TutorialService y llamar al m√©todo no est√°tico
                  final tutorialService = TutorialService();
                  tutorialService._startInteractiveTutorial(
                    context,
                    steps,
                    tutorialKey,
                  );
                },
                child: const Text('S√≠'),
              ),
            ],
          ),
    );
  }

  // Variable para almacenar la referencia al OverlayEntry actual
  OverlayEntry? _currentOverlayEntry;

  // M√©todo privado para iniciar el tutorial interactivo
  void _startInteractiveTutorial(
    BuildContext context,
    List<InteractiveTutorialStep> steps,
    String? tutorialKey,
  ) {
    try {
      if (!context.mounted || steps.isEmpty) {
        return;
      }

      // En lugar de usar Navigator.push, usaremos Overlay para mostrar el tutorial como una capa superpuesta
      final overlay = Overlay.of(context);

      // Crear el OverlayEntry y almacenar la referencia
      _currentOverlayEntry = OverlayEntry(
        builder:
            (context) => Stack(
              children: [
                // Capa transparente que permite que los toques pasen a trav√©s
                Positioned.fill(
                  child: IgnorePointer(
                    child: Container(color: Colors.transparent),
                  ),
                ),
                // Widget de tutorial
                Positioned.fill(
                  child: Material(
                    type: MaterialType.transparency,
                    child: InteractiveTutorial(
                      steps: steps,
                      autoStart: true,
                      child:
                          const SizedBox.shrink(), // Widget invisible que no ocupa espacio
                      onComplete: () async {
                        // Marcar el tutorial como completado si se proporciona una clave
                        if (tutorialKey != null) {
                          final tutorialService = TutorialService();
                          await tutorialService.markTutorialCompleted(
                            tutorialKey,
                          );
                        }

                        // Eliminar el overlay
                        if (_currentOverlayEntry != null) {
                          _currentOverlayEntry!.remove();
                          _currentOverlayEntry = null;
                        }
                      },
                      onCancel: () {
                        // Eliminar el overlay
                        if (_currentOverlayEntry != null) {
                          _currentOverlayEntry!.remove();
                          _currentOverlayEntry = null;
                        }
                      },
                    ),
                  ),
                ),
              ],
            ),
      );

      // Insertar el overlay
      overlay.insert(_currentOverlayEntry!);
    } catch (e) {
      // Capturar cualquier error que pueda ocurrir
      debugPrint('Error al iniciar tutorial interactivo: $e');
    }
  }

  // Claves p√∫blicas para los tutoriales
  static const String homeScreenTutorial = _homeScreenTutorialKey;

  static const String missionScreenTutorial = _missionsTutorialKey;
  static const String achievementScreenTutorial = _achievementsTutorialKey;
  static const String missionDetailTutorial = _missionDetailTutorialKey;
  static const String welcomeTutorial = _welcomeTutorialKey;
  static const String theoryScreenTutorial = _theoryScreenTutorialKey;
}
